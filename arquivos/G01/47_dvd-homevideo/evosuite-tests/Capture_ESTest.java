/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 08:01:18 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Capture_ESTest extends Capture_ESTest_scaffolding {

  public void test0()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: 
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Wrong setup: *
 * Inadequate coverage increment: *
 */
      Capture capture0 = new Capture();
      // Undeclared exception!
      try { 
        capture0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Capture", e);
      }
  }


  public void test1()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: 
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Inadequate coverage increment: *
 * Default Constructor: *
 * Unuseful Console Output: *
 */
      Capture capture0 = new Capture();
      // Undeclared exception!
      try { 
        capture0.DV_Capture();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Capture", e);
      }
  }


  public void test2()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: 
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Inadequate coverage increment: *
 * Default Constructor: *
 * Unuseful Console Output: *
 */
      Capture capture0 = new Capture();
      // Undeclared exception!
      try { 
        capture0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Capture", e);
      }
  }


  public void test3()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: *
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: 
 * Duplicated Code: 
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: *
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: *
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Misunderstood class test.
 */
      Capture capture0 = new Capture(60, 60, (GUI) null);
  }


}