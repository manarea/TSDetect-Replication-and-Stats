/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 08:56:33 GMT 2020
 */

package net.sourceforge.jwbf.trac.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sourceforge.jwbf.core.actions.FilePost;
import net.sourceforge.jwbf.core.actions.util.HttpAction;
import net.sourceforge.jwbf.core.contentRep.SimpleArticle;
import net.sourceforge.jwbf.trac.actions.GetRevision;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class GetRevisionTest { 

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision("vMGl$i.;}");
      // Undeclared exception!
      try { 
        getRevision0.processReturningText((String) null, (HttpAction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GetRevision getRevision0 = null;
      try {
        getRevision0 = new GetRevision((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.jwbf.trac.actions.GetRevision", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision(".&lnX)KBY[=");
      getRevision0.getNextMessage();
      getRevision0.getNextMessage();
      getRevision0.getNextMessage();
      boolean boolean0 = getRevision0.hasMoreMessages();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision(".&ln)KBY[=");
      HttpAction httpAction0 = getRevision0.getNextMessage();
      assertEquals("/.&ln)KBY[=?format=txt", httpAction0.getRequest());
      
      HttpAction httpAction1 = getRevision0.getNextMessage();
      assertNotNull(httpAction1);
      assertEquals("/.&ln)KBY[=", httpAction1.getRequest());
      
      boolean boolean0 = getRevision0.hasMoreMessages();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision(".&ln)KBY[=");
      HttpAction httpAction0 = getRevision0.getNextMessage();
      assertEquals("/.&ln)KBY[=?format=txt", httpAction0.getRequest());
      
      boolean boolean0 = getRevision0.hasMoreMessages();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision(".&lnX)KBY[=");
      boolean boolean0 = getRevision0.hasMoreMessages();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision(".&lnX)KBY[=");
      HttpAction httpAction0 = getRevision0.getNextMessage();
      assertEquals("/.&lnX)KBY[=?format=txt", httpAction0.getRequest());
      
      HttpAction httpAction1 = getRevision0.getNextMessage();
      assertNotNull(httpAction1);
      
      getRevision0.processReturningText(".&lnX)KBY[=", httpAction1);
      assertTrue(getRevision0.hasMoreMessages());
      assertEquals("/.&lnX)KBY[=", httpAction1.getRequest());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision("2>C9fi<(a?$W5>A");
      String string0 = getRevision0.processReturningText("2>C9fi<(a?$W5>A", (HttpAction) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision(">g~4MjZ-.v");
      FilePost filePost0 = new FilePost(">g~4MjZ-.v");
      String string0 = getRevision0.processReturningText(">g~4MjZ-.v", filePost0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision("action=diff&amp;version=([0-9]*)");
      getRevision0.getNextMessage();
      HttpAction httpAction0 = getRevision0.getNextMessage();
      // Undeclared exception!
      try { 
        getRevision0.processReturningText("action=diff&amp;version=([0-9]*)", httpAction0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision("action=diff&amp;version=([0-9]*)");
      HttpAction httpAction0 = getRevision0.getNextMessage();
      getRevision0.processReturningText("", httpAction0);
      assertEquals("/action=diff&amp;version=([0-9]*)?format=txt", httpAction0.getRequest());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision("class=\"author\">([^B]*)<");
      String string0 = getRevision0.processReturningText("class=\"author\">([^B]*)<", (HttpAction) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GetRevision getRevision0 = null;
      try {
        getRevision0 = new GetRevision("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // articlename is empty
         //
         verifyException("net.sourceforge.jwbf.trac.actions.GetRevision", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision("net.sourceforge.jwbf.core.actions.uti.ProcessException");
      SimpleArticle simpleArticle0 = getRevision0.getArticle();
      assertEquals("", simpleArticle0.getRevisionId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GetRevision getRevision0 = new GetRevision("net.sourceforge.jwbf.core.actions.util.ProcessException");
      boolean boolean0 = getRevision0.isSelfExecuter();
      assertFalse(boolean0);
  }
}
