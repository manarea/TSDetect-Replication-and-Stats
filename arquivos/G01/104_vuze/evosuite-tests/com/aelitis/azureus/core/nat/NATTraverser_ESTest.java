/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 08:08:32 GMT 2020
 */

package com.aelitis.azureus.core.nat;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.aelitis.azureus.core.AzureusCore;
import com.aelitis.azureus.core.impl.AzureusCoreImpl;
import com.aelitis.azureus.core.nat.NATTraversal;
import com.aelitis.azureus.core.nat.NATTraversalHandler;
import com.aelitis.azureus.core.nat.NATTraversalObserver;
import com.aelitis.azureus.core.nat.NATTraverser;
import com.aelitis.azureus.core.peermanager.nat.PeerNATTraverser;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NATTraverser_ESTest extends NATTraverser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NATTraverser nATTraverser0 = new NATTraverser((AzureusCore) null);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 2);
      HashMap<PeerNATTraverser, Object> hashMap0 = new HashMap<PeerNATTraverser, Object>();
      NATTraversalObserver nATTraversalObserver0 = mock(NATTraversalObserver.class, new ViolatedAssumptionAnswer());
      nATTraverser0.syncTraverse((NATTraversalHandler) null, mockInetSocketAddress0, hashMap0, nATTraversalObserver0);
      assertFalse(mockInetSocketAddress0.isUnresolved());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          AzureusCore azureusCore0 = AzureusCoreImpl.create();
          NATTraverser nATTraverser0 = new NATTraverser(azureusCore0);
          PeerNATTraverser peerNATTraverser0 = new PeerNATTraverser(azureusCore0);
          nATTraverser0.registerHandler(peerNATTraverser0);
          assertEquals(1, peerNATTraverser0.getType());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          AzureusCore azureusCore0 = AzureusCoreImpl.create();
          NATTraverser nATTraverser0 = new NATTraverser(azureusCore0);
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(1);
          HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
          // Undeclared exception!
          try { 
            nATTraverser0.syncTraverse((NATTraversalHandler) null, mockInetSocketAddress0, hashMap0, (NATTraversalObserver) null);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("com.aelitis.azureus.core.nat.NATTraverser", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          AzureusCore azureusCore0 = AzureusCoreImpl.create();
          NATTraverser nATTraverser0 = new NATTraverser(azureusCore0);
          // Undeclared exception!
          try { 
            nATTraverser0.registerHandler((NATTraversalHandler) null);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("com.aelitis.azureus.core.nat.NATTraverser", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NATTraverser nATTraverser0 = new NATTraverser((AzureusCore) null);
      // Undeclared exception!
      try { 
        nATTraverser0.getClientData((InetSocketAddress) null, (Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.aelitis.azureus.core.nat.NATTraverser", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NATTraverser nATTraverser0 = new NATTraverser((AzureusCore) null);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 1);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Map map0 = nATTraverser0.getClientData(mockInetSocketAddress0, hashMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          AzureusCore azureusCore0 = AzureusCoreImpl.create();
          NATTraverser nATTraverser0 = new NATTraverser(azureusCore0);
          InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 1);
          PeerNATTraverser peerNATTraverser0 = PeerNATTraverser.getSingleton();
          try { 
            nATTraverser0.sendMessage(peerNATTraverser0, mockInetSocketAddress0, mockInetSocketAddress0, (Map) null);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Puncher unavailable
             //
             verifyException("com.aelitis.azureus.core.nat.NATTraverser", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NATTraverser nATTraverser0 = new NATTraverser((AzureusCore) null);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 1);
      NATTraversalObserver nATTraversalObserver0 = mock(NATTraversalObserver.class, new ViolatedAssumptionAnswer());
      NATTraversal nATTraversal0 = nATTraverser0.attemptTraversal((NATTraversalHandler) null, mockInetSocketAddress0, (Map) null, true, nATTraversalObserver0);
      assertNotNull(nATTraversal0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          AzureusCore azureusCore0 = AzureusCoreImpl.create();
          NATTraverser nATTraverser0 = new NATTraverser(azureusCore0);
          InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 1);
          HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
          PeerNATTraverser peerNATTraverser0 = PeerNATTraverser.getSingleton();
          NATTraversalObserver nATTraversalObserver0 = mock(NATTraversalObserver.class, new ViolatedAssumptionAnswer());
          nATTraverser0.attemptTraversal(peerNATTraverser0, mockInetSocketAddress0, hashMap0, false, nATTraversalObserver0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
