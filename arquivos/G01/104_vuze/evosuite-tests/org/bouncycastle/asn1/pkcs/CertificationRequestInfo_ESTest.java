/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 08:52:33 GMT 2020
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Hashtable;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERSet;
import org.bouncycastle.asn1.DERConstructedSequence;
import org.bouncycastle.asn1.DERConstructedSet;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERSet;
import org.bouncycastle.asn1.pkcs.CertificationRequestInfo;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.asn1.x509.X509Name;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class CertificationRequestInfoTest { 

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hashtable<Object, ASN1Sequence> hashtable0 = new Hashtable<Object, ASN1Sequence>();
      X509Name x509Name0 = new X509Name(hashtable0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, (DEREncodable) null);
      BERSet bERSet0 = new BERSet(subjectPublicKeyInfo0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      certificationRequestInfo0.version = null;
      DERInteger dERInteger0 = certificationRequestInfo0.getVersion();
      assertNull(dERInteger0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector<DERConstructedSequence> vector0 = new Vector<DERConstructedSequence>();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      X509Name x509Name0 = new X509Name(vector0, hashtable0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(x509Name0.GENDER, x509Name0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, algorithmIdentifier0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, (ASN1Set) null);
      ASN1Set aSN1Set0 = certificationRequestInfo0.getAttributes();
      assertNull(aSN1Set0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.CN;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, (DEREncodable) null);
      Hashtable<CertificationRequestInfo, CertificationRequestInfo> hashtable0 = new Hashtable<CertificationRequestInfo, CertificationRequestInfo>();
      X509Name x509Name0 = new X509Name((Vector) null, hashtable0);
      DERConstructedSet dERConstructedSet0 = new DERConstructedSet(dERObjectIdentifier0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, dERConstructedSet0);
      ASN1Set aSN1Set0 = certificationRequestInfo0.getAttributes();
      assertSame(aSN1Set0, dERConstructedSet0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      // Undeclared exception!
      try { 
        CertificationRequestInfo.getInstance(bERConstructedSequence0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo((ASN1Sequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.CN;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, (DEREncodable) null);
      DERSequence dERSequence0 = (DERSequence)subjectPublicKeyInfo0.toASN1Object();
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo(dERSequence0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bouncycastle.asn1.x509.AlgorithmIdentifier cannot be cast to org.bouncycastle.asn1.DERInteger
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSequence dERSequence0 = new DERSequence(dEREncodableVector0);
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo(dERSequence0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hashtable<Object, ASN1Sequence> hashtable0 = new Hashtable<Object, ASN1Sequence>();
      X509Name x509Name0 = new X509Name(hashtable0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, (DEREncodable) null);
      BERSet bERSet0 = new BERSet();
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      certificationRequestInfo0.version = null;
      DERSequence dERSequence0 = (DERSequence)certificationRequestInfo0.getDERObject();
      CertificationRequestInfo certificationRequestInfo1 = null;
      try {
        certificationRequestInfo1 = new CertificationRequestInfo(dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not all mandatory fields set in CertificationRequestInfo generator.
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, (DEREncodable) null);
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[3];
      aSN1EncodableArray0[2] = (ASN1Encodable) subjectPublicKeyInfo0;
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo(dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not all mandatory fields set in CertificationRequestInfo generator.
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hashtable<Object, ASN1Sequence> hashtable0 = new Hashtable<Object, ASN1Sequence>();
      X509Name x509Name0 = new X509Name(hashtable0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, (DEREncodable) null);
      BERSet bERSet0 = new BERSet();
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      DERSequence dERSequence0 = (DERSequence)certificationRequestInfo0.getDERObject();
      CertificationRequestInfo certificationRequestInfo1 = new CertificationRequestInfo(dERSequence0);
      assertEquals(4, dERSequence0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.CN;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, (DEREncodable) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      Hashtable<CertificationRequestInfo, CertificationRequestInfo> hashtable0 = new Hashtable<CertificationRequestInfo, CertificationRequestInfo>();
      X509Name x509Name0 = new X509Name(vector0, hashtable0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, (ASN1Set) null);
      DERSequence dERSequence0 = (DERSequence)certificationRequestInfo0.getDERObject();
      CertificationRequestInfo certificationRequestInfo1 = new CertificationRequestInfo(dERSequence0);
      assertFalse(certificationRequestInfo1.equals((Object)certificationRequestInfo0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hashtable<Object, ASN1Sequence> hashtable0 = new Hashtable<Object, ASN1Sequence>();
      X509Name x509Name0 = new X509Name(hashtable0);
      BERSet bERSet0 = new BERSet();
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, (SubjectPublicKeyInfo) null, bERSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not all mandatory fields set in CertificationRequestInfo generator.
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DERSet dERSet0 = new DERSet((DEREncodable) null);
      CertificationRequestInfo certificationRequestInfo0 = null;
      try {
        certificationRequestInfo0 = new CertificationRequestInfo((X509Name) null, (SubjectPublicKeyInfo) null, dERSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not all mandatory fields set in CertificationRequestInfo generator.
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        CertificationRequestInfo.getInstance(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unknown object in factory
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.CN;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, (DEREncodable) null);
      BERSet bERSet0 = new BERSet(dEREncodableVector0);
      Vector<Integer> vector0 = new Vector<Integer>();
      Hashtable<CertificationRequestInfo, CertificationRequestInfo> hashtable0 = new Hashtable<CertificationRequestInfo, CertificationRequestInfo>();
      X509Name x509Name0 = new X509Name(vector0, hashtable0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      CertificationRequestInfo certificationRequestInfo1 = CertificationRequestInfo.getInstance(certificationRequestInfo0);
      assertSame(certificationRequestInfo1, certificationRequestInfo0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.DC;
      BERSequence bERSequence0 = new BERSequence(dERObjectIdentifier0);
      // Undeclared exception!
      try { 
        CertificationRequestInfo.getInstance(bERSequence0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.bouncycastle.asn1.DERObjectIdentifier cannot be cast to org.bouncycastle.asn1.DERInteger
         //
         verifyException("org.bouncycastle.asn1.pkcs.CertificationRequestInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hashtable<Object, ASN1Sequence> hashtable0 = new Hashtable<Object, ASN1Sequence>();
      X509Name x509Name0 = new X509Name(hashtable0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, (DEREncodable) null);
      BERSet bERSet0 = new BERSet();
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      X509Name x509Name1 = certificationRequestInfo0.getSubject();
      assertSame(x509Name1, x509Name0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hashtable<Object, ASN1Sequence> hashtable0 = new Hashtable<Object, ASN1Sequence>();
      X509Name x509Name0 = new X509Name(hashtable0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, (DEREncodable) null);
      BERSet bERSet0 = new BERSet();
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      ASN1Set aSN1Set0 = certificationRequestInfo0.getAttributes();
      assertSame(aSN1Set0, bERSet0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hashtable<Object, ASN1Sequence> hashtable0 = new Hashtable<Object, ASN1Sequence>();
      X509Name x509Name0 = new X509Name(hashtable0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, (DEREncodable) null);
      BERSet bERSet0 = new BERSet(subjectPublicKeyInfo0);
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      DERInteger dERInteger0 = certificationRequestInfo0.getVersion();
      assertNotNull(dERInteger0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hashtable<Object, ASN1Sequence> hashtable0 = new Hashtable<Object, ASN1Sequence>();
      X509Name x509Name0 = new X509Name(hashtable0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, (DEREncodable) null);
      BERSet bERSet0 = new BERSet();
      CertificationRequestInfo certificationRequestInfo0 = new CertificationRequestInfo(x509Name0, subjectPublicKeyInfo0, bERSet0);
      SubjectPublicKeyInfo subjectPublicKeyInfo1 = certificationRequestInfo0.getSubjectPublicKeyInfo();
      assertSame(subjectPublicKeyInfo1, subjectPublicKeyInfo0);
  }
}
