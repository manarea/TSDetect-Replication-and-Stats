/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 08:17:29 GMT 2020
 */

package ch.bfh.egov.nutzenportfolio.action;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ch.bfh.egov.nutzenportfolio.action.DetailzieleAction;
import ch.bfh.egov.nutzenportfolio.form.FragenForm;
import ch.bfh.egov.nutzenportfolio.form.NaOpNuForm;
import ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm;
import ch.bfh.egov.nutzenportfolio.persistence.common.CommonIbatisDao;
import ch.bfh.egov.nutzenportfolio.persistence.customizing.CustomizingIbatisDao;
import ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleDao;
import ch.bfh.egov.nutzenportfolio.persistence.detailziele.DetailzieleIbatisDao;
import ch.bfh.egov.nutzenportfolio.persistence.strategischeziele.StrategischeZieleIbatisDao;
import ch.bfh.egov.nutzenportfolio.service.common.CommonDaoService;
import ch.bfh.egov.nutzenportfolio.service.common.CommonService;
import ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingDaoService;
import ch.bfh.egov.nutzenportfolio.service.customizing.CustomizingService;
import ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleDaoService;
import ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleService;
import ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleDaoService;
import ch.bfh.egov.nutzenportfolio.service.strategischeziele.StrategischeZieleService;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.upload.DiskMultipartRequestHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DetailzieleAction_ESTest extends DetailzieleAction_ESTest_scaffolding {

  public void test00()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: 
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      try { 
        detailzieleAction0.update(actionMapping0, dynaActionForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.struts.action.DynaActionForm", e);
      }
  }


  public void test01()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: *
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      try { 
        detailzieleAction0.set(actionMapping0, dynaActionForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.struts.action.DynaActionForm", e);
      }
  }


  public void test02()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: *
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      FragenForm fragenForm0 = new FragenForm();
      try { 
        detailzieleAction0.set(actionMapping0, fragenForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ch.bfh.egov.nutzenportfolio.form.FragenForm cannot be cast to org.apache.struts.action.DynaActionForm
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test03()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: *
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      try { 
        detailzieleAction0.remove(actionMapping0, dynaActionForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.struts.action.DynaActionForm", e);
      }
  }


  public void test04()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: *
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 */
      ActionMapping actionMapping0 = new ActionMapping();
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      NaOpNuForm naOpNuForm0 = new NaOpNuForm();
      try { 
        detailzieleAction0.remove(actionMapping0, naOpNuForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ch.bfh.egov.nutzenportfolio.form.NaOpNuForm cannot be cast to org.apache.struts.action.DynaActionForm
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test05()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: *
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService((DetailzieleDao) null);
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      try { 
        detailzieleAction0.prepare(actionMapping0, dynaActionForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test06()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: 
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): *
 * Magic Number Test: 
 * Obscure In Line Setup: *
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: *
 * Unused Inputs: 
 * Verbose Tests (*): *
 * OBSERVATIONS: 
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      StrategischeZieleIbatisDao strategischeZieleIbatisDao0 = new StrategischeZieleIbatisDao();
      StrategischeZieleDaoService strategischeZieleDaoService0 = new StrategischeZieleDaoService(strategischeZieleIbatisDao0);
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, strategischeZieleDaoService0, (CommonService) null, (CustomizingService) null);
      ActionMapping actionMapping0 = new ActionMapping();
      Object object0 = new Object();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(httpSession0).when(httpServletRequest0).getSession();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      try { 
        detailzieleAction0.prepare(actionMapping0, (ActionForm) null, httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Integer
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test07()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: 
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Unuseful Console Output: *
 * Testing Null Arguments: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      ProjektattraktivitaetForm projektattraktivitaetForm0 = new ProjektattraktivitaetForm();
      // Undeclared exception!
      try { 
        detailzieleAction0.next(actionMapping0, projektattraktivitaetForm0, httpServletRequestWrapper0, (HttpServletResponse) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }


  public void test08()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: 
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: *
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): *
 * Magic Number Test: 
 * Obscure In Line Setup: *
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: *
 * Unused Inputs: 
 * Verbose Tests (*): *
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      StrategischeZieleIbatisDao strategischeZieleIbatisDao0 = new StrategischeZieleIbatisDao();
      StrategischeZieleDaoService strategischeZieleDaoService0 = new StrategischeZieleDaoService(strategischeZieleIbatisDao0);
      CommonIbatisDao commonIbatisDao0 = new CommonIbatisDao();
      CommonDaoService commonDaoService0 = new CommonDaoService(commonIbatisDao0);
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, strategischeZieleDaoService0, commonDaoService0, (CustomizingService) null);
      DiskMultipartRequestHandler diskMultipartRequestHandler0 = new DiskMultipartRequestHandler();
      diskMultipartRequestHandler0.getMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("wLB").when(httpServletRequest0).getParameter(anyString());
      doReturn(httpSession0, (HttpSession) null).when(httpServletRequest0).getSession();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      try { 
        detailzieleAction0.next((ActionMapping) null, dynaActionForm0, httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test09()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: 
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): *
 * Magic Number Test: 
 * Obscure In Line Setup: *
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: *
 * Unused Inputs: 
 * Verbose Tests (*): *
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      StrategischeZieleIbatisDao strategischeZieleIbatisDao0 = new StrategischeZieleIbatisDao();
      StrategischeZieleDaoService strategischeZieleDaoService0 = new StrategischeZieleDaoService(strategischeZieleIbatisDao0);
      CommonIbatisDao commonIbatisDao0 = new CommonIbatisDao();
      CommonDaoService commonDaoService0 = new CommonDaoService(commonIbatisDao0);
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, strategischeZieleDaoService0, commonDaoService0, (CustomizingService) null);
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("wLB").when(httpServletRequest0).getParameter(anyString());
      doReturn((HttpSession) null).when(httpServletRequest0).getSession();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      try { 
        detailzieleAction0.next((ActionMapping) null, dynaActionForm0, httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test10()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      try { 
        detailzieleAction0.edit(actionMapping0, dynaActionForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.struts.action.DynaActionForm", e);
      }
  }


  public void test11()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      try { 
        detailzieleAction0.deletequestion(actionMapping0, dynaActionForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleDaoService", e);
      }
  }


  public void test12()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Failed Setup: *
 * Testing Null Arguments: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      ProjektattraktivitaetForm projektattraktivitaetForm0 = new ProjektattraktivitaetForm();
      try { 
        detailzieleAction0.deletequestion(actionMapping0, projektattraktivitaetForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm cannot be cast to org.apache.struts.action.DynaActionForm
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test13()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      try { 
        detailzieleAction0.delete(actionMapping0, dynaActionForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleDaoService", e);
      }
  }


  public void test14()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Failed Setup: *
 * Null Arguments
 */
      ActionMapping actionMapping0 = new ActionMapping();
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      ProjektattraktivitaetForm projektattraktivitaetForm0 = new ProjektattraktivitaetForm();
      try { 
        detailzieleAction0.delete(actionMapping0, projektattraktivitaetForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ch.bfh.egov.nutzenportfolio.form.ProjektattraktivitaetForm cannot be cast to org.apache.struts.action.DynaActionForm
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test15()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Unuseful Console Output: *
 * Testing Null Arguments: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        detailzieleAction0.add(actionMapping0, dynaActionForm0, httpServletRequestWrapper0, (HttpServletResponse) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }


  public void test16()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      try { 
        detailzieleAction0.add(actionMapping0, dynaActionForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleDaoService", e);
      }
  }


  public void test17()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Failed Setup: *
 * Testing Null Arguments: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      FragenForm fragenForm0 = new FragenForm();
      try { 
        detailzieleAction0.add(actionMapping0, fragenForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ch.bfh.egov.nutzenportfolio.form.FragenForm cannot be cast to org.apache.struts.action.DynaActionForm
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test18()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: 
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: *
 */
      StrategischeZieleIbatisDao strategischeZieleIbatisDao0 = new StrategischeZieleIbatisDao();
      StrategischeZieleDaoService strategischeZieleDaoService0 = new StrategischeZieleDaoService(strategischeZieleIbatisDao0);
      CommonIbatisDao commonIbatisDao0 = new CommonIbatisDao();
      CommonDaoService commonDaoService0 = new CommonDaoService(commonIbatisDao0);
      CustomizingIbatisDao customizingIbatisDao0 = new CustomizingIbatisDao();
      CustomizingDaoService customizingDaoService0 = new CustomizingDaoService(customizingIbatisDao0);
      DetailzieleAction detailzieleAction0 = null;
      try {
        detailzieleAction0 = new DetailzieleAction((DetailzieleService) null, strategischeZieleDaoService0, commonDaoService0, customizingDaoService0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test19()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS:
 * Testing Null Arguments: *
 * Unuseful Console Output: * 
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("true").when(httpServletRequest0).getParameter(anyString());
      try { 
        detailzieleAction0.next(actionMapping0, dynaActionForm0, httpServletRequest0, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.struts.action.ActionMapping", e);
      }
  }


  public void test20()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Failed Setup: *
 * Testing Null Arguments: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      NaOpNuForm naOpNuForm0 = new NaOpNuForm();
      try { 
        detailzieleAction0.edit(actionMapping0, naOpNuForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ch.bfh.egov.nutzenportfolio.form.NaOpNuForm cannot be cast to org.apache.struts.action.DynaActionForm
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test21()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: 
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): *
 * Magic Number Test: 
 * Obscure In Line Setup: *
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): *
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: * 
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      StrategischeZieleIbatisDao strategischeZieleIbatisDao0 = new StrategischeZieleIbatisDao();
      StrategischeZieleDaoService strategischeZieleDaoService0 = new StrategischeZieleDaoService(strategischeZieleIbatisDao0);
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, strategischeZieleDaoService0, (CommonService) null, (CustomizingService) null);
      ActionMapping actionMapping0 = new ActionMapping();
      HttpSession httpSession0 = mock(HttpSession.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(httpSession0).getAttribute(anyString());
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getParameter(anyString());
      doReturn(httpSession0, (HttpSession) null).when(httpServletRequest0).getSession();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponseWrapper httpServletResponseWrapper0 = new HttpServletResponseWrapper(httpServletResponse0);
      try { 
        detailzieleAction0.next(actionMapping0, (ActionForm) null, httpServletRequestWrapper0, httpServletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


  public void test22()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Testing Null Arguments: *
 * Unuseful Console Output: * 
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      ActionMapping actionMapping0 = new ActionMapping();
      DynaActionForm dynaActionForm0 = new DynaActionForm();
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      try { 
        detailzieleAction0.list(actionMapping0, dynaActionForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ch.bfh.egov.nutzenportfolio.service.detailziele.DetailzieleDaoService", e);
      }
  }


  public void test23()  throws Throwable  {
/* * Assertion Roulette: 
 * Assertionless Test: 
 * Bloated Constructor: 
 * Brittle Assertions: 
 * Confused Object: 
 * Constructor Inicialization: *
 * Duplicated Code: *
 * Eager Test: 
 * Fragile Test: 
 * Hard coded test data: 
 * Indirecting Testing: 
 * Lazy Test: *
 * Likely Inneffective Object-Comparison: 
 * Long Parameter List: 
 * Long Test (Verbose Tests): 
 * Magic Number Test: 
 * Obscure In Line Setup: 
 * Obscure Test: 
 * Overcommented Test: 
 * Sensitive Equality: 
 * Test Redundancy: 
 * Tests that never break: 
 * Too Many Dependencies: 
 * Unused Inputs: 
 * Verbose Tests (*): 
 * OBSERVATIONS: 
 * Failed Setup: *
 * Testing Null Arguments: *
 */
      DetailzieleIbatisDao detailzieleIbatisDao0 = new DetailzieleIbatisDao();
      DetailzieleDaoService detailzieleDaoService0 = new DetailzieleDaoService(detailzieleIbatisDao0);
      DetailzieleAction detailzieleAction0 = new DetailzieleAction(detailzieleDaoService0, (StrategischeZieleService) null, (CommonService) null, (CustomizingService) null);
      ActionMapping actionMapping0 = new ActionMapping();
      FragenForm fragenForm0 = new FragenForm();
      try { 
        detailzieleAction0.update(actionMapping0, fragenForm0, (HttpServletRequest) null, (HttpServletResponse) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ch.bfh.egov.nutzenportfolio.form.FragenForm cannot be cast to org.apache.struts.action.DynaActionForm
         //
         verifyException("ch.bfh.egov.nutzenportfolio.action.DetailzieleAction", e);
      }
  }


}