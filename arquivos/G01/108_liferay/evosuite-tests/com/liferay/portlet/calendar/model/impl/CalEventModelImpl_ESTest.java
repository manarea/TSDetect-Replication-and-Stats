/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 08:09:00 GMT 2020
 */

package com.liferay.portlet.calendar.model.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.util.ServerDetector;
import com.liferay.portal.model.WorkflowInstanceLink;
import com.liferay.portal.model.WorkflowInstanceLinkWrapper;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portlet.calendar.model.CalEvent;
import com.liferay.portlet.calendar.model.CalEventSoap;
import com.liferay.portlet.calendar.model.CalEventWrapper;
import com.liferay.portlet.calendar.model.impl.CalEventImpl;
import com.liferay.portlet.calendar.model.impl.CalEventModelImpl;
import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.time.Instant;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalUnit;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.data.time.SimpleTimePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CalEventModelImpl_ESTest extends CalEventModelImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setPrimaryKey(10485760L);
      calEventImpl0.equals(calEventImpl0);
      calEventImpl0.toEscapedModel();
      calEventImpl0.getDescription();
      assertEquals(10485760L, calEventImpl0.getEventId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setType("durationHour");
      calEventModelImpl0.setUserId(2775L);
      calEventModelImpl0.getUserId();
      calEventModelImpl0.setDescription(", firstReminder=");
      assertEquals(", firstReminder=", calEventModelImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.getTitle();
      calEventImpl0.getFirstReminder();
      calEventImpl0.setCompanyId(1922L);
      calEventImpl0.isTimeZoneSensitive();
      calEventImpl0.resetOriginalValues();
      calEventImpl0.getOriginalCompanyId();
      calEventImpl0.setGroupId(0L);
      calEventImpl0.toCacheModel();
      assertEquals(2L, calEventImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      CalEventModelImpl.COMPANYID_COLUMN_BITMASK = (-1837L);
      calEventModelImpl0.setCompanyId(2736L);
      calEventModelImpl0.resetOriginalValues();
      calEventModelImpl0.toEscapedModel();
      CalEventSoap calEventSoap0 = new CalEventSoap();
      calEventModelImpl0.setCompanyId(2736L);
      calEventModelImpl0.getEventId();
      // Undeclared exception!
      try { 
        calEventModelImpl0.getExpandoBridge();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      CalEventModelImpl.REMINDBY_COLUMN_BITMASK = 0L;
      calEventModelImpl0.setCompanyId((-954L));
      calEventModelImpl0.getCompanyId();
      Date date0 = calEventModelImpl0.getModifiedDate();
      calEventModelImpl0.setEndDate(date0);
      assertEquals((-954L), calEventModelImpl0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.isEscapedModel();
      calEventModelImpl0.setRepeating(false);
      calEventModelImpl0.setGroupId(16L);
      calEventModelImpl0.resetOriginalValues();
      calEventModelImpl0.isAllDay();
      calEventModelImpl0.setGroupId(16L);
      calEventModelImpl0.getUserName();
      System.setCurrentTimeMillis(4L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-.A2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      CalEventModelImpl.GROUPID_COLUMN_BITMASK = 1L;
      CalEventModelImpl.UUID_COLUMN_BITMASK = 0L;
      calEventModelImpl0.setGroupId(1L);
      calEventModelImpl0.setGroupId(calEventModelImpl0.GROUPID_COLUMN_BITMASK);
      calEventModelImpl0.getStartDate();
      assertEquals(1L, calEventModelImpl0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setGroupId(268435456L);
      calEventModelImpl0.toCacheModel();
      calEventModelImpl0.getModelClassName();
      boolean boolean0 = calEventModelImpl0.getOriginalRepeating();
      assertEquals(2L, calEventModelImpl0.getColumnBitmask());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ServiceContext serviceContext0 = new ServiceContext();
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setEventId((-538L));
      calEventImpl0.getPrimaryKeyObj();
      long long0 = calEventImpl0.getPrimaryKey();
      assertEquals((-538L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setSecondReminder(0);
      assertEquals(0, calEventModelImpl0.getSecondReminder());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setModifiedDate((Date) null);
      assertEquals(16L, CalEventModelImpl.TYPE_COLUMN_BITMASK);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setCreateDate((Date) null);
      assertEquals(0L, calEventModelImpl0.getOriginalCompanyId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.getOriginalRepeating();
      calEventModelImpl0.getCompanyId();
      Object object0 = new Object();
      CalEventImpl calEventImpl0 = (CalEventImpl)calEventModelImpl0.clone();
      assertEquals("", calEventImpl0.getTitle());
      assertEquals(0L, calEventImpl0.getOriginalGroupId());
      assertEquals(0L, calEventImpl0.getOriginalCompanyId());
      assertFalse(calEventImpl0.getOriginalRepeating());
      assertEquals(0, calEventImpl0.getOriginalRemindBy());
      assertFalse(calEventImpl0.getTimeZoneSensitive());
      assertEquals("", calEventImpl0.getLocation());
      assertEquals(0, calEventImpl0.getSecondReminder());
      assertEquals("", calEventImpl0.getDescription());
      assertEquals(0L, calEventImpl0.getEventId());
      assertEquals(0, calEventImpl0.getFirstReminder());
      assertEquals("", calEventImpl0.getUserName());
      assertEquals(0, calEventImpl0.getDurationMinute());
      assertEquals("", calEventImpl0.getRecurrence());
      
      calEventModelImpl0.equals(object0);
      assertEquals(0L, calEventModelImpl0.getUserId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalEventSoap[] calEventSoapArray0 = new CalEventSoap[0];
      List<CalEvent> list0 = CalEventModelImpl.toModels(calEventSoapArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setUuid("liferayTransactionManager");
      calEventModelImpl0.getUuid();
      assertEquals("liferayTransactionManager", calEventModelImpl0.getUuid());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setUserName("$ROodvx10G^K");
      String string0 = calEventModelImpl0.getUserName();
      assertEquals("$ROodvx10G^K", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      String string0 = calEventImpl0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setTitle("liferaySessionFactory");
      calEventImpl0.getTitle();
      assertEquals((-1L), calEventImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setTimeZoneSensitive(true);
      boolean boolean0 = calEventImpl0.getTimeZoneSensitive();
      assertTrue(calEventImpl0.isTimeZoneSensitive());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CalEventSoap calEventSoap0 = new CalEventSoap();
      CalEventImpl calEventImpl0 = (CalEventImpl)CalEventModelImpl.toModel(calEventSoap0);
      boolean boolean0 = calEventImpl0.getTimeZoneSensitive();
      assertEquals((-1L), calEventImpl0.getColumnBitmask());
      assertEquals("", calEventImpl0.getType());
      assertEquals("", calEventImpl0.getTitle());
      assertEquals(0L, calEventImpl0.getOriginalCompanyId());
      assertEquals(0L, calEventImpl0.getOriginalGroupId());
      assertEquals(0, calEventImpl0.getFirstReminder());
      assertFalse(boolean0);
      assertEquals("", calEventImpl0.getUserName());
      assertEquals("", calEventImpl0.getRecurrence());
      assertEquals("", calEventImpl0.getLocation());
      assertEquals(0, calEventImpl0.getOriginalRemindBy());
      assertEquals(0L, calEventImpl0.getUserId());
      assertEquals(0, calEventImpl0.getDurationHour());
      assertEquals(0L, calEventImpl0.getGroupId());
      assertEquals(0, calEventImpl0.getRemindBy());
      assertEquals(0, calEventImpl0.getSecondReminder());
      assertEquals("", calEventImpl0.getDescription());
      assertEquals(0L, calEventImpl0.getEventId());
      assertFalse(calEventImpl0.getOriginalRepeating());
      assertFalse(calEventImpl0.isRepeating());
      assertEquals(0L, calEventImpl0.getCompanyId());
      assertEquals("", calEventImpl0.getUuid());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      int int0 = calEventModelImpl0.getSecondReminder();
      assertEquals(0, int0);
      
      long long0 = calEventModelImpl0.getColumnBitmask();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setSecondReminder(25);
      int int0 = calEventImpl0.getSecondReminder();
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setSecondReminder((-791));
      int int0 = calEventImpl0.getSecondReminder();
      assertEquals((-791), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      boolean boolean0 = calEventModelImpl0.getRepeating();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setRemindBy(997);
      int int0 = calEventModelImpl0.getRemindBy();
      assertEquals(997, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setRecurrence("ehcache.statistics.enabled");
      String string0 = calEventModelImpl0.getRecurrence();
      assertEquals("ehcache.statistics.enabled", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      String string0 = calEventImpl0.getRecurrence();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setEventId(2600L);
      long long0 = calEventImpl0.getPrimaryKey();
      assertEquals(2600L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setGroupId(1287L);
      long long0 = calEventModelImpl0.getGroupId();
      assertEquals(2L, calEventModelImpl0.getColumnBitmask());
      assertEquals(1287L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setGroupId((-1723L));
      long long0 = calEventImpl0.getGroupId();
      assertEquals((-1723L), long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setFirstReminder(56320);
      int int0 = calEventModelImpl0.getFirstReminder();
      assertEquals(56320, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setEventId(1L);
      long long0 = calEventModelImpl0.getEventId();
      assertEquals(1L, calEventModelImpl0.getPrimaryKey());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setEventId((-1847L));
      long long0 = calEventImpl0.getEventId();
      assertEquals((-1847L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setDurationMinute(1578);
      int int0 = calEventModelImpl0.getDurationMinute();
      assertEquals(1578, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      int int0 = calEventModelImpl0.getDurationHour();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setDurationHour(2279);
      int int0 = calEventModelImpl0.getDurationHour();
      assertEquals(2279, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setDurationHour((-873));
      int int0 = calEventImpl0.getDurationHour();
      assertEquals((-873), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      WorkflowInstanceLink workflowInstanceLink0 = mock(WorkflowInstanceLink.class, new ViolatedAssumptionAnswer());
      doReturn(1L).when(workflowInstanceLink0).getClassNameId();
      doReturn((-1295L)).when(workflowInstanceLink0).getClassPK();
      doReturn(4L).when(workflowInstanceLink0).getCompanyId();
      doReturn((Date) null).when(workflowInstanceLink0).getCreateDate();
      doReturn(0L).when(workflowInstanceLink0).getGroupId();
      doReturn((Date) null).when(workflowInstanceLink0).getModifiedDate();
      doReturn((-581L)).when(workflowInstanceLink0).getUserId();
      doReturn("").when(workflowInstanceLink0).getUserName();
      doReturn(32L).when(workflowInstanceLink0).getWorkflowInstanceId();
      doReturn(32L).when(workflowInstanceLink0).getWorkflowInstanceLinkId();
      WorkflowInstanceLinkWrapper workflowInstanceLinkWrapper0 = new WorkflowInstanceLinkWrapper(workflowInstanceLink0);
      Map<String, Object> map0 = workflowInstanceLinkWrapper0.getModelAttributes();
      calEventModelImpl0.setModelAttributes(map0);
      long long0 = calEventModelImpl0.getCompanyId();
      assertEquals((-581L), calEventModelImpl0.getUserId());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setRemindBy(16);
      long long0 = calEventModelImpl0.getColumnBitmask();
      assertEquals(16, calEventModelImpl0.getRemindBy());
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      int int0 = calEventImpl0.compareTo((CalEvent) calEventImpl0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      // Undeclared exception!
      try { 
        calEventImpl0.setPrimaryKeyObj((Serializable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.calendar.model.impl.CalEventModelImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      // Undeclared exception!
      try { 
        calEventImpl0.setPrimaryKeyObj(" ORDER BY calEvent.startDate ASC, calEvent.title ASC");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("com.liferay.portlet.calendar.model.impl.CalEventModelImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("endDate", "endDate");
      CalEventImpl calEventImpl0 = new CalEventImpl();
      // Undeclared exception!
      try { 
        calEventImpl0.setModelAttributes(hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.util.Date
         //
         verifyException("com.liferay.portlet.calendar.model.impl.CalEventModelImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      Proxy proxy0 = (Proxy)calEventImpl0.toEscapedModel();
      // Undeclared exception!
      try { 
        calEventImpl0.compareTo((CalEvent) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.util.HtmlUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setEventId(658L);
      Date date0 = null;
      calEventModelImpl0.equals((Object) null);
      calEventModelImpl0.getLocation();
      long long0 = calEventModelImpl0.getUserId();
      assertEquals(658L, calEventModelImpl0.getPrimaryKey());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setLocation((String) null);
      calEventModelImpl0.getUserName();
      calEventModelImpl0.setRemindBy(997);
      calEventModelImpl0.getOriginalRepeating();
      calEventModelImpl0.setDescription("com.liferay.portlet.calendar.model.CalEvent");
      assertEquals(4L, calEventModelImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setRepeating(true);
      calEventModelImpl0.getCreateDate();
      boolean boolean0 = calEventModelImpl0.getRepeating();
      assertTrue(calEventModelImpl0.isRepeating());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.toString();
      CalEventImpl calEventImpl1 = (CalEventImpl)calEventImpl0.clone();
      CalEventSoap.toSoapModel(calEventImpl1);
      CalEventSoap calEventSoap0 = new CalEventSoap();
      assertNull(calEventSoap0.getTitle());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      WorkflowInstanceLink workflowInstanceLink0 = mock(WorkflowInstanceLink.class, new ViolatedAssumptionAnswer());
      WorkflowInstanceLinkWrapper workflowInstanceLinkWrapper0 = new WorkflowInstanceLinkWrapper(workflowInstanceLink0);
      Map<String, Object> map0 = calEventModelImpl0.getModelAttributes();
      calEventModelImpl0.setModelAttributes(map0);
      assertEquals((-1L), calEventModelImpl0.getColumnBitmask());
      
      CalEventModelImpl calEventModelImpl1 = new CalEventModelImpl();
      assertFalse(calEventModelImpl1.getRepeating());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CalEventSoap[] calEventSoapArray0 = new CalEventSoap[14];
      CalEventSoap calEventSoap0 = new CalEventSoap();
      CalEventModelImpl.toModel((CalEventSoap) null);
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      CalEventImpl calEventImpl0 = new CalEventImpl();
      assertFalse(calEventImpl0.isAllDay());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setDurationMinute((-151));
      calEventModelImpl0.getEndDate();
      calEventModelImpl0.clone();
      assertEquals((-151), calEventModelImpl0.getDurationMinute());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.getOriginalUuid();
      calEventModelImpl0.setTitle("");
      calEventModelImpl0.setDurationHour(11);
      calEventModelImpl0.getEndDate();
      CalEventSoap calEventSoap0 = new CalEventSoap();
      assertFalse(calEventSoap0.getTimeZoneSensitive());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.resetOriginalValues();
      calEventModelImpl0.hashCode();
      calEventModelImpl0.setUserId((-1485L));
      calEventModelImpl0.getOriginalRepeating();
      long long0 = calEventModelImpl0.getEventId();
      assertEquals((-1485L), calEventModelImpl0.getUserId());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ServiceContext serviceContext0 = new ServiceContext();
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setEventId((-538L));
      calEventImpl0.getPrimaryKey();
      int int0 = calEventImpl0.getOriginalRemindBy();
      assertEquals((-538L), calEventImpl0.getPrimaryKey());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setDescription("");
      calEventModelImpl0.getUserId();
      calEventModelImpl0.isRepeating();
      calEventModelImpl0.getRemindBy();
      calEventModelImpl0.setTitle("");
      assertEquals((-1L), calEventModelImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setRecurrence((String) null);
      boolean boolean0 = calEventModelImpl0.getOriginalRepeating();
      assertFalse(boolean0);
      assertEquals("", calEventModelImpl0.getRecurrence());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.getDurationMinute();
      calEventModelImpl0.setFirstReminder(18);
      calEventModelImpl0.setEndDate((Date) null);
      calEventModelImpl0.getEndDate();
      calEventModelImpl0.setTimeZoneSensitive(calEventModelImpl0.FINDER_CACHE_ENABLED);
      assertTrue(calEventModelImpl0.isTimeZoneSensitive());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      ServerDetector.getInstance();
      calEventModelImpl0.setDescription("9>5IN1zmx");
      // Undeclared exception!
      try { 
        calEventModelImpl0.getUserUuid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.util.PortalUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setUuid("");
      calEventModelImpl0.getUserId();
      calEventModelImpl0.setFirstReminder(1754);
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        calEventModelImpl0.setModelAttributes(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.calendar.model.impl.CalEventModelImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "value.object.column.bitmask.enabled.com.liferay.portlet.calendar.model.CalEvent");
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.getModelClass();
      calEventModelImpl0.toCacheModel();
      assertFalse(calEventModelImpl0.isAllDay());
      
      calEventModelImpl0.setAllDay(true);
      calEventModelImpl0.isAllDay();
      calEventModelImpl0.clone();
      assertFalse(calEventModelImpl0.getTimeZoneSensitive());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.isEscapedModel();
      calEventModelImpl0.getStartDate();
      calEventModelImpl0.setTimeZoneSensitive(false);
      long long0 = calEventModelImpl0.getPrimaryKey();
      assertEquals(0L, long0);
      
      boolean boolean0 = calEventModelImpl0.getAllDay();
      assertFalse(boolean0);
      assertFalse(calEventModelImpl0.isTimeZoneSensitive());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      Instant instant0 = MockInstant.ofEpochMilli(4L);
      ChronoField chronoField0 = ChronoField.EPOCH_DAY;
      TemporalUnit temporalUnit0 = chronoField0.getBaseUnit();
      Instant instant1 = MockInstant.truncatedTo(instant0, temporalUnit0);
      Date date0 = Date.from(instant1);
      calEventModelImpl0.setStartDate(date0);
      calEventModelImpl0.toCacheModel();
      assertEquals((-1L), calEventModelImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setLocation("org.apache.commons.logging.impl.NoOpLog");
      calEventImpl0.getOriginalGroupId();
      calEventImpl0.toCacheModel();
      assertEquals("org.apache.commons.logging.impl.NoOpLog", calEventImpl0.getLocation());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setDescription("portlet.xml");
      calEventImpl0.toCacheModel();
      assertEquals("portlet.xml", calEventImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setTitle("jy/a/If|3");
      calEventImpl0.toCacheModel();
      assertEquals((-1L), calEventImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-5981L), 32L);
      Date date0 = simpleTimePeriod0.getStart();
      calEventImpl0.setModifiedDate(date0);
      calEventImpl0.toCacheModel();
      assertEquals(0L, calEventImpl0.getCompanyId());
      assertFalse(calEventImpl0.getTimeZoneSensitive());
      assertEquals(0, calEventImpl0.getDurationMinute());
      assertEquals(0, calEventImpl0.getFirstReminder());
      assertEquals(0, calEventImpl0.getRemindBy());
      assertFalse(calEventImpl0.getRepeating());
      assertEquals(0L, calEventImpl0.getGroupId());
      assertEquals(0, calEventImpl0.getSecondReminder());
      assertEquals(0L, calEventImpl0.getUserId());
      assertEquals(0L, calEventImpl0.getEventId());
      assertEquals(0, calEventImpl0.getDurationHour());
      assertFalse(calEventImpl0.getAllDay());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      CalEventWrapper calEventWrapper0 = new CalEventWrapper(calEventImpl0);
      MockDate mockDate0 = new MockDate();
      calEventWrapper0.setCreateDate(mockDate0);
      calEventImpl0.toCacheModel();
      assertEquals(0, calEventImpl0.getFirstReminder());
      assertEquals(0, calEventImpl0.getRemindBy());
      assertFalse(calEventImpl0.getTimeZoneSensitive());
      assertEquals(0L, calEventImpl0.getEventId());
      assertEquals(0L, calEventImpl0.getUserId());
      assertEquals(0, calEventImpl0.getDurationHour());
      assertEquals(0L, calEventImpl0.getGroupId());
      assertEquals(0, calEventImpl0.getSecondReminder());
      assertEquals(0L, calEventImpl0.getCompanyId());
      assertFalse(calEventImpl0.getAllDay());
      assertFalse(calEventImpl0.getRepeating());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "value.object.column.bitmask.enabled.com.liferay.portlet.calendar.model.CalEvent");
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.isEscapedModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      calEventModelImpl0.setUserName(", title=");
      calEventModelImpl0.getCreateDate();
      calEventModelImpl0.getModelClass();
      calEventModelImpl0.toCacheModel();
      calEventModelImpl0.isAllDay();
      calEventModelImpl0.clone();
      assertEquals(", title=", calEventModelImpl0.getUserName());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setUuid("DTn");
      calEventImpl0.toCacheModel();
      assertEquals("DTn", calEventImpl0.getUuid());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.toEscapedModel();
      CalEvent calEvent0 = calEventImpl0.toEscapedModel();
      assertNotNull(calEvent0);
      
      long long0 = calEventImpl0.getOriginalCompanyId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CalEventSoap calEventSoap0 = new CalEventSoap();
      CalEventImpl calEventImpl0 = (CalEventImpl)CalEventModelImpl.toModel(calEventSoap0);
      calEventImpl0.setDescription("&E3oVk'9n7M}d/");
      calEventImpl0.clone();
      calEventImpl0.setRemindBy((-5146));
      calEventImpl0.getEventId();
      calEventImpl0.getOriginalType();
      assertEquals((-5146), calEventImpl0.getRemindBy());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CalEventSoap calEventSoap0 = new CalEventSoap();
      CalEvent calEvent0 = CalEventModelImpl.toModel(calEventSoap0);
      assertFalse(calEvent0.isRepeating());
      
      ((CalEventModelImpl) calEvent0).setRepeating(true);
      ((CalEventModelImpl) calEvent0).getCreateDate();
      assertEquals(0L, calEvent0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.toString();
      CalEventImpl calEventImpl1 = (CalEventImpl)calEventImpl0.clone();
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventImpl1.setType("com.caucho.vfs.StderrStream");
      assertEquals(16L, calEventImpl1.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.setCompanyId(16L);
      calEventModelImpl0.toEscapedModel();
      calEventModelImpl0.setCompanyId(816L);
      calEventModelImpl0.getUserName();
      calEventModelImpl0.getUuid();
      assertEquals(1L, calEventModelImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      MockDate mockDate0 = new MockDate();
      WorkflowInstanceLink workflowInstanceLink0 = mock(WorkflowInstanceLink.class, new ViolatedAssumptionAnswer());
      doReturn(2L).when(workflowInstanceLink0).getClassNameId();
      doReturn(8L).when(workflowInstanceLink0).getClassPK();
      doReturn(315L).when(workflowInstanceLink0).getCompanyId();
      doReturn(mockDate0).when(workflowInstanceLink0).getCreateDate();
      doReturn(0L).when(workflowInstanceLink0).getGroupId();
      doReturn(mockDate0).when(workflowInstanceLink0).getModifiedDate();
      doReturn(32L).when(workflowInstanceLink0).getUserId();
      doReturn("liferaySessionFactory").when(workflowInstanceLink0).getUserName();
      doReturn((-3515L)).when(workflowInstanceLink0).getWorkflowInstanceId();
      doReturn(2L).when(workflowInstanceLink0).getWorkflowInstanceLinkId();
      WorkflowInstanceLinkWrapper workflowInstanceLinkWrapper0 = new WorkflowInstanceLinkWrapper(workflowInstanceLink0);
      Map<String, Object> map0 = workflowInstanceLinkWrapper0.getModelAttributes();
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventModelImpl0.setModelAttributes(map0);
      assertEquals("liferaySessionFactory", calEventModelImpl0.getUserName());
      
      calEventImpl0.getOriginalCompanyId();
      String string0 = calEventImpl0.getOriginalType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      calEventImpl0.setModelAttributes(hashMap0);
      Vector<MetalLabelUI> vector0 = new Vector<MetalLabelUI>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      List<CalEvent> list0 = CalEventModelImpl.toModels((CalEventSoap[]) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ServerDetector.getInstance();
      calEventModelImpl0.setUserUuid("websphere");
      calEventModelImpl0.getUserName();
      System.setCurrentTimeMillis(4L);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.toXmlString();
      calEventImpl0.getModelClassName();
      assertEquals(0, calEventImpl0.getDurationMinute());
      assertEquals(0L, calEventImpl0.getCompanyId());
      assertFalse(calEventImpl0.getRepeating());
      assertFalse(calEventImpl0.getAllDay());
      assertEquals(0L, calEventImpl0.getEventId());
      assertEquals(0, calEventImpl0.getDurationHour());
      assertFalse(calEventImpl0.getTimeZoneSensitive());
      assertEquals(0L, calEventImpl0.getUserId());
      assertEquals(0L, calEventImpl0.getGroupId());
      assertEquals(0, calEventImpl0.getRemindBy());
      assertEquals(0, calEventImpl0.getSecondReminder());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.getStartDate();
      calEventImpl0.setTitle("");
      calEventImpl0.toString();
      calEventImpl0.getOriginalRemindBy();
      calEventImpl0.toXmlString();
      assertEquals((-1L), calEventImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CalEventImpl calEventImpl0 = new CalEventImpl();
      calEventImpl0.setLocation("!Ydaxjj8VD5j6al?hSD");
      Serializable serializable0 = calEventImpl0.getPrimaryKeyObj();
      calEventImpl0.setPrimaryKeyObj(serializable0);
      assertEquals("!Ydaxjj8VD5j6al?hSD", calEventImpl0.getLocation());
      
      CalEventSoap[] calEventSoapArray0 = new CalEventSoap[2];
      List<CalEvent> list0 = CalEventModelImpl.toModels(calEventSoapArray0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      CalEventModelImpl calEventModelImpl0 = new CalEventModelImpl();
      calEventModelImpl0.getOriginalRepeating();
      calEventModelImpl0.getGroupId();
      ServiceContext serviceContext0 = new ServiceContext();
      String string0 = "Class invariant violation";
      serviceContext0.setLayoutURL("Class invariant violation");
      // Undeclared exception!
      try { 
        calEventModelImpl0.setExpandoBridgeAttributes(serviceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil", e);
      }
  }
}
