/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 09:01:52 GMT 2020
 */

package com.liferay.portlet.documentlibrary.model.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.model.Repository;
import com.liferay.portal.model.RepositoryWrapper;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portlet.documentlibrary.model.DLFileEntry;
import com.liferay.portlet.documentlibrary.model.DLFileEntrySoap;
import com.liferay.portlet.documentlibrary.model.DLFileEntryWrapper;
import com.liferay.portlet.documentlibrary.model.impl.DLFileEntryImpl;
import com.liferay.portlet.documentlibrary.model.impl.DLFileEntryModelImpl;
import java.io.Serializable;
import java.lang.reflect.Proxy;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.date.SpreadsheetDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DLFileEntryModelImpl_ESTest extends DLFileEntryModelImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setUserUuid("0Kf\"3@%C>#sSEYj_Yy9");
      assertEquals(0L, dLFileEntryModelImpl0.getOriginalCompanyId());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setUserName("<column><column-name>title</column-name><column-value><![CDATA[");
      assertEquals("<column><column-name>title</column-name><column-value><![CDATA[", dLFileEntryModelImpl0.getUserName());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setDescription("");
      assertEquals("", dLFileEntryModelImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DLFileEntrySoap dLFileEntrySoap0 = new DLFileEntrySoap();
      DLFileEntry dLFileEntry0 = DLFileEntryModelImpl.toModel(dLFileEntrySoap0);
      ((DLFileEntryModelImpl) dLFileEntry0).setCompanyId((-1966L));
      assertEquals((-1966L), dLFileEntry0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ServiceContext serviceContext0 = new ServiceContext();
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      // Undeclared exception!
      try { 
        dLFileEntryImpl0.setExpandoBridgeAttributes(serviceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.documentlibrary.model.impl.DLFileEntryModelImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      boolean boolean0 = dLFileEntryModelImpl0.equals("&quot;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DLFileEntrySoap[] dLFileEntrySoapArray0 = new DLFileEntrySoap[0];
      List<DLFileEntry> list0 = DLFileEntryModelImpl.toModels(dLFileEntrySoapArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setVersionUserName("acceptMissingParams");
      String string0 = dLFileEntryModelImpl0.getVersionUserName();
      assertEquals("acceptMissingParams", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getVersionUserId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setVersion("liferaySessionFactory");
      dLFileEntryModelImpl0.getVersion();
      assertEquals("liferaySessionFactory", dLFileEntryModelImpl0.getVersion());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      String string0 = dLFileEntryImpl0.getVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getUserId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setUserId(64L);
      long long0 = dLFileEntryModelImpl0.getUserId();
      assertEquals(128L, dLFileEntryModelImpl0.getColumnBitmask());
      assertEquals(64L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setUserId((-2354L));
      long long0 = dLFileEntryImpl0.getUserId();
      assertEquals(128L, dLFileEntryImpl0.getColumnBitmask());
      assertEquals((-2354L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setTitle("userName");
      dLFileEntryImpl0.getTitle();
      assertEquals(64L, dLFileEntryImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getSmallImageId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getSize();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setSize(310L);
      long long0 = dLFileEntryImpl0.getSize();
      assertEquals(310L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      long long0 = dLFileEntryImpl0.getRepositoryId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      int int0 = dLFileEntryModelImpl0.getReadCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setReadCount(67);
      int int0 = dLFileEntryModelImpl0.getReadCount();
      assertEquals(67, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setReadCount((-2481));
      int int0 = dLFileEntryModelImpl0.getReadCount();
      assertEquals((-2481), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getPrimaryKey();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setPrimaryKey(1249L);
      long long0 = dLFileEntryModelImpl0.getPrimaryKey();
      assertEquals(1249L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setUuid("<column><column-name>uuid</column-name><column-value><![CDATA[");
      DLFileEntryImpl dLFileEntryImpl1 = (DLFileEntryImpl)dLFileEntryImpl0.clone();
      String string0 = dLFileEntryImpl1.getOriginalUuid();
      assertEquals("<column><column-name>uuid</column-name><column-value><![CDATA[", dLFileEntryImpl0.getUuid());
      assertEquals("<column><column-name>uuid</column-name><column-value><![CDATA[", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setTitle("liferaySessionFactory");
      dLFileEntryModelImpl0.resetOriginalValues();
      dLFileEntryModelImpl0.getOriginalTitle();
      assertEquals("liferaySessionFactory", dLFileEntryModelImpl0.getTitle());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setGroupId((-2080L));
      dLFileEntryModelImpl0.resetOriginalValues();
      long long0 = dLFileEntryModelImpl0.getOriginalGroupId();
      assertEquals((-2080L), dLFileEntryModelImpl0.getGroupId());
      assertEquals((-2080L), long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      String string0 = dLFileEntryImpl0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      Date date0 = dLFileEntryImpl0.getModifiedDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setMimeType("groupId");
      dLFileEntryModelImpl0.getMimeType();
      assertEquals(16L, dLFileEntryModelImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getMimeType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      boolean boolean0 = dLFileEntryModelImpl0.getManualCheckInRequired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getLargeImageId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      assertEquals(0L, dLFileEntryModelImpl0.getLargeImageId());
      
      dLFileEntryModelImpl0.setLargeImageId(64L);
      long long0 = dLFileEntryModelImpl0.getLargeImageId();
      assertEquals(64L, long0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getGroupId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setGroupId(24L);
      long long0 = dLFileEntryModelImpl0.getGroupId();
      assertEquals(24L, long0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setGroupId((-1775L));
      long long0 = dLFileEntryImpl0.getGroupId();
      assertEquals((-1775L), long0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      long long0 = dLFileEntryImpl0.getFolderId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getFileEntryTypeId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setFileEntryTypeId(579L);
      long long0 = dLFileEntryImpl0.getFileEntryTypeId();
      assertEquals(2L, dLFileEntryImpl0.getColumnBitmask());
      assertEquals(579L, long0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getFileEntryId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setPrimaryKey(1249L);
      long long0 = dLFileEntryModelImpl0.getFileEntryId();
      assertEquals(1249L, long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setExtraSettings(dLFileEntryModelImpl0.TABLE_SQL_CREATE);
      dLFileEntryModelImpl0.getExtraSettings();
      assertEquals("create table DLFileEntry (uuid_ VARCHAR(75) null,fileEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,versionUserId LONG,versionUserName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,repositoryId LONG,folderId LONG,name VARCHAR(255) null,extension VARCHAR(75) null,mimeType VARCHAR(75) null,title VARCHAR(255) null,description STRING null,extraSettings TEXT null,fileEntryTypeId LONG,version VARCHAR(75) null,size_ LONG,readCount INTEGER,smallImageId LONG,largeImageId LONG,custom1ImageId LONG,custom2ImageId LONG,manualCheckInRequired BOOLEAN)", dLFileEntryModelImpl0.getExtraSettings());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getExtraSettings();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setExtension("rZ");
      String string0 = dLFileEntryModelImpl0.getExtension();
      assertEquals("rZ", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getExtension();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DLFileEntrySoap dLFileEntrySoap0 = new DLFileEntrySoap();
      DLFileEntryImpl dLFileEntryImpl0 = (DLFileEntryImpl)DLFileEntryModelImpl.toModel(dLFileEntrySoap0);
      dLFileEntryImpl0.getExpandoBridge();
      assertEquals(0L, dLFileEntryImpl0.getRepositoryId());
      assertEquals("", dLFileEntryImpl0.getTitle());
      assertEquals(0L, dLFileEntryImpl0.getGroupId());
      assertEquals("", dLFileEntryImpl0.getDescription());
      assertEquals(0L, dLFileEntryImpl0.getFileEntryTypeId());
      assertEquals("", dLFileEntryImpl0.getUserName());
      assertEquals(0L, dLFileEntryImpl0.getOriginalFileEntryTypeId());
      assertEquals(0L, dLFileEntryImpl0.getSmallImageId());
      assertEquals(0L, dLFileEntryImpl0.getLargeImageId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalCompanyId());
      assertEquals(0L, dLFileEntryImpl0.getCustom2ImageId());
      assertEquals("", dLFileEntryImpl0.getVersionUserName());
      assertEquals(0L, dLFileEntryImpl0.getCustom1ImageId());
      assertEquals(0L, dLFileEntryImpl0.getUserId());
      assertEquals(0L, dLFileEntryImpl0.getSize());
      assertEquals(0L, dLFileEntryImpl0.getCompanyId());
      assertEquals(0L, dLFileEntryImpl0.getFolderId());
      assertEquals("", dLFileEntryImpl0.getExtension());
      assertEquals(0L, dLFileEntryImpl0.getOriginalGroupId());
      assertEquals("", dLFileEntryImpl0.getUuid());
      assertEquals("", dLFileEntryImpl0.getVersion());
      assertEquals(0L, dLFileEntryImpl0.getFileEntryId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalFolderId());
      assertEquals((-1L), dLFileEntryImpl0.getColumnBitmask());
      assertEquals("", dLFileEntryImpl0.getMimeType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getCustom2ImageId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setCustom2ImageId(562949953421312L);
      long long0 = dLFileEntryModelImpl0.getCustom2ImageId();
      assertEquals(562949953421312L, long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getCustom1ImageId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setCustom1ImageId(532L);
      long long0 = dLFileEntryModelImpl0.getCustom1ImageId();
      assertEquals(532L, long0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setCustom1ImageId((-768L));
      long long0 = dLFileEntryModelImpl0.getCustom1ImageId();
      assertEquals((-768L), long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      Date date0 = dLFileEntryModelImpl0.getCreateDate();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(12);
      Date date0 = spreadsheetDate0.toDate();
      Repository repository0 = mock(Repository.class, new ViolatedAssumptionAnswer());
      doReturn("").when(repository0).getTypeSettings();
      doReturn((-2653L)).when(repository0).getClassNameId();
      doReturn((-2693L)).when(repository0).getCompanyId();
      doReturn(date0).when(repository0).getCreateDate();
      doReturn("").when(repository0).getDescription();
      doReturn((long)0).when(repository0).getDlFolderId();
      doReturn((-5221L)).when(repository0).getGroupId();
      doReturn(date0).when(repository0).getModifiedDate();
      doReturn("FB: Setting backup appender to [").when(repository0).getName();
      doReturn("1p48Ko }bh>").when(repository0).getPortletId();
      doReturn((-661L)).when(repository0).getRepositoryId();
      doReturn((long)6).when(repository0).getUserId();
      doReturn("u[!N").when(repository0).getUserName();
      doReturn((String) null).when(repository0).getUuid();
      RepositoryWrapper repositoryWrapper0 = new RepositoryWrapper(repository0);
      Map<String, Object> map0 = repositoryWrapper0.getModelAttributes();
      dLFileEntryModelImpl0.setModelAttributes(map0);
      dLFileEntryModelImpl0.getCreateDate();
      assertEquals((-1L), dLFileEntryModelImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getCompanyId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setCompanyId((-3057L));
      long long0 = dLFileEntryImpl0.getCompanyId();
      assertEquals((-3057L), long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setMimeType(">F^)p#Oe.?*h5");
      long long0 = dLFileEntryModelImpl0.getColumnBitmask();
      assertEquals(">F^)p#Oe.?*h5", dLFileEntryModelImpl0.getMimeType());
      assertEquals(16L, long0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setFolderId(0L);
      long long0 = dLFileEntryModelImpl0.getColumnBitmask();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setFolderId(32L);
      DLFileEntrySoap dLFileEntrySoap0 = new DLFileEntrySoap();
      DLFileEntry dLFileEntry0 = DLFileEntryModelImpl.toModel(dLFileEntrySoap0);
      int int0 = dLFileEntryModelImpl0.compareTo(dLFileEntry0);
      assertEquals(32L, dLFileEntryModelImpl0.getFolderId());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      // Undeclared exception!
      try { 
        dLFileEntryImpl0.setPrimaryKeyObj((Serializable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.documentlibrary.model.impl.DLFileEntryModelImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      // Undeclared exception!
      try { 
        dLFileEntryImpl0.setPrimaryKeyObj("liferaySessionFactory");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.lang.Long
         //
         verifyException("com.liferay.portlet.documentlibrary.model.impl.DLFileEntryModelImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      // Undeclared exception!
      try { 
        dLFileEntryModelImpl0.setModelAttributes((Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.documentlibrary.model.impl.DLFileEntryModelImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      DLFileEntryWrapper dLFileEntryWrapper0 = new DLFileEntryWrapper((DLFileEntry) null);
      // Undeclared exception!
      try { 
        dLFileEntryModelImpl0.equals(dLFileEntryWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.documentlibrary.model.DLFileEntryWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      Proxy proxy0 = (Proxy)dLFileEntryImpl0.toEscapedModel();
      // Undeclared exception!
      try { 
        dLFileEntryImpl0.compareTo((DLFileEntry) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.util.HtmlUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setFileEntryTypeId((-1819L));
      assertEquals((-1819L), dLFileEntryModelImpl0.getFileEntryTypeId());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      DLFileEntrySoap dLFileEntrySoap0 = DLFileEntrySoap.toSoapModel(dLFileEntryImpl0);
      assertEquals(0L, dLFileEntrySoap0.getSmallImageId());
      assertEquals(0L, dLFileEntrySoap0.getCompanyId());
      assertEquals(0L, dLFileEntrySoap0.getCustom2ImageId());
      assertEquals(0L, dLFileEntrySoap0.getPrimaryKey());
      assertEquals(0L, dLFileEntrySoap0.getFolderId());
      assertEquals(0L, dLFileEntrySoap0.getCustom1ImageId());
      assertEquals(0L, dLFileEntrySoap0.getGroupId());
      assertEquals(0L, dLFileEntrySoap0.getUserId());
      assertFalse(dLFileEntrySoap0.isManualCheckInRequired());
      assertEquals(0L, dLFileEntrySoap0.getRepositoryId());
      assertEquals(0L, dLFileEntrySoap0.getSize());
      assertEquals(0L, dLFileEntrySoap0.getFileEntryTypeId());
      assertEquals(0L, dLFileEntrySoap0.getVersionUserId());
      assertEquals(0L, dLFileEntrySoap0.getLargeImageId());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      String string0 = dLFileEntryImpl0.getVersionUserName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getUserName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setUserId(1024L);
      dLFileEntryModelImpl0.setUserId(0L);
      assertEquals(128L, dLFileEntryModelImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getUuid();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DLFileEntry dLFileEntry0 = DLFileEntryModelImpl.toModel((DLFileEntrySoap) null);
      assertNull(dLFileEntry0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setRepositoryId((-2761L));
      assertEquals((-2761L), dLFileEntryModelImpl0.getRepositoryId());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setManualCheckInRequired(true);
      boolean boolean0 = dLFileEntryImpl0.isManualCheckInRequired();
      assertTrue(dLFileEntryImpl0.getManualCheckInRequired());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setVersionUserId(544L);
      assertEquals(544L, dLFileEntryModelImpl0.getVersionUserId());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setSmallImageId(16L);
      assertEquals(16L, dLFileEntryModelImpl0.getSmallImageId());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      // Undeclared exception!
      try { 
        dLFileEntryModelImpl0.getExpandoBridge();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setSize((-2374L));
      long long0 = dLFileEntryModelImpl0.getSize();
      assertEquals((-2374L), long0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setCreateDate((Date) null);
      assertEquals(64L, DLFileEntryModelImpl.TITLE_COLUMN_BITMASK);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setFileEntryId((-613L));
      long long0 = dLFileEntryModelImpl0.getFileEntryId();
      assertEquals((-613L), long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setVersion("liferaySessionFactory");
      dLFileEntryImpl0.toCacheModel();
      assertEquals("liferaySessionFactory", dLFileEntryImpl0.getVersion());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setExtraSettings("_H$W");
      dLFileEntryImpl0.toCacheModel();
      assertEquals(0L, dLFileEntryImpl0.getFileEntryTypeId());
      assertEquals(0L, dLFileEntryImpl0.getFolderId());
      assertEquals(0L, dLFileEntryImpl0.getCustom1ImageId());
      assertEquals(0L, dLFileEntryImpl0.getRepositoryId());
      assertEquals(0L, dLFileEntryImpl0.getLargeImageId());
      assertEquals(0L, dLFileEntryImpl0.getUserId());
      assertEquals(0L, dLFileEntryImpl0.getCustom2ImageId());
      assertEquals(0L, dLFileEntryImpl0.getFileEntryId());
      assertEquals(0, dLFileEntryImpl0.getReadCount());
      assertEquals(0L, dLFileEntryImpl0.getCompanyId());
      assertEquals(0L, dLFileEntryImpl0.getSmallImageId());
      assertEquals(0L, dLFileEntryImpl0.getVersionUserId());
      assertEquals(0L, dLFileEntryImpl0.getGroupId());
      assertEquals(0L, dLFileEntryImpl0.getSize());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setDescription("}du7");
      dLFileEntryImpl0.toCacheModel();
      assertEquals("}du7", dLFileEntryImpl0.getDescription());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setTitle("userName");
      dLFileEntryImpl0.toCacheModel();
      assertEquals(64L, dLFileEntryImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setExtension("fHn{&WdJnNL{NODXg3");
      dLFileEntryImpl0.toCacheModel();
      assertEquals("fHn{&WdJnNL{NODXg3", dLFileEntryImpl0.getExtension());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setName("n:90_>GXWG@fO[=K");
      dLFileEntryImpl0.toCacheModel();
      assertEquals((-1L), dLFileEntryImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      ServiceContext serviceContext0 = new ServiceContext();
      Date date0 = serviceContext0.getCreateDate((Date) null);
      dLFileEntryModelImpl0.setModifiedDate(date0);
      dLFileEntryModelImpl0.toCacheModel();
      assertEquals(0L, dLFileEntryModelImpl0.getFileEntryId());
      assertEquals(0, dLFileEntryModelImpl0.getReadCount());
      assertEquals(0L, dLFileEntryModelImpl0.getCompanyId());
      assertEquals(0L, dLFileEntryModelImpl0.getSmallImageId());
      assertEquals(0L, dLFileEntryModelImpl0.getGroupId());
      assertEquals(0L, dLFileEntryModelImpl0.getVersionUserId());
      assertEquals(0L, dLFileEntryModelImpl0.getSize());
      assertEquals(0L, dLFileEntryModelImpl0.getFileEntryTypeId());
      assertFalse(dLFileEntryModelImpl0.getManualCheckInRequired());
      assertEquals(0L, dLFileEntryModelImpl0.getCustom1ImageId());
      assertEquals(0L, dLFileEntryModelImpl0.getFolderId());
      assertEquals(0L, dLFileEntryModelImpl0.getUserId());
      assertEquals(0L, dLFileEntryModelImpl0.getRepositoryId());
      assertEquals(0L, dLFileEntryModelImpl0.getLargeImageId());
      assertEquals(0L, dLFileEntryModelImpl0.getCustom2ImageId());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setVersionUserName("{uuid=, fileEntryId=0, groupId=0, companyId=0, userId=0, userName=, versionUserId=0, versionUserName=, createDate=null, modifiedDate=null, repositoryId=0, folderId=0, name=, extension=, mimeType=, title=, description=, extraSettings=, fileEntryTypeId=0, version=, size=0, readCount=0, smallImageId=0, largeImageId=0, custom1ImageId=0, custom2ImageId=0, manualCheckInRequired=false}");
      dLFileEntryModelImpl0.toCacheModel();
      assertEquals("{uuid=, fileEntryId=0, groupId=0, companyId=0, userId=0, userName=, versionUserId=0, versionUserName=, createDate=null, modifiedDate=null, repositoryId=0, folderId=0, name=, extension=, mimeType=, title=, description=, extraSettings=, fileEntryTypeId=0, version=, size=0, readCount=0, smallImageId=0, largeImageId=0, custom1ImageId=0, custom2ImageId=0, manualCheckInRequired=false}", dLFileEntryModelImpl0.getVersionUserName());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setUserName("VyTEipF ");
      dLFileEntryImpl0.toCacheModel();
      assertEquals("VyTEipF ", dLFileEntryImpl0.getUserName());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setUuid("(gmYoFK>o|<");
      dLFileEntryModelImpl0.toCacheModel();
      assertEquals("(gmYoFK>o|<", dLFileEntryModelImpl0.getUuid());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      DLFileEntryImpl dLFileEntryImpl0 = (DLFileEntryImpl)dLFileEntryModelImpl0.clone();
      dLFileEntryImpl0.toCacheModel();
      assertEquals("", dLFileEntryImpl0.getUserName());
      assertEquals(0L, dLFileEntryImpl0.getRepositoryId());
      assertEquals(0L, dLFileEntryImpl0.getCustom1ImageId());
      assertEquals("", dLFileEntryImpl0.getTitle());
      assertEquals("", dLFileEntryImpl0.getName());
      assertEquals("", dLFileEntryImpl0.getExtension());
      assertEquals(0L, dLFileEntryImpl0.getOriginalCompanyId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalFolderId());
      assertFalse(dLFileEntryImpl0.getManualCheckInRequired());
      assertEquals("", dLFileEntryImpl0.getVersion());
      assertEquals("", dLFileEntryImpl0.getUuid());
      assertEquals(0L, dLFileEntryImpl0.getOriginalGroupId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalFileEntryTypeId());
      assertEquals(0L, dLFileEntryImpl0.getSize());
      assertEquals(0L, dLFileEntryImpl0.getSmallImageId());
      assertEquals(0L, dLFileEntryImpl0.getVersionUserId());
      assertEquals(0L, dLFileEntryImpl0.getLargeImageId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalUserId());
      assertEquals(0L, dLFileEntryImpl0.getFileEntryId());
      assertEquals("", dLFileEntryImpl0.getMimeType());
      assertEquals(0L, dLFileEntryImpl0.getCustom2ImageId());
      assertEquals("", dLFileEntryImpl0.getVersionUserName());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      DLFileEntryImpl dLFileEntryImpl1 = new DLFileEntryImpl();
      dLFileEntryImpl1.setPrimaryKey(1L);
      boolean boolean0 = dLFileEntryImpl0.equals(dLFileEntryImpl1);
      assertEquals(1L, dLFileEntryImpl1.getFileEntryId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      boolean boolean0 = dLFileEntryModelImpl0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      DLFileEntryImpl dLFileEntryImpl0 = (DLFileEntryImpl)dLFileEntryModelImpl0.clone();
      boolean boolean0 = dLFileEntryModelImpl0.equals(dLFileEntryImpl0);
      assertEquals("", dLFileEntryImpl0.getVersionUserName());
      assertEquals("", dLFileEntryImpl0.getDescription());
      assertEquals("", dLFileEntryImpl0.getUserName());
      assertEquals(0L, dLFileEntryImpl0.getCustom2ImageId());
      assertEquals(0L, dLFileEntryModelImpl0.getPrimaryKey());
      assertEquals("", dLFileEntryImpl0.getExtension());
      assertEquals("", dLFileEntryImpl0.getTitle());
      assertEquals(0L, dLFileEntryImpl0.getLargeImageId());
      assertEquals(0L, dLFileEntryImpl0.getCustom1ImageId());
      assertEquals(0L, dLFileEntryImpl0.getSmallImageId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalUserId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalFolderId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalFileEntryTypeId());
      assertEquals(0, dLFileEntryImpl0.getReadCount());
      assertTrue(boolean0);
      assertEquals(0L, dLFileEntryImpl0.getSize());
      assertEquals(0L, dLFileEntryImpl0.getOriginalGroupId());
      assertEquals(0L, dLFileEntryImpl0.getVersionUserId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalCompanyId());
      assertEquals("", dLFileEntryImpl0.getVersion());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      DLFileEntryImpl dLFileEntryImpl1 = new DLFileEntryImpl();
      dLFileEntryImpl1.setName(" ORDER BY dlFileEntry.folderId ASC, dlFileEntry.name ASC");
      int int0 = dLFileEntryImpl0.compareTo((DLFileEntry) dLFileEntryImpl1);
      assertEquals((-1L), dLFileEntryImpl1.getColumnBitmask());
      assertEquals((-56), int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setFolderId((-2653L));
      DLFileEntrySoap dLFileEntrySoap0 = new DLFileEntrySoap();
      DLFileEntry dLFileEntry0 = DLFileEntryModelImpl.toModel(dLFileEntrySoap0);
      int int0 = dLFileEntryModelImpl0.compareTo(dLFileEntry0);
      assertEquals((-2653L), dLFileEntryModelImpl0.getFolderId());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      DLFileEntryImpl dLFileEntryImpl0 = (DLFileEntryImpl)dLFileEntryModelImpl0.clone();
      int int0 = dLFileEntryModelImpl0.compareTo((DLFileEntry) dLFileEntryImpl0);
      assertEquals(0L, dLFileEntryImpl0.getCustom1ImageId());
      assertEquals(0L, dLFileEntryImpl0.getCustom2ImageId());
      assertEquals(0L, dLFileEntryImpl0.getSize());
      assertEquals(0L, dLFileEntryImpl0.getOriginalGroupId());
      assertEquals(0, int0);
      assertEquals("", dLFileEntryImpl0.getVersion());
      assertEquals(0L, dLFileEntryImpl0.getOriginalFolderId());
      assertEquals(0, dLFileEntryImpl0.getReadCount());
      assertEquals(0L, dLFileEntryImpl0.getOriginalCompanyId());
      assertEquals(0L, dLFileEntryImpl0.getRepositoryId());
      assertFalse(dLFileEntryImpl0.getManualCheckInRequired());
      assertEquals("", dLFileEntryImpl0.getMimeType());
      assertEquals(0L, dLFileEntryImpl0.getOriginalUserId());
      assertEquals(0L, dLFileEntryImpl0.getLargeImageId());
      assertEquals(0L, dLFileEntryImpl0.getVersionUserId());
      assertEquals("", dLFileEntryImpl0.getUuid());
      assertEquals(0L, dLFileEntryImpl0.getOriginalFileEntryTypeId());
      assertEquals(0L, dLFileEntryImpl0.getPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      Proxy proxy0 = (Proxy)dLFileEntryImpl0.toEscapedModel();
      Proxy proxy1 = (Proxy)dLFileEntryImpl0.toEscapedModel();
      assertSame(proxy1, proxy0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      DLFileEntryImpl dLFileEntryImpl1 = (DLFileEntryImpl)dLFileEntryImpl0.clone();
      dLFileEntryImpl1.setTitle(" ORDER BY DLFileEntry.folderId ASC, DLFileEntry.name ASC");
      assertEquals(64L, dLFileEntryImpl1.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      DLFileEntryImpl dLFileEntryImpl0 = (DLFileEntryImpl)dLFileEntryModelImpl0.clone();
      dLFileEntryImpl0.setMimeType("liferayTransactionManager");
      dLFileEntryImpl0.toCacheModel();
      assertEquals(16L, dLFileEntryImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      DLFileEntryImpl dLFileEntryImpl0 = (DLFileEntryImpl)dLFileEntryModelImpl0.clone();
      dLFileEntryImpl0.setName((String) null);
      assertEquals((-1L), dLFileEntryImpl0.getColumnBitmask());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DLFileEntrySoap dLFileEntrySoap0 = new DLFileEntrySoap();
      DLFileEntryImpl dLFileEntryImpl0 = (DLFileEntryImpl)DLFileEntryModelImpl.toModel(dLFileEntrySoap0);
      dLFileEntryImpl0.setFolderId(0L);
      assertEquals(0L, dLFileEntryImpl0.getLargeImageId());
      assertEquals(0L, dLFileEntryImpl0.getVersionUserId());
      assertEquals(0L, dLFileEntryImpl0.getSmallImageId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalUserId());
      assertEquals((-1L), dLFileEntryImpl0.getColumnBitmask());
      assertEquals(0L, dLFileEntryImpl0.getPrimaryKey());
      assertEquals(0L, dLFileEntryImpl0.getRepositoryId());
      assertEquals("", dLFileEntryImpl0.getMimeType());
      assertEquals("", dLFileEntryImpl0.getVersionUserName());
      assertEquals(0L, dLFileEntryImpl0.getCustom2ImageId());
      assertEquals("", dLFileEntryImpl0.getUserName());
      assertEquals(0L, dLFileEntryImpl0.getOriginalGroupId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalFolderId());
      assertEquals("", dLFileEntryImpl0.getExtension());
      assertEquals(0L, dLFileEntryImpl0.getCustom1ImageId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalCompanyId());
      assertEquals("", dLFileEntryImpl0.getVersion());
      assertFalse(dLFileEntryImpl0.getManualCheckInRequired());
      assertEquals(0L, dLFileEntryImpl0.getGroupId());
      assertEquals("", dLFileEntryImpl0.getTitle());
      assertEquals("", dLFileEntryImpl0.getUuid());
      assertEquals(0L, dLFileEntryImpl0.getFileEntryTypeId());
      assertEquals("", dLFileEntryImpl0.getDescription());
      assertEquals(0L, dLFileEntryImpl0.getOriginalFileEntryTypeId());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setUserId(1024L);
      Map<String, Object> map0 = dLFileEntryModelImpl0.getModelAttributes();
      dLFileEntryModelImpl0.setModelAttributes(map0);
      assertEquals(1024L, dLFileEntryModelImpl0.getUserId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DLFileEntrySoap dLFileEntrySoap0 = new DLFileEntrySoap();
      DLFileEntry dLFileEntry0 = DLFileEntryModelImpl.toModel(dLFileEntrySoap0);
      assertNotNull(dLFileEntry0);
      
      DLFileEntryWrapper dLFileEntryWrapper0 = new DLFileEntryWrapper(dLFileEntry0);
      dLFileEntryWrapper0.setGroupId(64L);
      assertEquals(64L, dLFileEntry0.getGroupId());
      assertEquals("", dLFileEntry0.getVersionUserName());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.setUuid("<column><column-name>uuid</column-name><column-value><![CDATA[");
      dLFileEntryImpl0.setUuid("mb");
      dLFileEntryImpl0.setUuid("com.liferay.portlet.documentlibrary.model.DLFileEntry");
      assertEquals("com.liferay.portlet.documentlibrary.model.DLFileEntry", dLFileEntryImpl0.getUuid());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>(4356);
      dLFileEntryModelImpl0.setModelAttributes(hashtable0);
      assertEquals(0L, dLFileEntryModelImpl0.getOriginalFileEntryTypeId());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      List<DLFileEntry> list0 = DLFileEntryModelImpl.toModels((DLFileEntrySoap[]) null);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      DLFileEntryImpl dLFileEntryImpl0 = (DLFileEntryImpl)dLFileEntryModelImpl0.clone();
      DLFileEntrySoap[] dLFileEntrySoapArray0 = new DLFileEntrySoap[6];
      DLFileEntrySoap dLFileEntrySoap0 = DLFileEntrySoap.toSoapModel(dLFileEntryImpl0);
      dLFileEntrySoapArray0[0] = dLFileEntrySoap0;
      List<DLFileEntry> list0 = DLFileEntryModelImpl.toModels(dLFileEntrySoapArray0);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getOriginalMimeType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      Serializable serializable0 = dLFileEntryModelImpl0.getPrimaryKeyObj();
      assertEquals(0L, serializable0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getOriginalTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getOriginalUuid();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getOriginalUserId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.toXmlString();
      assertEquals(0L, dLFileEntryModelImpl0.getFileEntryId());
      assertEquals(0L, dLFileEntryModelImpl0.getLargeImageId());
      assertEquals(0L, dLFileEntryModelImpl0.getCustom2ImageId());
      assertEquals(0L, dLFileEntryModelImpl0.getRepositoryId());
      assertEquals(0L, dLFileEntryModelImpl0.getSize());
      assertEquals(0L, dLFileEntryModelImpl0.getUserId());
      assertEquals(0L, dLFileEntryModelImpl0.getGroupId());
      assertEquals(0L, dLFileEntryModelImpl0.getFileEntryTypeId());
      assertFalse(dLFileEntryModelImpl0.getManualCheckInRequired());
      assertEquals(0L, dLFileEntryModelImpl0.getCustom1ImageId());
      assertEquals(0L, dLFileEntryModelImpl0.getFolderId());
      assertEquals(0L, dLFileEntryModelImpl0.getVersionUserId());
      assertEquals(0L, dLFileEntryModelImpl0.getSmallImageId());
      assertEquals(0L, dLFileEntryModelImpl0.getCompanyId());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      Class<?> class0 = dLFileEntryModelImpl0.getModelClass();
      assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      long long0 = dLFileEntryImpl0.getOriginalCompanyId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      String string0 = dLFileEntryImpl0.getModelClassName();
      assertEquals("com.liferay.portlet.documentlibrary.model.DLFileEntry", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setVersionUserUuid("z.");
      assertEquals("", dLFileEntryModelImpl0.getExtraSettings());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      // Undeclared exception!
      try { 
        dLFileEntryImpl0.getUserUuid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.util.PortalUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      long long0 = dLFileEntryImpl0.getOriginalFolderId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getOriginalGroupId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      dLFileEntryImpl0.hashCode();
      assertEquals(0L, dLFileEntryImpl0.getPrimaryKey());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      // Undeclared exception!
      try { 
        dLFileEntryImpl0.getVersionUserUuid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.util.PortalUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.getOriginalName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      long long0 = dLFileEntryModelImpl0.getColumnBitmask();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      dLFileEntryModelImpl0.setPrimaryKeyObj(dLFileEntryModelImpl0.USERID_COLUMN_BITMASK);
      assertEquals(128L, dLFileEntryModelImpl0.getFileEntryId());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      String string0 = dLFileEntryModelImpl0.toString();
      assertEquals("{uuid=, fileEntryId=0, groupId=0, companyId=0, userId=0, userName=, versionUserId=0, versionUserName=, createDate=null, modifiedDate=null, repositoryId=0, folderId=0, name=, extension=, mimeType=, title=, description=, extraSettings=, fileEntryTypeId=0, version=, size=0, readCount=0, smallImageId=0, largeImageId=0, custom1ImageId=0, custom2ImageId=0, manualCheckInRequired=false}", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DLFileEntryImpl dLFileEntryImpl0 = new DLFileEntryImpl();
      boolean boolean0 = dLFileEntryImpl0.isManualCheckInRequired();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      Map<String, Object> map0 = dLFileEntryModelImpl0.getModelAttributes();
      dLFileEntryModelImpl0.setModelAttributes(map0);
      dLFileEntryModelImpl0.setFileEntryTypeId(16L);
      assertEquals(16L, dLFileEntryModelImpl0.getFileEntryTypeId());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DLFileEntryModelImpl dLFileEntryModelImpl0 = new DLFileEntryModelImpl();
      DLFileEntryImpl dLFileEntryImpl0 = (DLFileEntryImpl)dLFileEntryModelImpl0.clone();
      long long0 = dLFileEntryImpl0.getOriginalFileEntryTypeId();
      assertEquals(0L, dLFileEntryImpl0.getOriginalFolderId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalCompanyId());
      assertEquals("", dLFileEntryImpl0.getExtension());
      assertEquals(0L, long0);
      assertEquals("", dLFileEntryImpl0.getUserName());
      assertEquals("", dLFileEntryImpl0.getMimeType());
      assertEquals("", dLFileEntryImpl0.getDescription());
      assertEquals(0L, dLFileEntryImpl0.getOriginalUserId());
      assertEquals(0L, dLFileEntryImpl0.getSize());
      assertEquals(0L, dLFileEntryImpl0.getVersionUserId());
      assertEquals(0L, dLFileEntryImpl0.getOriginalGroupId());
      assertFalse(dLFileEntryImpl0.isManualCheckInRequired());
      assertEquals(0L, dLFileEntryImpl0.getPrimaryKey());
      assertEquals(0L, dLFileEntryImpl0.getRepositoryId());
      assertEquals("", dLFileEntryImpl0.getUuid());
      assertEquals("", dLFileEntryImpl0.getTitle());
      assertEquals(0L, dLFileEntryImpl0.getCustom2ImageId());
      assertEquals(0L, dLFileEntryImpl0.getCustom1ImageId());
      assertEquals(0L, dLFileEntryImpl0.getLargeImageId());
  }
}
