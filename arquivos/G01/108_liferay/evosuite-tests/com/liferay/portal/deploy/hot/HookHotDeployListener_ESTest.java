/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 08:39:11 GMT 2020
 */

package com.liferay.portal.deploy.hot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.caucho.bytecode.JavaClass;
import com.caucho.java.gen.JavaClassGenerator;
import com.caucho.loader.DynamicClassLoader;
import com.caucho.loader.EnvironmentClassLoader;
import com.caucho.loader.SimpleLoader;
import com.caucho.loader.SystemClassLoader;
import com.caucho.vfs.DatastorePath;
import com.caucho.vfs.MergePath;
import com.caucho.vfs.Path;
import com.liferay.portal.deploy.hot.HookHotDeployListener;
import com.liferay.portal.kernel.deploy.hot.HotDeployEvent;
import com.liferay.portal.kernel.plugin.PluginPackage;
import com.liferay.portal.kernel.xml.Element;
import com.liferay.portal.model.impl.ColorSchemeImpl;
import com.liferay.portal.xml.ElementImpl;
import com.liferay.portal.xml.SAXReaderImpl;
import groovy.lang.GroovyClassLoader;
import groovy.lang.GroovyShell;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.TreeMap;
import javax.servlet.ServletContext;
import org.apache.jasper.runtime.JspContextWrapper;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultElement;
import org.dom4j.util.IndexedElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.hibernate.dialect.CUBRIDDialect;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.mock.web.MockPageContext;
import org.tuckey.web.MockServletContext;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HookHotDeployListener_ESTest extends HookHotDeployListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.destroyPortalProperties("Finished creating instance of bean '", (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      EnvironmentClassLoader environmentClassLoader0 = EnvironmentClassLoader.create((String) null);
      assertFalse(environmentClassLoader0.isJarCacheEnabled());
      assertNull(environmentClassLoader0.getId());
      assertEquals(2000L, environmentClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(environmentClassLoader0.isJarCacheEnabledDefault());
      assertNotNull(environmentClassLoader0);
      
      try { 
        hookHotDeployListener0.updateRelease((String) null, environmentClassLoader0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      BouncyCastleProvider bouncyCastleProvider0 = new BouncyCastleProvider();
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertNotNull(bouncyCastleProvider0);
      
      // Undeclared exception!
      try { 
        hookHotDeployListener0.resetPortalProperties("G,ql7lq?6'^?", bouncyCastleProvider0, false);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GroovyShell groovyShell0 = new GroovyShell();
      assertNotNull(groovyShell0);
      
      GroovyClassLoader groovyClassLoader0 = groovyShell0.getClassLoader();
      assertNotNull(groovyClassLoader0);
      
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.initStrutsAction((String) null, groovyClassLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.initStrutsAction(",\"Zg", (ClassLoader) null);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      JavaClassGenerator javaClassGenerator0 = new JavaClassGenerator();
      assertNotNull(javaClassGenerator0);
      
      ClassLoader classLoader0 = javaClassGenerator0.getPreloadLoader();
      assertNotNull(classLoader0);
      
      try { 
        hookHotDeployListener0.initServletFilters((ServletContext) null, "CertPathBuilder.RFC3280", classLoader0, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GroovyShell groovyShell0 = new GroovyShell();
      assertNotNull(groovyShell0);
      
      GroovyClassLoader groovyClassLoader0 = groovyShell0.getClassLoader();
      assertNotNull(groovyClassLoader0);
      
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.initServletFilter((String) null, groovyClassLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.initServletFilter("swX4L:=v", (ClassLoader) null);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      BouncyCastleProvider bouncyCastleProvider0 = new BouncyCastleProvider();
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals(899, bouncyCastleProvider0.size());
      assertNotNull(bouncyCastleProvider0);
      
      // Undeclared exception!
      try { 
        hookHotDeployListener0.initPortalProperties("]/CFKWH.", (ClassLoader) null, bouncyCastleProvider0, bouncyCastleProvider0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      ElementImpl elementImpl0 = new ElementImpl((org.dom4j.Element) null);
      assertNotNull(elementImpl0);
      
      try { 
        hookHotDeployListener0.initPortalProperties("Signature.SHA512WITHDSA", (ClassLoader) null, elementImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.xml.ElementImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      GroovyShell groovyShell0 = new GroovyShell();
      assertNotNull(groovyShell0);
      
      GroovyClassLoader groovyClassLoader0 = groovyShell0.getClassLoader();
      assertNotNull(groovyClassLoader0);
      
      try { 
        hookHotDeployListener0.initModelListeners("TF238*Xmj1gqyY", groovyClassLoader0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      JavaClassGenerator javaClassGenerator0 = new JavaClassGenerator();
      assertNotNull(javaClassGenerator0);
      
      ClassLoader classLoader0 = javaClassGenerator0.getPreloadLoader();
      assertNotNull(classLoader0);
      
      try { 
        hookHotDeployListener0.initModelListener("noService05", (String) null, classLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      assertEquals("", namespace0.getText());
      assertEquals("Namespace", namespace0.getNodeTypeName());
      assertEquals((short)13, namespace0.getNodeType());
      assertTrue(namespace0.isReadOnly());
      assertEquals("", namespace0.getURI());
      assertFalse(namespace0.supportsParent());
      assertEquals("", namespace0.getStringValue());
      assertEquals("", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      QName qName0 = new QName("NbdDK==KR>|X LESy_", namespace0);
      assertEquals("", namespace0.getText());
      assertEquals("Namespace", namespace0.getNodeTypeName());
      assertEquals((short)13, namespace0.getNodeType());
      assertTrue(namespace0.isReadOnly());
      assertEquals("", namespace0.getURI());
      assertFalse(namespace0.supportsParent());
      assertEquals("", namespace0.getStringValue());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", qName0.getNamespacePrefix());
      assertEquals("NbdDK==KR>|X LESy_", qName0.getName());
      assertEquals("", qName0.getNamespaceURI());
      assertNotNull(qName0);
      
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      assertEquals("", namespace0.getText());
      assertEquals("Namespace", namespace0.getNodeTypeName());
      assertEquals((short)13, namespace0.getNodeType());
      assertTrue(namespace0.isReadOnly());
      assertEquals("", namespace0.getURI());
      assertFalse(namespace0.supportsParent());
      assertEquals("", namespace0.getStringValue());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", qName0.getNamespacePrefix());
      assertEquals("NbdDK==KR>|X LESy_", qName0.getName());
      assertEquals("", qName0.getNamespaceURI());
      assertEquals(0, indexedElement0.attributeCount());
      assertFalse(indexedElement0.isReadOnly());
      assertEquals(0, indexedElement0.nodeCount());
      assertTrue(indexedElement0.supportsParent());
      assertEquals((short)1, indexedElement0.getNodeType());
      assertEquals("Element", indexedElement0.getNodeTypeName());
      assertNotNull(indexedElement0);
      
      ElementImpl elementImpl0 = new ElementImpl(indexedElement0);
      assertEquals("", namespace0.getText());
      assertEquals("Namespace", namespace0.getNodeTypeName());
      assertEquals((short)13, namespace0.getNodeType());
      assertTrue(namespace0.isReadOnly());
      assertEquals("", namespace0.getURI());
      assertFalse(namespace0.supportsParent());
      assertEquals("", namespace0.getStringValue());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", qName0.getNamespacePrefix());
      assertEquals("NbdDK==KR>|X LESy_", qName0.getName());
      assertEquals("", qName0.getNamespaceURI());
      assertEquals(0, indexedElement0.attributeCount());
      assertFalse(indexedElement0.isReadOnly());
      assertEquals(0, indexedElement0.nodeCount());
      assertTrue(indexedElement0.supportsParent());
      assertEquals((short)1, indexedElement0.getNodeType());
      assertEquals("Element", indexedElement0.getNodeTypeName());
      assertEquals("", elementImpl0.getTextTrim());
      assertFalse(elementImpl0.isReadOnly());
      assertTrue(elementImpl0.supportsParent());
      assertNotNull(elementImpl0);
      
      Element element0 = elementImpl0.elementByID("NbdDK==KR>|X LESy_");
      assertNotSame(elementImpl0, element0);
      assertNotSame(element0, elementImpl0);
      assertEquals("", namespace0.getText());
      assertEquals("Namespace", namespace0.getNodeTypeName());
      assertEquals((short)13, namespace0.getNodeType());
      assertTrue(namespace0.isReadOnly());
      assertEquals("", namespace0.getURI());
      assertFalse(namespace0.supportsParent());
      assertEquals("", namespace0.getStringValue());
      assertEquals("", namespace0.getPrefix());
      assertEquals("", qName0.getNamespacePrefix());
      assertEquals("NbdDK==KR>|X LESy_", qName0.getName());
      assertEquals("", qName0.getNamespaceURI());
      assertEquals(0, indexedElement0.attributeCount());
      assertFalse(indexedElement0.isReadOnly());
      assertEquals(0, indexedElement0.nodeCount());
      assertTrue(indexedElement0.supportsParent());
      assertEquals((short)1, indexedElement0.getNodeType());
      assertEquals("Element", indexedElement0.getNodeTypeName());
      assertEquals("", elementImpl0.getTextTrim());
      assertFalse(elementImpl0.isReadOnly());
      assertTrue(elementImpl0.supportsParent());
      assertNotNull(element0);
      
      try { 
        hookHotDeployListener0.initLanguageProperties("", (ClassLoader) null, element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.xml.ElementImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.initIndexerPostProcessors("Alg.Alias.MessageDigest.1.3.36.3.2.2", (ClassLoader) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      JavaClassGenerator javaClassGenerator0 = new JavaClassGenerator();
      assertNotNull(javaClassGenerator0);
      
      ClassLoader classLoader0 = javaClassGenerator0.getPreloadLoader();
      assertNotNull(classLoader0);
      
      try { 
        hookHotDeployListener0.initHotDeployListeners((String) null, classLoader0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GroovyShell groovyShell0 = new GroovyShell();
      assertNotNull(groovyShell0);
      
      GroovyClassLoader groovyClassLoader0 = groovyShell0.getClassLoader();
      assertNotNull(groovyClassLoader0);
      
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.initEvents("c|mA?Qf011~,y<iQ", groovyClassLoader0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      MergePath mergePath0 = new MergePath();
      assertEquals(0L, mergePath0.getDiskSpaceFree());
      assertEquals(':', mergePath0.getPathSeparatorChar());
      assertEquals(0, mergePath0.getOwner());
      assertEquals(0L, mergePath0.getDiskSpaceTotal());
      assertEquals(0L, mergePath0.getBlockCount());
      assertEquals(0L, mergePath0.getBlockSize());
      assertNull(mergePath0.readLink());
      assertEquals("/", mergePath0.getUserPath());
      assertFalse(mergePath0.isSymbolicLink());
      assertFalse(mergePath0.isFIFO());
      assertEquals(0, mergePath0.getNumberOfLinks());
      assertEquals(0, mergePath0.getUser());
      assertFalse(mergePath0.isSocket());
      assertEquals("/", mergePath0.getPath());
      assertEquals(0L, mergePath0.getInode());
      assertFalse(mergePath0.isWindows());
      assertEquals(0L, mergePath0.getDevice());
      assertEquals(0L, mergePath0.getLastStatusChangeTime());
      assertEquals('/', mergePath0.getFileSeparatorChar());
      assertFalse(mergePath0.isCharacterDevice());
      assertEquals(0, mergePath0.getGroup());
      assertEquals("application/octet-stream", mergePath0.getContentType());
      assertFalse(mergePath0.isHardLink());
      assertFalse(mergePath0.isLink());
      assertEquals(0L, mergePath0.getDeviceId());
      assertEquals("", mergePath0.getTail());
      assertFalse(mergePath0.isBlockDevice());
      assertNotNull(mergePath0);
      
      Path path0 = mergePath0.getBestPath();
      assertEquals(0L, mergePath0.getDiskSpaceFree());
      assertEquals(':', mergePath0.getPathSeparatorChar());
      assertEquals(0, mergePath0.getOwner());
      assertEquals(0L, mergePath0.getDiskSpaceTotal());
      assertEquals(0L, mergePath0.getBlockCount());
      assertEquals(0L, mergePath0.getBlockSize());
      assertNull(mergePath0.readLink());
      assertEquals("/", mergePath0.getUserPath());
      assertFalse(mergePath0.isSymbolicLink());
      assertFalse(mergePath0.isFIFO());
      assertEquals(0, mergePath0.getNumberOfLinks());
      assertEquals(0, mergePath0.getUser());
      assertFalse(mergePath0.isSocket());
      assertEquals("/", mergePath0.getPath());
      assertEquals(0L, mergePath0.getInode());
      assertFalse(mergePath0.isWindows());
      assertEquals(0L, mergePath0.getDevice());
      assertEquals(0L, mergePath0.getLastStatusChangeTime());
      assertEquals('/', mergePath0.getFileSeparatorChar());
      assertFalse(mergePath0.isCharacterDevice());
      assertEquals(0, mergePath0.getGroup());
      assertEquals("application/octet-stream", mergePath0.getContentType());
      assertFalse(mergePath0.isHardLink());
      assertFalse(mergePath0.isLink());
      assertEquals(0L, mergePath0.getDeviceId());
      assertEquals("", mergePath0.getTail());
      assertFalse(mergePath0.isBlockDevice());
      assertEquals(0, path0.getNumberOfLinks());
      assertEquals(0L, path0.getLastStatusChangeTime());
      assertFalse(path0.isCharacterDevice());
      assertFalse(path0.isBlockDevice());
      assertEquals(0, path0.getUser());
      assertEquals("application/octet-stream", path0.getContentType());
      assertEquals(0, path0.getGroup());
      assertEquals("", path0.getTail());
      assertEquals("/", path0.getURL());
      assertEquals('/', path0.getFileSeparatorChar());
      assertEquals(0, path0.getOwner());
      assertEquals(':', path0.getPathSeparatorChar());
      assertEquals(0L, path0.getDiskSpaceTotal());
      assertEquals("/", path0.getPath());
      assertNull(path0.readLink());
      assertEquals(0L, path0.getBlockCount());
      assertEquals(0L, path0.getBlockSize());
      assertFalse(path0.isSocket());
      assertFalse(path0.isHardLink());
      assertFalse(path0.isSymbolicLink());
      assertFalse(path0.isFIFO());
      assertEquals(0L, path0.getDevice());
      assertEquals(0L, path0.getInode());
      assertFalse(path0.isWindows());
      assertEquals(0L, path0.getDiskSpaceFree());
      assertEquals("error", path0.getScheme());
      assertEquals(0L, path0.getDeviceId());
      assertFalse(path0.isLink());
      assertNotNull(path0);
      
      DynamicClassLoader dynamicClassLoader0 = SimpleLoader.create(path0);
      assertEquals(0L, mergePath0.getDiskSpaceFree());
      assertEquals(':', mergePath0.getPathSeparatorChar());
      assertEquals(0, mergePath0.getOwner());
      assertEquals(0L, mergePath0.getDiskSpaceTotal());
      assertEquals(0L, mergePath0.getBlockCount());
      assertEquals(0L, mergePath0.getBlockSize());
      assertNull(mergePath0.readLink());
      assertEquals("/", mergePath0.getUserPath());
      assertFalse(mergePath0.isSymbolicLink());
      assertFalse(mergePath0.isFIFO());
      assertEquals(0, mergePath0.getNumberOfLinks());
      assertEquals(0, mergePath0.getUser());
      assertFalse(mergePath0.isSocket());
      assertEquals("/", mergePath0.getPath());
      assertEquals(0L, mergePath0.getInode());
      assertFalse(mergePath0.isWindows());
      assertEquals(0L, mergePath0.getDevice());
      assertEquals(0L, mergePath0.getLastStatusChangeTime());
      assertEquals('/', mergePath0.getFileSeparatorChar());
      assertFalse(mergePath0.isCharacterDevice());
      assertEquals(0, mergePath0.getGroup());
      assertEquals("application/octet-stream", mergePath0.getContentType());
      assertFalse(mergePath0.isHardLink());
      assertFalse(mergePath0.isLink());
      assertEquals(0L, mergePath0.getDeviceId());
      assertEquals("", mergePath0.getTail());
      assertFalse(mergePath0.isBlockDevice());
      assertEquals(0, path0.getNumberOfLinks());
      assertEquals(0L, path0.getLastStatusChangeTime());
      assertFalse(path0.isCharacterDevice());
      assertFalse(path0.isBlockDevice());
      assertEquals(0, path0.getUser());
      assertEquals("application/octet-stream", path0.getContentType());
      assertEquals(0, path0.getGroup());
      assertEquals("", path0.getTail());
      assertEquals("/", path0.getURL());
      assertEquals('/', path0.getFileSeparatorChar());
      assertEquals(0, path0.getOwner());
      assertEquals(':', path0.getPathSeparatorChar());
      assertEquals(0L, path0.getDiskSpaceTotal());
      assertEquals("/", path0.getPath());
      assertNull(path0.readLink());
      assertEquals(0L, path0.getBlockCount());
      assertEquals(0L, path0.getBlockSize());
      assertFalse(path0.isSocket());
      assertFalse(path0.isHardLink());
      assertFalse(path0.isSymbolicLink());
      assertFalse(path0.isFIFO());
      assertEquals(0L, path0.getDevice());
      assertEquals(0L, path0.getInode());
      assertFalse(path0.isWindows());
      assertEquals(0L, path0.getDiskSpaceFree());
      assertEquals("error", path0.getScheme());
      assertEquals(0L, path0.getDeviceId());
      assertFalse(path0.isLink());
      assertEquals(2000L, dynamicClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(dynamicClassLoader0.isJarCacheEnabled());
      assertFalse(dynamicClassLoader0.isJarCacheEnabledDefault());
      assertNull(dynamicClassLoader0.getId());
      assertNotNull(dynamicClassLoader0);
      
      SystemClassLoader systemClassLoader0 = new SystemClassLoader(dynamicClassLoader0);
      assertEquals(0L, mergePath0.getDiskSpaceFree());
      assertEquals(':', mergePath0.getPathSeparatorChar());
      assertEquals(0, mergePath0.getOwner());
      assertEquals(0L, mergePath0.getDiskSpaceTotal());
      assertEquals(0L, mergePath0.getBlockCount());
      assertEquals(0L, mergePath0.getBlockSize());
      assertNull(mergePath0.readLink());
      assertEquals("/", mergePath0.getUserPath());
      assertFalse(mergePath0.isSymbolicLink());
      assertFalse(mergePath0.isFIFO());
      assertEquals(0, mergePath0.getNumberOfLinks());
      assertEquals(0, mergePath0.getUser());
      assertFalse(mergePath0.isSocket());
      assertEquals("/", mergePath0.getPath());
      assertEquals(0L, mergePath0.getInode());
      assertFalse(mergePath0.isWindows());
      assertEquals(0L, mergePath0.getDevice());
      assertEquals(0L, mergePath0.getLastStatusChangeTime());
      assertEquals('/', mergePath0.getFileSeparatorChar());
      assertFalse(mergePath0.isCharacterDevice());
      assertEquals(0, mergePath0.getGroup());
      assertEquals("application/octet-stream", mergePath0.getContentType());
      assertFalse(mergePath0.isHardLink());
      assertFalse(mergePath0.isLink());
      assertEquals(0L, mergePath0.getDeviceId());
      assertEquals("", mergePath0.getTail());
      assertFalse(mergePath0.isBlockDevice());
      assertEquals(0, path0.getNumberOfLinks());
      assertEquals(0L, path0.getLastStatusChangeTime());
      assertFalse(path0.isCharacterDevice());
      assertFalse(path0.isBlockDevice());
      assertEquals(0, path0.getUser());
      assertEquals("application/octet-stream", path0.getContentType());
      assertEquals(0, path0.getGroup());
      assertEquals("", path0.getTail());
      assertEquals("/", path0.getURL());
      assertEquals('/', path0.getFileSeparatorChar());
      assertEquals(0, path0.getOwner());
      assertEquals(':', path0.getPathSeparatorChar());
      assertEquals(0L, path0.getDiskSpaceTotal());
      assertEquals("/", path0.getPath());
      assertNull(path0.readLink());
      assertEquals(0L, path0.getBlockCount());
      assertEquals(0L, path0.getBlockSize());
      assertFalse(path0.isSocket());
      assertFalse(path0.isHardLink());
      assertFalse(path0.isSymbolicLink());
      assertFalse(path0.isFIFO());
      assertEquals(0L, path0.getDevice());
      assertEquals(0L, path0.getInode());
      assertFalse(path0.isWindows());
      assertEquals(0L, path0.getDiskSpaceFree());
      assertEquals("error", path0.getScheme());
      assertEquals(0L, path0.getDeviceId());
      assertFalse(path0.isLink());
      assertEquals(2000L, dynamicClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(dynamicClassLoader0.isJarCacheEnabled());
      assertFalse(dynamicClassLoader0.isJarCacheEnabledDefault());
      assertNull(dynamicClassLoader0.getId());
      assertEquals(2000L, systemClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(systemClassLoader0.isJarCacheEnabledDefault());
      assertFalse(systemClassLoader0.isJarCacheEnabled());
      assertEquals("system", systemClassLoader0.getId());
      assertNotNull(systemClassLoader0);
      
      try { 
        hookHotDeployListener0.initEvent((String) null, "applicationEventMulticaster", systemClassLoader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaClassGenerator javaClassGenerator0 = new JavaClassGenerator();
      assertNotNull(javaClassGenerator0);
      
      ClassLoader classLoader0 = javaClassGenerator0.getParentLoader();
      assertNotNull(classLoader0);
      
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.initAutoLogins("[ ( O8", classLoader0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      assertNotNull(groovyClassLoader0);
      
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.initAutoDeployListeners("V1<(%?,5KLN1by+", groovyClassLoader0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.initAuthenticators("A{8Gq{m$~:;AO8=:|lO", (ClassLoader) null, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.initAuthPublicPaths("\nRelated cause: ", (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      GroovyShell groovyShell0 = new GroovyShell();
      assertNotNull(groovyShell0);
      
      GroovyClassLoader groovyClassLoader0 = groovyShell0.getClassLoader();
      assertNotNull(groovyClassLoader0);
      
      try { 
        hookHotDeployListener0.initAuthFailures("servlet.session.destroy.events", groovyClassLoader0, (Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      // Undeclared exception!
      try { 
        hookHotDeployListener0.getPortalJspBackupFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      // Undeclared exception!
      try { 
        hookHotDeployListener0.getPersistence((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      // Undeclared exception!
      try { 
        hookHotDeployListener0.getLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      // Undeclared exception!
      try { 
        hookHotDeployListener0.getCustomJsps((ServletContext) null, ",\"Zg", "5", (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.deploy.hot.HookHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.getAdvisedSupport((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.util.ProxyUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      BouncyCastleProvider bouncyCastleProvider0 = new BouncyCastleProvider();
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertNotNull(bouncyCastleProvider0);
      
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      assertNotNull(groovyClassLoader0);
      
      hookHotDeployListener0.updateRelease("CetPathValiator.RFC3280", groovyClassLoader0, bouncyCastleProvider0);
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      DefaultListableBeanFactory defaultListableBeanFactory0 = new DefaultListableBeanFactory();
      assertEquals(0, defaultListableBeanFactory0.getSingletonCount());
      assertEquals(0, defaultListableBeanFactory0.getBeanDefinitionCount());
      assertEquals(0, defaultListableBeanFactory0.getBeanPostProcessorCount());
      assertFalse(defaultListableBeanFactory0.isConfigurationFrozen());
      assertTrue(defaultListableBeanFactory0.isCacheBeanMetadata());
      assertNotNull(defaultListableBeanFactory0);
      
      ClassLoader classLoader0 = defaultListableBeanFactory0.getBeanClassLoader();
      assertEquals(0, defaultListableBeanFactory0.getSingletonCount());
      assertEquals(0, defaultListableBeanFactory0.getBeanDefinitionCount());
      assertEquals(0, defaultListableBeanFactory0.getBeanPostProcessorCount());
      assertFalse(defaultListableBeanFactory0.isConfigurationFrozen());
      assertTrue(defaultListableBeanFactory0.isCacheBeanMetadata());
      assertNotNull(classLoader0);
      
      SAXReaderImpl sAXReaderImpl0 = new SAXReaderImpl();
      assertNotNull(sAXReaderImpl0);
      
      Element element0 = sAXReaderImpl0.createElement("`\"]");
      assertFalse(element0.isReadOnly());
      assertTrue(element0.supportsParent());
      assertEquals("", element0.getTextTrim());
      assertNotNull(element0);
      
      hookHotDeployListener0.initStrutsActions("0", classLoader0, element0);
      assertEquals(0, defaultListableBeanFactory0.getSingletonCount());
      assertEquals(0, defaultListableBeanFactory0.getBeanDefinitionCount());
      assertEquals(0, defaultListableBeanFactory0.getBeanPostProcessorCount());
      assertFalse(defaultListableBeanFactory0.isConfigurationFrozen());
      assertTrue(defaultListableBeanFactory0.isCacheBeanMetadata());
      assertFalse(element0.isReadOnly());
      assertTrue(element0.supportsParent());
      assertEquals("", element0.getTextTrim());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      assertNotNull(groovyClassLoader0);
      
      EnvironmentClassLoader environmentClassLoader0 = EnvironmentClassLoader.create((ClassLoader) groovyClassLoader0, "Alg.Alias.SecretKeyFactory.PBE");
      assertEquals(2000L, environmentClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(environmentClassLoader0.isJarCacheEnabled());
      assertFalse(environmentClassLoader0.isJarCacheEnabledDefault());
      assertEquals("Alg.Alias.SecretKeyFactory.PBE", environmentClassLoader0.getId());
      assertNotNull(environmentClassLoader0);
      
      BaseElement baseElement0 = new BaseElement("KRn{iJ3AX");
      assertEquals("Element", baseElement0.getNodeTypeName());
      assertEquals((short)1, baseElement0.getNodeType());
      assertTrue(baseElement0.supportsParent());
      assertFalse(baseElement0.isReadOnly());
      assertNotNull(baseElement0);
      
      DOMNamespace dOMNamespace0 = new DOMNamespace(baseElement0, "X(->Pr?", "X(->Pr?");
      assertEquals("Element", baseElement0.getNodeTypeName());
      assertEquals((short)1, baseElement0.getNodeType());
      assertTrue(baseElement0.supportsParent());
      assertFalse(baseElement0.isReadOnly());
      assertEquals("X(->Pr?", dOMNamespace0.getURI());
      assertEquals("X(->Pr?", dOMNamespace0.getText());
      assertEquals((short)13, dOMNamespace0.getNodeType());
      assertEquals("Namespace", dOMNamespace0.getNodeTypeName());
      assertFalse(dOMNamespace0.isReadOnly());
      assertTrue(dOMNamespace0.supportsParent());
      assertEquals("X(->Pr?", dOMNamespace0.getStringValue());
      assertEquals("X(->Pr?", dOMNamespace0.getPrefix());
      assertNotNull(dOMNamespace0);
      
      QName qName0 = QName.get("KRn{iJ3AX", (Namespace) dOMNamespace0, "Alg.Alias.SecretKeyFactory.PBE");
      assertEquals("Element", baseElement0.getNodeTypeName());
      assertEquals((short)1, baseElement0.getNodeType());
      assertTrue(baseElement0.supportsParent());
      assertFalse(baseElement0.isReadOnly());
      assertEquals("X(->Pr?", dOMNamespace0.getURI());
      assertEquals("X(->Pr?", dOMNamespace0.getText());
      assertEquals((short)13, dOMNamespace0.getNodeType());
      assertEquals("Namespace", dOMNamespace0.getNodeTypeName());
      assertFalse(dOMNamespace0.isReadOnly());
      assertTrue(dOMNamespace0.supportsParent());
      assertEquals("X(->Pr?", dOMNamespace0.getStringValue());
      assertEquals("X(->Pr?", dOMNamespace0.getPrefix());
      assertEquals("X(->Pr?", qName0.getNamespacePrefix());
      assertEquals("X(->Pr?", qName0.getNamespaceURI());
      assertEquals("KRn{iJ3AX", qName0.getName());
      assertNotNull(qName0);
      
      IndexedElement indexedElement0 = new IndexedElement(qName0, (-540));
      assertEquals("Element", baseElement0.getNodeTypeName());
      assertEquals((short)1, baseElement0.getNodeType());
      assertTrue(baseElement0.supportsParent());
      assertFalse(baseElement0.isReadOnly());
      assertEquals("X(->Pr?", dOMNamespace0.getURI());
      assertEquals("X(->Pr?", dOMNamespace0.getText());
      assertEquals((short)13, dOMNamespace0.getNodeType());
      assertEquals("Namespace", dOMNamespace0.getNodeTypeName());
      assertFalse(dOMNamespace0.isReadOnly());
      assertTrue(dOMNamespace0.supportsParent());
      assertEquals("X(->Pr?", dOMNamespace0.getStringValue());
      assertEquals("X(->Pr?", dOMNamespace0.getPrefix());
      assertEquals("X(->Pr?", qName0.getNamespacePrefix());
      assertEquals("X(->Pr?", qName0.getNamespaceURI());
      assertEquals("KRn{iJ3AX", qName0.getName());
      assertEquals("Element", indexedElement0.getNodeTypeName());
      assertEquals((short)1, indexedElement0.getNodeType());
      assertTrue(indexedElement0.supportsParent());
      assertFalse(indexedElement0.isReadOnly());
      assertEquals(0, indexedElement0.nodeCount());
      assertEquals(0, indexedElement0.attributeCount());
      assertNotNull(indexedElement0);
      
      ElementImpl elementImpl0 = new ElementImpl(indexedElement0);
      assertEquals("Element", baseElement0.getNodeTypeName());
      assertEquals((short)1, baseElement0.getNodeType());
      assertTrue(baseElement0.supportsParent());
      assertFalse(baseElement0.isReadOnly());
      assertEquals("X(->Pr?", dOMNamespace0.getURI());
      assertEquals("X(->Pr?", dOMNamespace0.getText());
      assertEquals((short)13, dOMNamespace0.getNodeType());
      assertEquals("Namespace", dOMNamespace0.getNodeTypeName());
      assertFalse(dOMNamespace0.isReadOnly());
      assertTrue(dOMNamespace0.supportsParent());
      assertEquals("X(->Pr?", dOMNamespace0.getStringValue());
      assertEquals("X(->Pr?", dOMNamespace0.getPrefix());
      assertEquals("X(->Pr?", qName0.getNamespacePrefix());
      assertEquals("X(->Pr?", qName0.getNamespaceURI());
      assertEquals("KRn{iJ3AX", qName0.getName());
      assertEquals("Element", indexedElement0.getNodeTypeName());
      assertEquals((short)1, indexedElement0.getNodeType());
      assertTrue(indexedElement0.supportsParent());
      assertFalse(indexedElement0.isReadOnly());
      assertEquals(0, indexedElement0.nodeCount());
      assertEquals(0, indexedElement0.attributeCount());
      assertTrue(elementImpl0.supportsParent());
      assertFalse(elementImpl0.isReadOnly());
      assertEquals("", elementImpl0.getTextTrim());
      assertNotNull(elementImpl0);
      
      hookHotDeployListener0.initServletFilters((ServletContext) null, "Alg.Alias.SecretKeyFactory.PBE", environmentClassLoader0, elementImpl0);
      assertEquals(2000L, environmentClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(environmentClassLoader0.isJarCacheEnabled());
      assertFalse(environmentClassLoader0.isJarCacheEnabledDefault());
      assertEquals("Alg.Alias.SecretKeyFactory.PBE", environmentClassLoader0.getId());
      assertEquals("Element", baseElement0.getNodeTypeName());
      assertEquals((short)1, baseElement0.getNodeType());
      assertTrue(baseElement0.supportsParent());
      assertFalse(baseElement0.isReadOnly());
      assertEquals("X(->Pr?", dOMNamespace0.getURI());
      assertEquals("X(->Pr?", dOMNamespace0.getText());
      assertEquals((short)13, dOMNamespace0.getNodeType());
      assertEquals("Namespace", dOMNamespace0.getNodeTypeName());
      assertFalse(dOMNamespace0.isReadOnly());
      assertTrue(dOMNamespace0.supportsParent());
      assertEquals("X(->Pr?", dOMNamespace0.getStringValue());
      assertEquals("X(->Pr?", dOMNamespace0.getPrefix());
      assertEquals("X(->Pr?", qName0.getNamespacePrefix());
      assertEquals("X(->Pr?", qName0.getNamespaceURI());
      assertEquals("KRn{iJ3AX", qName0.getName());
      assertEquals("Element", indexedElement0.getNodeTypeName());
      assertEquals((short)1, indexedElement0.getNodeType());
      assertTrue(indexedElement0.supportsParent());
      assertFalse(indexedElement0.isReadOnly());
      assertEquals(0, indexedElement0.nodeCount());
      assertEquals(0, indexedElement0.attributeCount());
      assertTrue(elementImpl0.supportsParent());
      assertFalse(elementImpl0.isReadOnly());
      assertEquals("", elementImpl0.getTextTrim());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.getNamespacePrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getNamespaceURI());
      assertNotNull(qName0);
      
      DOMElement dOMElement0 = new DOMElement(qName0);
      assertEquals("", qName0.getNamespacePrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getNamespaceURI());
      assertFalse(dOMElement0.hasChildNodes());
      assertNull(dOMElement0.getNodeValue());
      assertTrue(dOMElement0.supportsParent());
      assertEquals("", dOMElement0.getNamespaceURI());
      assertEquals("Element", dOMElement0.getNodeTypeName());
      assertEquals("", dOMElement0.getPrefix());
      assertFalse(dOMElement0.isReadOnly());
      assertEquals((short)1, dOMElement0.getNodeType());
      assertEquals("", dOMElement0.getLocalName());
      assertEquals(0, dOMElement0.nodeCount());
      assertEquals(0, dOMElement0.attributeCount());
      assertNotNull(dOMElement0);
      
      ElementImpl elementImpl0 = new ElementImpl(dOMElement0);
      assertEquals("", qName0.getNamespacePrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getNamespaceURI());
      assertFalse(dOMElement0.hasChildNodes());
      assertNull(dOMElement0.getNodeValue());
      assertTrue(dOMElement0.supportsParent());
      assertEquals("", dOMElement0.getNamespaceURI());
      assertEquals("Element", dOMElement0.getNodeTypeName());
      assertEquals("", dOMElement0.getPrefix());
      assertFalse(dOMElement0.isReadOnly());
      assertEquals((short)1, dOMElement0.getNodeType());
      assertEquals("", dOMElement0.getLocalName());
      assertEquals(0, dOMElement0.nodeCount());
      assertEquals(0, dOMElement0.attributeCount());
      assertEquals("", elementImpl0.getTextTrim());
      assertTrue(elementImpl0.supportsParent());
      assertFalse(elementImpl0.isReadOnly());
      assertNotNull(elementImpl0);
      
      hookHotDeployListener0.initPortalProperties("Bv-4/-", (ClassLoader) null, elementImpl0);
      assertEquals("", qName0.getNamespacePrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getNamespaceURI());
      assertFalse(dOMElement0.hasChildNodes());
      assertNull(dOMElement0.getNodeValue());
      assertTrue(dOMElement0.supportsParent());
      assertEquals("", dOMElement0.getNamespaceURI());
      assertEquals("Element", dOMElement0.getNodeTypeName());
      assertEquals("", dOMElement0.getPrefix());
      assertFalse(dOMElement0.isReadOnly());
      assertEquals((short)1, dOMElement0.getNodeType());
      assertEquals("", dOMElement0.getLocalName());
      assertEquals(0, dOMElement0.nodeCount());
      assertEquals(0, dOMElement0.attributeCount());
      assertEquals("", elementImpl0.getTextTrim());
      assertTrue(elementImpl0.supportsParent());
      assertFalse(elementImpl0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      BouncyCastleProvider bouncyCastleProvider0 = new BouncyCastleProvider();
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertNotNull(bouncyCastleProvider0);
      
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      assertNotNull(groovyClassLoader0);
      
      hookHotDeployListener0.initModelListeners("public int __caucho_load(com.caucho.amber.manager.AmberConnection aConn,", groovyClassLoader0, bouncyCastleProvider0);
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertEquals("BC", bouncyCastleProvider0.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GroovyShell groovyShell0 = new GroovyShell();
      assertNotNull(groovyShell0);
      
      GroovyClassLoader groovyClassLoader0 = groovyShell0.getClassLoader();
      assertNotNull(groovyClassLoader0);
      
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getStringValue());
      assertEquals("Namespace", namespace0.getNodeTypeName());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getText());
      assertFalse(namespace0.supportsParent());
      assertEquals((short)13, namespace0.getNodeType());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertTrue(namespace0.isReadOnly());
      assertEquals("xml", namespace0.getPrefix());
      assertNotNull(namespace0);
      
      QName qName0 = new QName((String) null, namespace0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getStringValue());
      assertEquals("Namespace", namespace0.getNodeTypeName());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getText());
      assertFalse(namespace0.supportsParent());
      assertEquals((short)13, namespace0.getNodeType());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertTrue(namespace0.isReadOnly());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("xml", qName0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getNamespaceURI());
      assertNotNull(qName0);
      
      DefaultElement defaultElement0 = new DefaultElement(qName0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getStringValue());
      assertEquals("Namespace", namespace0.getNodeTypeName());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getText());
      assertFalse(namespace0.supportsParent());
      assertEquals((short)13, namespace0.getNodeType());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertTrue(namespace0.isReadOnly());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("xml", qName0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getNamespaceURI());
      assertEquals((short)1, defaultElement0.getNodeType());
      assertFalse(defaultElement0.isReadOnly());
      assertEquals(0, defaultElement0.nodeCount());
      assertEquals(0, defaultElement0.attributeCount());
      assertEquals("Element", defaultElement0.getNodeTypeName());
      assertTrue(defaultElement0.supportsParent());
      assertNotNull(defaultElement0);
      
      ElementImpl elementImpl0 = new ElementImpl(defaultElement0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getStringValue());
      assertEquals("Namespace", namespace0.getNodeTypeName());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getText());
      assertFalse(namespace0.supportsParent());
      assertEquals((short)13, namespace0.getNodeType());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertTrue(namespace0.isReadOnly());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("xml", qName0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getNamespaceURI());
      assertEquals((short)1, defaultElement0.getNodeType());
      assertFalse(defaultElement0.isReadOnly());
      assertEquals(0, defaultElement0.nodeCount());
      assertEquals(0, defaultElement0.attributeCount());
      assertEquals("Element", defaultElement0.getNodeTypeName());
      assertTrue(defaultElement0.supportsParent());
      assertFalse(elementImpl0.isReadOnly());
      assertEquals("", elementImpl0.getTextTrim());
      assertTrue(elementImpl0.supportsParent());
      assertNotNull(elementImpl0);
      
      hookHotDeployListener0.initLanguageProperties((String) null, groovyClassLoader0, elementImpl0);
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getStringValue());
      assertEquals("Namespace", namespace0.getNodeTypeName());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getText());
      assertFalse(namespace0.supportsParent());
      assertEquals((short)13, namespace0.getNodeType());
      assertEquals("http://www.w3.org/XML/1998/namespace", namespace0.getURI());
      assertTrue(namespace0.isReadOnly());
      assertEquals("xml", namespace0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("xml", qName0.getNamespacePrefix());
      assertEquals("http://www.w3.org/XML/1998/namespace", qName0.getNamespaceURI());
      assertEquals((short)1, defaultElement0.getNodeType());
      assertFalse(defaultElement0.isReadOnly());
      assertEquals(0, defaultElement0.nodeCount());
      assertEquals(0, defaultElement0.attributeCount());
      assertEquals("Element", defaultElement0.getNodeTypeName());
      assertTrue(defaultElement0.supportsParent());
      assertFalse(elementImpl0.isReadOnly());
      assertEquals("", elementImpl0.getTextTrim());
      assertTrue(elementImpl0.supportsParent());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      DOMElement dOMElement0 = new DOMElement("users.image.max.width");
      assertEquals(0, dOMElement0.attributeCount());
      assertEquals("Element", dOMElement0.getNodeTypeName());
      assertFalse(dOMElement0.hasChildNodes());
      assertTrue(dOMElement0.supportsParent());
      assertEquals("", dOMElement0.getPrefix());
      assertNull(dOMElement0.getNodeValue());
      assertEquals((short)1, dOMElement0.getNodeType());
      assertEquals("", dOMElement0.getNamespaceURI());
      assertFalse(dOMElement0.isReadOnly());
      assertEquals("users.image.max.width", dOMElement0.getLocalName());
      assertEquals(0, dOMElement0.nodeCount());
      assertNotNull(dOMElement0);
      
      ElementImpl elementImpl0 = new ElementImpl(dOMElement0);
      assertEquals(0, dOMElement0.attributeCount());
      assertEquals("Element", dOMElement0.getNodeTypeName());
      assertFalse(dOMElement0.hasChildNodes());
      assertTrue(dOMElement0.supportsParent());
      assertEquals("", dOMElement0.getPrefix());
      assertNull(dOMElement0.getNodeValue());
      assertEquals((short)1, dOMElement0.getNodeType());
      assertEquals("", dOMElement0.getNamespaceURI());
      assertFalse(dOMElement0.isReadOnly());
      assertEquals("users.image.max.width", dOMElement0.getLocalName());
      assertEquals(0, dOMElement0.nodeCount());
      assertTrue(elementImpl0.supportsParent());
      assertFalse(elementImpl0.isReadOnly());
      assertEquals("", elementImpl0.getTextTrim());
      assertNotNull(elementImpl0);
      
      CompilerConfiguration compilerConfiguration0 = new CompilerConfiguration();
      assertNotNull(compilerConfiguration0);
      
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader((ClassLoader) null, compilerConfiguration0);
      assertNotNull(groovyClassLoader0);
      
      hookHotDeployListener0.initIndexerPostProcessors("2:r/e*[Tr{lxu4%0tV9", groovyClassLoader0, elementImpl0);
      assertEquals(0, dOMElement0.attributeCount());
      assertEquals("Element", dOMElement0.getNodeTypeName());
      assertFalse(dOMElement0.hasChildNodes());
      assertTrue(dOMElement0.supportsParent());
      assertEquals("", dOMElement0.getPrefix());
      assertNull(dOMElement0.getNodeValue());
      assertEquals((short)1, dOMElement0.getNodeType());
      assertEquals("", dOMElement0.getNamespaceURI());
      assertFalse(dOMElement0.isReadOnly());
      assertEquals("users.image.max.width", dOMElement0.getLocalName());
      assertEquals(0, dOMElement0.nodeCount());
      assertTrue(elementImpl0.supportsParent());
      assertFalse(elementImpl0.isReadOnly());
      assertEquals("", elementImpl0.getTextTrim());
      
      hookHotDeployListener0.initIndexerPostProcessors("2:r/e*[Tr{lxu4%0tV9", (ClassLoader) null, elementImpl0);
      assertEquals(0, dOMElement0.attributeCount());
      assertEquals("Element", dOMElement0.getNodeTypeName());
      assertFalse(dOMElement0.hasChildNodes());
      assertTrue(dOMElement0.supportsParent());
      assertEquals("", dOMElement0.getPrefix());
      assertNull(dOMElement0.getNodeValue());
      assertEquals((short)1, dOMElement0.getNodeType());
      assertEquals("", dOMElement0.getNamespaceURI());
      assertFalse(dOMElement0.isReadOnly());
      assertEquals("users.image.max.width", dOMElement0.getLocalName());
      assertEquals(0, dOMElement0.nodeCount());
      assertTrue(elementImpl0.supportsParent());
      assertFalse(elementImpl0.isReadOnly());
      assertEquals("", elementImpl0.getTextTrim());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      BouncyCastleProvider bouncyCastleProvider0 = new BouncyCastleProvider();
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(899, bouncyCastleProvider0.size());
      assertNotNull(bouncyCastleProvider0);
      
      JavaClassGenerator javaClassGenerator0 = new JavaClassGenerator();
      assertNotNull(javaClassGenerator0);
      
      ClassLoader classLoader0 = javaClassGenerator0.getPreloadLoader();
      assertNotNull(classLoader0);
      
      hookHotDeployListener0.initHotDeployListeners((String) null, classLoader0, bouncyCastleProvider0);
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(899, bouncyCastleProvider0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      BouncyCastleProvider bouncyCastleProvider0 = new BouncyCastleProvider();
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertNotNull(bouncyCastleProvider0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      hookHotDeployListener0.initEvents((String) null, classLoader0, bouncyCastleProvider0);
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      Object object0 = hookHotDeployListener0.initEvent("messageSource", "messageSource", (ClassLoader) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      assertNotNull(groovyClassLoader0);
      
      EnvironmentClassLoader environmentClassLoader0 = EnvironmentClassLoader.create((ClassLoader) groovyClassLoader0);
      assertEquals(2000L, environmentClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(environmentClassLoader0.isJarCacheEnabled());
      assertNull(environmentClassLoader0.getId());
      assertFalse(environmentClassLoader0.isJarCacheEnabledDefault());
      assertNotNull(environmentClassLoader0);
      
      DOMDocument dOMDocument0 = new DOMDocument();
      assertEquals((short)9, dOMDocument0.getNodeType());
      assertNull(dOMDocument0.getNodeValue());
      assertEquals("Document", dOMDocument0.getNodeTypeName());
      assertFalse(dOMDocument0.isReadOnly());
      assertNull(dOMDocument0.getXMLEncoding());
      assertFalse(dOMDocument0.supportsParent());
      assertEquals("#document", dOMDocument0.getNodeName());
      assertNull(dOMDocument0.getName());
      assertNotNull(dOMDocument0);
      
      DOMElement dOMElement0 = (DOMElement)dOMDocument0.addElement("%*[gaI$/+{8<lC[e+SB");
      assertEquals((short)9, dOMDocument0.getNodeType());
      assertNull(dOMDocument0.getNodeValue());
      assertEquals("Document", dOMDocument0.getNodeTypeName());
      assertFalse(dOMDocument0.isReadOnly());
      assertNull(dOMDocument0.getXMLEncoding());
      assertFalse(dOMDocument0.supportsParent());
      assertEquals("#document", dOMDocument0.getNodeName());
      assertNull(dOMDocument0.getName());
      assertEquals(0, dOMElement0.nodeCount());
      assertEquals(0, dOMElement0.attributeCount());
      assertEquals("Element", dOMElement0.getNodeTypeName());
      assertFalse(dOMElement0.hasChildNodes());
      assertEquals("", dOMElement0.getPrefix());
      assertNull(dOMElement0.getNodeValue());
      assertTrue(dOMElement0.supportsParent());
      assertEquals((short)1, dOMElement0.getNodeType());
      assertEquals("", dOMElement0.getNamespaceURI());
      assertEquals("%*[gaI$/+{8<lC[e+SB", dOMElement0.getLocalName());
      assertFalse(dOMElement0.isReadOnly());
      assertNotNull(dOMElement0);
      
      ElementImpl elementImpl0 = new ElementImpl(dOMElement0);
      assertEquals((short)9, dOMDocument0.getNodeType());
      assertNull(dOMDocument0.getNodeValue());
      assertEquals("Document", dOMDocument0.getNodeTypeName());
      assertFalse(dOMDocument0.isReadOnly());
      assertNull(dOMDocument0.getXMLEncoding());
      assertFalse(dOMDocument0.supportsParent());
      assertEquals("#document", dOMDocument0.getNodeName());
      assertNull(dOMDocument0.getName());
      assertEquals(0, dOMElement0.nodeCount());
      assertEquals(0, dOMElement0.attributeCount());
      assertEquals("Element", dOMElement0.getNodeTypeName());
      assertFalse(dOMElement0.hasChildNodes());
      assertEquals("", dOMElement0.getPrefix());
      assertNull(dOMElement0.getNodeValue());
      assertTrue(dOMElement0.supportsParent());
      assertEquals((short)1, dOMElement0.getNodeType());
      assertEquals("", dOMElement0.getNamespaceURI());
      assertEquals("%*[gaI$/+{8<lC[e+SB", dOMElement0.getLocalName());
      assertFalse(dOMElement0.isReadOnly());
      assertTrue(elementImpl0.supportsParent());
      assertEquals("", elementImpl0.getTextTrim());
      assertFalse(elementImpl0.isReadOnly());
      assertNotNull(elementImpl0);
      
      hookHotDeployListener0.initCustomJspDir((ServletContext) null, "%*[gaI$/+{8<lC[e+SB", environmentClassLoader0, (PluginPackage) null, elementImpl0);
      assertEquals(2000L, environmentClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(environmentClassLoader0.isJarCacheEnabled());
      assertNull(environmentClassLoader0.getId());
      assertFalse(environmentClassLoader0.isJarCacheEnabledDefault());
      assertEquals((short)9, dOMDocument0.getNodeType());
      assertNull(dOMDocument0.getNodeValue());
      assertEquals("Document", dOMDocument0.getNodeTypeName());
      assertFalse(dOMDocument0.isReadOnly());
      assertNull(dOMDocument0.getXMLEncoding());
      assertFalse(dOMDocument0.supportsParent());
      assertEquals("#document", dOMDocument0.getNodeName());
      assertNull(dOMDocument0.getName());
      assertEquals(0, dOMElement0.nodeCount());
      assertEquals(0, dOMElement0.attributeCount());
      assertEquals("Element", dOMElement0.getNodeTypeName());
      assertFalse(dOMElement0.hasChildNodes());
      assertEquals("", dOMElement0.getPrefix());
      assertNull(dOMElement0.getNodeValue());
      assertTrue(dOMElement0.supportsParent());
      assertEquals((short)1, dOMElement0.getNodeType());
      assertEquals("", dOMElement0.getNamespaceURI());
      assertEquals("%*[gaI$/+{8<lC[e+SB", dOMElement0.getLocalName());
      assertFalse(dOMElement0.isReadOnly());
      assertTrue(elementImpl0.supportsParent());
      assertEquals("", elementImpl0.getTextTrim());
      assertFalse(elementImpl0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      CUBRIDDialect cUBRIDDialect0 = new CUBRIDDialect();
      assertFalse(cUBRIDDialect0.isLockTimeoutParameterized());
      assertFalse(cUBRIDDialect0.supportsPooledSequences());
      assertTrue(cUBRIDDialect0.supportsExistsInSelect());
      assertFalse(cUBRIDDialect0.supportsIfExistsAfterTableName());
      assertEquals(" drop constraint ", cUBRIDDialect0.getDropForeignKeyString());
      assertFalse(cUBRIDDialect0.supportsIfExistsBeforeTableName());
      assertTrue(cUBRIDDialect0.supportsSequences());
      assertFalse(cUBRIDDialect0.supportsIdentityColumns());
      assertFalse(cUBRIDDialect0.doesRepeatableReadCauseReadersToBlockWriters());
      assertFalse(cUBRIDDialect0.isCurrentTimestampSelectStringCallable());
      assertEquals(" ", cUBRIDDialect0.getForUpdateString());
      assertTrue(cUBRIDDialect0.supportsUnionAll());
      assertTrue(cUBRIDDialect0.supportsColumnCheck());
      assertTrue(cUBRIDDialect0.supportsLockTimeouts());
      assertTrue(cUBRIDDialect0.supportsLobValueChangePropogation());
      assertFalse(cUBRIDDialect0.hasSelfReferentialForeignKeyBug());
      assertFalse(cUBRIDDialect0.bindLimitParametersFirst());
      assertTrue(cUBRIDDialect0.supportsParametersInInsertSelect());
      assertFalse(cUBRIDDialect0.replaceResultVariableInOrderByClauseWithPosition());
      assertEquals(10, cUBRIDDialect0.getMaxAliasLength());
      assertEquals("", cUBRIDDialect0.getCreateTemporaryTablePostfix());
      assertTrue(cUBRIDDialect0.supportsSubqueryOnMutatingTable());
      assertEquals("lower", cUBRIDDialect0.getLowercaseFunction());
      assertTrue(cUBRIDDialect0.dropTemporaryTableAfterUse());
      assertEquals("add", cUBRIDDialect0.getAddColumnString());
      assertEquals("select name from db_serial", cUBRIDDialect0.getQuerySequencesString());
      assertFalse(cUBRIDDialect0.requiresCastingOfParametersInSelectClause());
      assertTrue(cUBRIDDialect0.supportsUnboundedLobLocatorMaterialization());
      assertTrue(cUBRIDDialect0.forUpdateOfColumns());
      assertEquals("create table", cUBRIDDialect0.getCreateTemporaryTableString());
      assertTrue(cUBRIDDialect0.supportsExpectedLobUsagePattern());
      assertTrue(cUBRIDDialect0.qualifyIndexName());
      assertNull(cUBRIDDialect0.getIdentityInsertString());
      assertTrue(cUBRIDDialect0.supportsSubselectAsInPredicateLHS());
      assertEquals(" cross join ", cUBRIDDialect0.getCrossJoinSeparator());
      assertEquals("drop table", cUBRIDDialect0.getDropTemporaryTableString());
      assertEquals(']', cUBRIDDialect0.closeQuote());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntax());
      assertTrue(cUBRIDDialect0.supportsBindAsCallableArgument());
      assertTrue(cUBRIDDialect0.supportsCurrentTimestampSelection());
      assertFalse(cUBRIDDialect0.supportsCommentOn());
      assertTrue(cUBRIDDialect0.supportsLimitOffset());
      assertTrue(cUBRIDDialect0.useInputStreamToInsertBlob());
      assertFalse(cUBRIDDialect0.areStringComparisonsCaseInsensitive());
      assertTrue(cUBRIDDialect0.bindLimitParametersInReverseOrder());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntaxInInList());
      assertEquals(" ", cUBRIDDialect0.getForUpdateNowaitString());
      assertTrue(cUBRIDDialect0.supportsNotNullUnique());
      assertEquals("values ( )", cUBRIDDialect0.getNoColumnsInsertString());
      assertEquals("current_timestamp", cUBRIDDialect0.getCurrentTimestampSQLFunctionName());
      assertFalse(cUBRIDDialect0.forceLimitUsage());
      assertTrue(cUBRIDDialect0.supportsUniqueConstraintInCreateAlterTable());
      assertEquals("", cUBRIDDialect0.getNullColumnString());
      assertTrue(cUBRIDDialect0.supportsResultSetPositionQueryMethodsOnForwardOnlyCursor());
      assertEquals("select systimestamp from table({1}) as T(X)", cUBRIDDialect0.getCurrentTimestampSelectString());
      assertFalse(cUBRIDDialect0.supportsTemporaryTables());
      assertFalse(cUBRIDDialect0.supportsTupleCounts());
      assertTrue(cUBRIDDialect0.supportsLimit());
      assertNull(cUBRIDDialect0.performTemporaryTableDDLInIsolation());
      assertTrue(cUBRIDDialect0.hasDataTypeInIdentityColumn());
      assertTrue(cUBRIDDialect0.supportsCascadeDelete());
      assertTrue(cUBRIDDialect0.supportsTupleDistinctCounts());
      assertFalse(cUBRIDDialect0.supportsInsertSelectIdentity());
      assertTrue(cUBRIDDialect0.supportsUnique());
      assertEquals('[', cUBRIDDialect0.openQuote());
      assertTrue(cUBRIDDialect0.supportsOuterJoinForUpdate());
      assertTrue(cUBRIDDialect0.supportsTableCheck());
      assertEquals("", cUBRIDDialect0.getCascadeConstraintsString());
      assertTrue(cUBRIDDialect0.supportsCircularCascadeDeleteConstraints());
      assertEquals("create table", cUBRIDDialect0.getCreateMultisetTableString());
      assertFalse(cUBRIDDialect0.dropConstraints());
      assertEquals("", cUBRIDDialect0.getTableTypeString());
      assertTrue(cUBRIDDialect0.supportsVariableLimit());
      assertFalse(cUBRIDDialect0.doesReadCommittedCauseWritersToBlockReaders());
      assertEquals("create table", cUBRIDDialect0.getCreateTableString());
      assertTrue(cUBRIDDialect0.useMaxForLimit());
      assertFalse(cUBRIDDialect0.hasAlterTable());
      assertTrue(cUBRIDDialect0.supportsEmptyInList());
      assertNotNull(cUBRIDDialect0);
      
      Properties properties0 = cUBRIDDialect0.getDefaultProperties();
      assertFalse(cUBRIDDialect0.isLockTimeoutParameterized());
      assertFalse(cUBRIDDialect0.supportsPooledSequences());
      assertTrue(cUBRIDDialect0.supportsExistsInSelect());
      assertFalse(cUBRIDDialect0.supportsIfExistsAfterTableName());
      assertEquals(" drop constraint ", cUBRIDDialect0.getDropForeignKeyString());
      assertFalse(cUBRIDDialect0.supportsIfExistsBeforeTableName());
      assertTrue(cUBRIDDialect0.supportsSequences());
      assertFalse(cUBRIDDialect0.supportsIdentityColumns());
      assertFalse(cUBRIDDialect0.doesRepeatableReadCauseReadersToBlockWriters());
      assertFalse(cUBRIDDialect0.isCurrentTimestampSelectStringCallable());
      assertEquals(" ", cUBRIDDialect0.getForUpdateString());
      assertTrue(cUBRIDDialect0.supportsUnionAll());
      assertTrue(cUBRIDDialect0.supportsColumnCheck());
      assertTrue(cUBRIDDialect0.supportsLockTimeouts());
      assertTrue(cUBRIDDialect0.supportsLobValueChangePropogation());
      assertFalse(cUBRIDDialect0.hasSelfReferentialForeignKeyBug());
      assertFalse(cUBRIDDialect0.bindLimitParametersFirst());
      assertTrue(cUBRIDDialect0.supportsParametersInInsertSelect());
      assertFalse(cUBRIDDialect0.replaceResultVariableInOrderByClauseWithPosition());
      assertEquals(10, cUBRIDDialect0.getMaxAliasLength());
      assertEquals("", cUBRIDDialect0.getCreateTemporaryTablePostfix());
      assertTrue(cUBRIDDialect0.supportsSubqueryOnMutatingTable());
      assertEquals("lower", cUBRIDDialect0.getLowercaseFunction());
      assertTrue(cUBRIDDialect0.dropTemporaryTableAfterUse());
      assertEquals("add", cUBRIDDialect0.getAddColumnString());
      assertEquals("select name from db_serial", cUBRIDDialect0.getQuerySequencesString());
      assertFalse(cUBRIDDialect0.requiresCastingOfParametersInSelectClause());
      assertTrue(cUBRIDDialect0.supportsUnboundedLobLocatorMaterialization());
      assertTrue(cUBRIDDialect0.forUpdateOfColumns());
      assertEquals("create table", cUBRIDDialect0.getCreateTemporaryTableString());
      assertTrue(cUBRIDDialect0.supportsExpectedLobUsagePattern());
      assertTrue(cUBRIDDialect0.qualifyIndexName());
      assertNull(cUBRIDDialect0.getIdentityInsertString());
      assertTrue(cUBRIDDialect0.supportsSubselectAsInPredicateLHS());
      assertEquals(" cross join ", cUBRIDDialect0.getCrossJoinSeparator());
      assertEquals("drop table", cUBRIDDialect0.getDropTemporaryTableString());
      assertEquals(']', cUBRIDDialect0.closeQuote());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntax());
      assertTrue(cUBRIDDialect0.supportsBindAsCallableArgument());
      assertTrue(cUBRIDDialect0.supportsCurrentTimestampSelection());
      assertFalse(cUBRIDDialect0.supportsCommentOn());
      assertTrue(cUBRIDDialect0.supportsLimitOffset());
      assertTrue(cUBRIDDialect0.useInputStreamToInsertBlob());
      assertFalse(cUBRIDDialect0.areStringComparisonsCaseInsensitive());
      assertTrue(cUBRIDDialect0.bindLimitParametersInReverseOrder());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntaxInInList());
      assertEquals(" ", cUBRIDDialect0.getForUpdateNowaitString());
      assertTrue(cUBRIDDialect0.supportsNotNullUnique());
      assertEquals("values ( )", cUBRIDDialect0.getNoColumnsInsertString());
      assertEquals("current_timestamp", cUBRIDDialect0.getCurrentTimestampSQLFunctionName());
      assertFalse(cUBRIDDialect0.forceLimitUsage());
      assertTrue(cUBRIDDialect0.supportsUniqueConstraintInCreateAlterTable());
      assertEquals("", cUBRIDDialect0.getNullColumnString());
      assertTrue(cUBRIDDialect0.supportsResultSetPositionQueryMethodsOnForwardOnlyCursor());
      assertEquals("select systimestamp from table({1}) as T(X)", cUBRIDDialect0.getCurrentTimestampSelectString());
      assertFalse(cUBRIDDialect0.supportsTemporaryTables());
      assertFalse(cUBRIDDialect0.supportsTupleCounts());
      assertTrue(cUBRIDDialect0.supportsLimit());
      assertNull(cUBRIDDialect0.performTemporaryTableDDLInIsolation());
      assertTrue(cUBRIDDialect0.hasDataTypeInIdentityColumn());
      assertTrue(cUBRIDDialect0.supportsCascadeDelete());
      assertTrue(cUBRIDDialect0.supportsTupleDistinctCounts());
      assertFalse(cUBRIDDialect0.supportsInsertSelectIdentity());
      assertTrue(cUBRIDDialect0.supportsUnique());
      assertEquals('[', cUBRIDDialect0.openQuote());
      assertTrue(cUBRIDDialect0.supportsOuterJoinForUpdate());
      assertTrue(cUBRIDDialect0.supportsTableCheck());
      assertEquals("", cUBRIDDialect0.getCascadeConstraintsString());
      assertTrue(cUBRIDDialect0.supportsCircularCascadeDeleteConstraints());
      assertEquals("create table", cUBRIDDialect0.getCreateMultisetTableString());
      assertFalse(cUBRIDDialect0.dropConstraints());
      assertEquals("", cUBRIDDialect0.getTableTypeString());
      assertTrue(cUBRIDDialect0.supportsVariableLimit());
      assertFalse(cUBRIDDialect0.doesReadCommittedCauseWritersToBlockReaders());
      assertEquals("create table", cUBRIDDialect0.getCreateTableString());
      assertTrue(cUBRIDDialect0.useMaxForLimit());
      assertFalse(cUBRIDDialect0.hasAlterTable());
      assertTrue(cUBRIDDialect0.supportsEmptyInList());
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
      assertNotNull(properties0);
      
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      assertNotNull(groovyClassLoader0);
      
      hookHotDeployListener0.initAutoLogins("`\"]", groovyClassLoader0, properties0);
      assertFalse(cUBRIDDialect0.isLockTimeoutParameterized());
      assertFalse(cUBRIDDialect0.supportsPooledSequences());
      assertTrue(cUBRIDDialect0.supportsExistsInSelect());
      assertFalse(cUBRIDDialect0.supportsIfExistsAfterTableName());
      assertEquals(" drop constraint ", cUBRIDDialect0.getDropForeignKeyString());
      assertFalse(cUBRIDDialect0.supportsIfExistsBeforeTableName());
      assertTrue(cUBRIDDialect0.supportsSequences());
      assertFalse(cUBRIDDialect0.supportsIdentityColumns());
      assertFalse(cUBRIDDialect0.doesRepeatableReadCauseReadersToBlockWriters());
      assertFalse(cUBRIDDialect0.isCurrentTimestampSelectStringCallable());
      assertEquals(" ", cUBRIDDialect0.getForUpdateString());
      assertTrue(cUBRIDDialect0.supportsUnionAll());
      assertTrue(cUBRIDDialect0.supportsColumnCheck());
      assertTrue(cUBRIDDialect0.supportsLockTimeouts());
      assertTrue(cUBRIDDialect0.supportsLobValueChangePropogation());
      assertFalse(cUBRIDDialect0.hasSelfReferentialForeignKeyBug());
      assertFalse(cUBRIDDialect0.bindLimitParametersFirst());
      assertTrue(cUBRIDDialect0.supportsParametersInInsertSelect());
      assertFalse(cUBRIDDialect0.replaceResultVariableInOrderByClauseWithPosition());
      assertEquals(10, cUBRIDDialect0.getMaxAliasLength());
      assertEquals("", cUBRIDDialect0.getCreateTemporaryTablePostfix());
      assertTrue(cUBRIDDialect0.supportsSubqueryOnMutatingTable());
      assertEquals("lower", cUBRIDDialect0.getLowercaseFunction());
      assertTrue(cUBRIDDialect0.dropTemporaryTableAfterUse());
      assertEquals("add", cUBRIDDialect0.getAddColumnString());
      assertEquals("select name from db_serial", cUBRIDDialect0.getQuerySequencesString());
      assertFalse(cUBRIDDialect0.requiresCastingOfParametersInSelectClause());
      assertTrue(cUBRIDDialect0.supportsUnboundedLobLocatorMaterialization());
      assertTrue(cUBRIDDialect0.forUpdateOfColumns());
      assertEquals("create table", cUBRIDDialect0.getCreateTemporaryTableString());
      assertTrue(cUBRIDDialect0.supportsExpectedLobUsagePattern());
      assertTrue(cUBRIDDialect0.qualifyIndexName());
      assertNull(cUBRIDDialect0.getIdentityInsertString());
      assertTrue(cUBRIDDialect0.supportsSubselectAsInPredicateLHS());
      assertEquals(" cross join ", cUBRIDDialect0.getCrossJoinSeparator());
      assertEquals("drop table", cUBRIDDialect0.getDropTemporaryTableString());
      assertEquals(']', cUBRIDDialect0.closeQuote());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntax());
      assertTrue(cUBRIDDialect0.supportsBindAsCallableArgument());
      assertTrue(cUBRIDDialect0.supportsCurrentTimestampSelection());
      assertFalse(cUBRIDDialect0.supportsCommentOn());
      assertTrue(cUBRIDDialect0.supportsLimitOffset());
      assertTrue(cUBRIDDialect0.useInputStreamToInsertBlob());
      assertFalse(cUBRIDDialect0.areStringComparisonsCaseInsensitive());
      assertTrue(cUBRIDDialect0.bindLimitParametersInReverseOrder());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntaxInInList());
      assertEquals(" ", cUBRIDDialect0.getForUpdateNowaitString());
      assertTrue(cUBRIDDialect0.supportsNotNullUnique());
      assertEquals("values ( )", cUBRIDDialect0.getNoColumnsInsertString());
      assertEquals("current_timestamp", cUBRIDDialect0.getCurrentTimestampSQLFunctionName());
      assertFalse(cUBRIDDialect0.forceLimitUsage());
      assertTrue(cUBRIDDialect0.supportsUniqueConstraintInCreateAlterTable());
      assertEquals("", cUBRIDDialect0.getNullColumnString());
      assertTrue(cUBRIDDialect0.supportsResultSetPositionQueryMethodsOnForwardOnlyCursor());
      assertEquals("select systimestamp from table({1}) as T(X)", cUBRIDDialect0.getCurrentTimestampSelectString());
      assertFalse(cUBRIDDialect0.supportsTemporaryTables());
      assertFalse(cUBRIDDialect0.supportsTupleCounts());
      assertTrue(cUBRIDDialect0.supportsLimit());
      assertNull(cUBRIDDialect0.performTemporaryTableDDLInIsolation());
      assertTrue(cUBRIDDialect0.hasDataTypeInIdentityColumn());
      assertTrue(cUBRIDDialect0.supportsCascadeDelete());
      assertTrue(cUBRIDDialect0.supportsTupleDistinctCounts());
      assertFalse(cUBRIDDialect0.supportsInsertSelectIdentity());
      assertTrue(cUBRIDDialect0.supportsUnique());
      assertEquals('[', cUBRIDDialect0.openQuote());
      assertTrue(cUBRIDDialect0.supportsOuterJoinForUpdate());
      assertTrue(cUBRIDDialect0.supportsTableCheck());
      assertEquals("", cUBRIDDialect0.getCascadeConstraintsString());
      assertTrue(cUBRIDDialect0.supportsCircularCascadeDeleteConstraints());
      assertEquals("create table", cUBRIDDialect0.getCreateMultisetTableString());
      assertFalse(cUBRIDDialect0.dropConstraints());
      assertEquals("", cUBRIDDialect0.getTableTypeString());
      assertTrue(cUBRIDDialect0.supportsVariableLimit());
      assertFalse(cUBRIDDialect0.doesReadCommittedCauseWritersToBlockReaders());
      assertEquals("create table", cUBRIDDialect0.getCreateTableString());
      assertTrue(cUBRIDDialect0.useMaxForLimit());
      assertFalse(cUBRIDDialect0.hasAlterTable());
      assertTrue(cUBRIDDialect0.supportsEmptyInList());
      assertFalse(properties0.isEmpty());
      assertEquals(2, properties0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      CUBRIDDialect cUBRIDDialect0 = new CUBRIDDialect();
      assertTrue(cUBRIDDialect0.dropTemporaryTableAfterUse());
      assertTrue(cUBRIDDialect0.supportsOuterJoinForUpdate());
      assertEquals("", cUBRIDDialect0.getCascadeConstraintsString());
      assertNull(cUBRIDDialect0.performTemporaryTableDDLInIsolation());
      assertEquals(" cross join ", cUBRIDDialect0.getCrossJoinSeparator());
      assertTrue(cUBRIDDialect0.forUpdateOfColumns());
      assertEquals("create table", cUBRIDDialect0.getCreateTemporaryTableString());
      assertTrue(cUBRIDDialect0.qualifyIndexName());
      assertNull(cUBRIDDialect0.getIdentityInsertString());
      assertTrue(cUBRIDDialect0.supportsSubselectAsInPredicateLHS());
      assertTrue(cUBRIDDialect0.supportsCircularCascadeDeleteConstraints());
      assertEquals("drop table", cUBRIDDialect0.getDropTemporaryTableString());
      assertFalse(cUBRIDDialect0.doesReadCommittedCauseWritersToBlockReaders());
      assertEquals("create table", cUBRIDDialect0.getCreateTableString());
      assertEquals(']', cUBRIDDialect0.closeQuote());
      assertTrue(cUBRIDDialect0.supportsBindAsCallableArgument());
      assertFalse(cUBRIDDialect0.supportsCommentOn());
      assertTrue(cUBRIDDialect0.useMaxForLimit());
      assertFalse(cUBRIDDialect0.hasAlterTable());
      assertTrue(cUBRIDDialect0.supportsEmptyInList());
      assertFalse(cUBRIDDialect0.isLockTimeoutParameterized());
      assertTrue(cUBRIDDialect0.useInputStreamToInsertBlob());
      assertEquals(" drop constraint ", cUBRIDDialect0.getDropForeignKeyString());
      assertFalse(cUBRIDDialect0.supportsPooledSequences());
      assertFalse(cUBRIDDialect0.supportsIfExistsBeforeTableName());
      assertEquals("values ( )", cUBRIDDialect0.getNoColumnsInsertString());
      assertEquals("create table", cUBRIDDialect0.getCreateMultisetTableString());
      assertTrue(cUBRIDDialect0.supportsLimit());
      assertTrue(cUBRIDDialect0.supportsCascadeDelete());
      assertEquals('[', cUBRIDDialect0.openQuote());
      assertTrue(cUBRIDDialect0.hasDataTypeInIdentityColumn());
      assertFalse(cUBRIDDialect0.supportsTupleCounts());
      assertTrue(cUBRIDDialect0.supportsTupleDistinctCounts());
      assertTrue(cUBRIDDialect0.supportsUnionAll());
      assertEquals("", cUBRIDDialect0.getCreateTemporaryTablePostfix());
      assertFalse(cUBRIDDialect0.supportsInsertSelectIdentity());
      assertEquals("lower", cUBRIDDialect0.getLowercaseFunction());
      assertTrue(cUBRIDDialect0.supportsTableCheck());
      assertEquals("add", cUBRIDDialect0.getAddColumnString());
      assertTrue(cUBRIDDialect0.supportsExpectedLobUsagePattern());
      assertEquals("select name from db_serial", cUBRIDDialect0.getQuerySequencesString());
      assertFalse(cUBRIDDialect0.requiresCastingOfParametersInSelectClause());
      assertTrue(cUBRIDDialect0.supportsUnboundedLobLocatorMaterialization());
      assertFalse(cUBRIDDialect0.dropConstraints());
      assertTrue(cUBRIDDialect0.supportsVariableLimit());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntax());
      assertEquals("", cUBRIDDialect0.getTableTypeString());
      assertTrue(cUBRIDDialect0.supportsCurrentTimestampSelection());
      assertTrue(cUBRIDDialect0.supportsLimitOffset());
      assertTrue(cUBRIDDialect0.supportsExistsInSelect());
      assertFalse(cUBRIDDialect0.supportsIfExistsAfterTableName());
      assertTrue(cUBRIDDialect0.supportsSequences());
      assertFalse(cUBRIDDialect0.areStringComparisonsCaseInsensitive());
      assertEquals("current_timestamp", cUBRIDDialect0.getCurrentTimestampSQLFunctionName());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntaxInInList());
      assertTrue(cUBRIDDialect0.supportsNotNullUnique());
      assertEquals(" ", cUBRIDDialect0.getForUpdateNowaitString());
      assertFalse(cUBRIDDialect0.forceLimitUsage());
      assertFalse(cUBRIDDialect0.supportsIdentityColumns());
      assertTrue(cUBRIDDialect0.supportsUniqueConstraintInCreateAlterTable());
      assertFalse(cUBRIDDialect0.doesRepeatableReadCauseReadersToBlockWriters());
      assertEquals("", cUBRIDDialect0.getNullColumnString());
      assertEquals(" ", cUBRIDDialect0.getForUpdateString());
      assertFalse(cUBRIDDialect0.supportsTemporaryTables());
      assertFalse(cUBRIDDialect0.isCurrentTimestampSelectStringCallable());
      assertFalse(cUBRIDDialect0.bindLimitParametersFirst());
      assertTrue(cUBRIDDialect0.supportsResultSetPositionQueryMethodsOnForwardOnlyCursor());
      assertEquals("select systimestamp from table({1}) as T(X)", cUBRIDDialect0.getCurrentTimestampSelectString());
      assertFalse(cUBRIDDialect0.hasSelfReferentialForeignKeyBug());
      assertTrue(cUBRIDDialect0.supportsLockTimeouts());
      assertTrue(cUBRIDDialect0.supportsLobValueChangePropogation());
      assertTrue(cUBRIDDialect0.bindLimitParametersInReverseOrder());
      assertTrue(cUBRIDDialect0.supportsSubqueryOnMutatingTable());
      assertFalse(cUBRIDDialect0.replaceResultVariableInOrderByClauseWithPosition());
      assertTrue(cUBRIDDialect0.supportsUnique());
      assertEquals(10, cUBRIDDialect0.getMaxAliasLength());
      assertTrue(cUBRIDDialect0.supportsColumnCheck());
      assertTrue(cUBRIDDialect0.supportsParametersInInsertSelect());
      assertNotNull(cUBRIDDialect0);
      
      Properties properties0 = cUBRIDDialect0.getDefaultProperties();
      assertTrue(cUBRIDDialect0.dropTemporaryTableAfterUse());
      assertTrue(cUBRIDDialect0.supportsOuterJoinForUpdate());
      assertEquals("", cUBRIDDialect0.getCascadeConstraintsString());
      assertNull(cUBRIDDialect0.performTemporaryTableDDLInIsolation());
      assertEquals(" cross join ", cUBRIDDialect0.getCrossJoinSeparator());
      assertTrue(cUBRIDDialect0.forUpdateOfColumns());
      assertEquals("create table", cUBRIDDialect0.getCreateTemporaryTableString());
      assertTrue(cUBRIDDialect0.qualifyIndexName());
      assertNull(cUBRIDDialect0.getIdentityInsertString());
      assertTrue(cUBRIDDialect0.supportsSubselectAsInPredicateLHS());
      assertTrue(cUBRIDDialect0.supportsCircularCascadeDeleteConstraints());
      assertEquals("drop table", cUBRIDDialect0.getDropTemporaryTableString());
      assertFalse(cUBRIDDialect0.doesReadCommittedCauseWritersToBlockReaders());
      assertEquals("create table", cUBRIDDialect0.getCreateTableString());
      assertEquals(']', cUBRIDDialect0.closeQuote());
      assertTrue(cUBRIDDialect0.supportsBindAsCallableArgument());
      assertFalse(cUBRIDDialect0.supportsCommentOn());
      assertTrue(cUBRIDDialect0.useMaxForLimit());
      assertFalse(cUBRIDDialect0.hasAlterTable());
      assertTrue(cUBRIDDialect0.supportsEmptyInList());
      assertFalse(cUBRIDDialect0.isLockTimeoutParameterized());
      assertTrue(cUBRIDDialect0.useInputStreamToInsertBlob());
      assertEquals(" drop constraint ", cUBRIDDialect0.getDropForeignKeyString());
      assertFalse(cUBRIDDialect0.supportsPooledSequences());
      assertFalse(cUBRIDDialect0.supportsIfExistsBeforeTableName());
      assertEquals("values ( )", cUBRIDDialect0.getNoColumnsInsertString());
      assertEquals("create table", cUBRIDDialect0.getCreateMultisetTableString());
      assertTrue(cUBRIDDialect0.supportsLimit());
      assertTrue(cUBRIDDialect0.supportsCascadeDelete());
      assertEquals('[', cUBRIDDialect0.openQuote());
      assertTrue(cUBRIDDialect0.hasDataTypeInIdentityColumn());
      assertFalse(cUBRIDDialect0.supportsTupleCounts());
      assertTrue(cUBRIDDialect0.supportsTupleDistinctCounts());
      assertTrue(cUBRIDDialect0.supportsUnionAll());
      assertEquals("", cUBRIDDialect0.getCreateTemporaryTablePostfix());
      assertFalse(cUBRIDDialect0.supportsInsertSelectIdentity());
      assertEquals("lower", cUBRIDDialect0.getLowercaseFunction());
      assertTrue(cUBRIDDialect0.supportsTableCheck());
      assertEquals("add", cUBRIDDialect0.getAddColumnString());
      assertTrue(cUBRIDDialect0.supportsExpectedLobUsagePattern());
      assertEquals("select name from db_serial", cUBRIDDialect0.getQuerySequencesString());
      assertFalse(cUBRIDDialect0.requiresCastingOfParametersInSelectClause());
      assertTrue(cUBRIDDialect0.supportsUnboundedLobLocatorMaterialization());
      assertFalse(cUBRIDDialect0.dropConstraints());
      assertTrue(cUBRIDDialect0.supportsVariableLimit());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntax());
      assertEquals("", cUBRIDDialect0.getTableTypeString());
      assertTrue(cUBRIDDialect0.supportsCurrentTimestampSelection());
      assertTrue(cUBRIDDialect0.supportsLimitOffset());
      assertTrue(cUBRIDDialect0.supportsExistsInSelect());
      assertFalse(cUBRIDDialect0.supportsIfExistsAfterTableName());
      assertTrue(cUBRIDDialect0.supportsSequences());
      assertFalse(cUBRIDDialect0.areStringComparisonsCaseInsensitive());
      assertEquals("current_timestamp", cUBRIDDialect0.getCurrentTimestampSQLFunctionName());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntaxInInList());
      assertTrue(cUBRIDDialect0.supportsNotNullUnique());
      assertEquals(" ", cUBRIDDialect0.getForUpdateNowaitString());
      assertFalse(cUBRIDDialect0.forceLimitUsage());
      assertFalse(cUBRIDDialect0.supportsIdentityColumns());
      assertTrue(cUBRIDDialect0.supportsUniqueConstraintInCreateAlterTable());
      assertFalse(cUBRIDDialect0.doesRepeatableReadCauseReadersToBlockWriters());
      assertEquals("", cUBRIDDialect0.getNullColumnString());
      assertEquals(" ", cUBRIDDialect0.getForUpdateString());
      assertFalse(cUBRIDDialect0.supportsTemporaryTables());
      assertFalse(cUBRIDDialect0.isCurrentTimestampSelectStringCallable());
      assertFalse(cUBRIDDialect0.bindLimitParametersFirst());
      assertTrue(cUBRIDDialect0.supportsResultSetPositionQueryMethodsOnForwardOnlyCursor());
      assertEquals("select systimestamp from table({1}) as T(X)", cUBRIDDialect0.getCurrentTimestampSelectString());
      assertFalse(cUBRIDDialect0.hasSelfReferentialForeignKeyBug());
      assertTrue(cUBRIDDialect0.supportsLockTimeouts());
      assertTrue(cUBRIDDialect0.supportsLobValueChangePropogation());
      assertTrue(cUBRIDDialect0.bindLimitParametersInReverseOrder());
      assertTrue(cUBRIDDialect0.supportsSubqueryOnMutatingTable());
      assertFalse(cUBRIDDialect0.replaceResultVariableInOrderByClauseWithPosition());
      assertTrue(cUBRIDDialect0.supportsUnique());
      assertEquals(10, cUBRIDDialect0.getMaxAliasLength());
      assertTrue(cUBRIDDialect0.supportsColumnCheck());
      assertTrue(cUBRIDDialect0.supportsParametersInInsertSelect());
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
      assertNotNull(properties0);
      
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      assertNotNull(groovyClassLoader0);
      
      hookHotDeployListener0.initAutoDeployListeners("V1<(%?,5KLN1by+", groovyClassLoader0, properties0);
      assertTrue(cUBRIDDialect0.dropTemporaryTableAfterUse());
      assertTrue(cUBRIDDialect0.supportsOuterJoinForUpdate());
      assertEquals("", cUBRIDDialect0.getCascadeConstraintsString());
      assertNull(cUBRIDDialect0.performTemporaryTableDDLInIsolation());
      assertEquals(" cross join ", cUBRIDDialect0.getCrossJoinSeparator());
      assertTrue(cUBRIDDialect0.forUpdateOfColumns());
      assertEquals("create table", cUBRIDDialect0.getCreateTemporaryTableString());
      assertTrue(cUBRIDDialect0.qualifyIndexName());
      assertNull(cUBRIDDialect0.getIdentityInsertString());
      assertTrue(cUBRIDDialect0.supportsSubselectAsInPredicateLHS());
      assertTrue(cUBRIDDialect0.supportsCircularCascadeDeleteConstraints());
      assertEquals("drop table", cUBRIDDialect0.getDropTemporaryTableString());
      assertFalse(cUBRIDDialect0.doesReadCommittedCauseWritersToBlockReaders());
      assertEquals("create table", cUBRIDDialect0.getCreateTableString());
      assertEquals(']', cUBRIDDialect0.closeQuote());
      assertTrue(cUBRIDDialect0.supportsBindAsCallableArgument());
      assertFalse(cUBRIDDialect0.supportsCommentOn());
      assertTrue(cUBRIDDialect0.useMaxForLimit());
      assertFalse(cUBRIDDialect0.hasAlterTable());
      assertTrue(cUBRIDDialect0.supportsEmptyInList());
      assertFalse(cUBRIDDialect0.isLockTimeoutParameterized());
      assertTrue(cUBRIDDialect0.useInputStreamToInsertBlob());
      assertEquals(" drop constraint ", cUBRIDDialect0.getDropForeignKeyString());
      assertFalse(cUBRIDDialect0.supportsPooledSequences());
      assertFalse(cUBRIDDialect0.supportsIfExistsBeforeTableName());
      assertEquals("values ( )", cUBRIDDialect0.getNoColumnsInsertString());
      assertEquals("create table", cUBRIDDialect0.getCreateMultisetTableString());
      assertTrue(cUBRIDDialect0.supportsLimit());
      assertTrue(cUBRIDDialect0.supportsCascadeDelete());
      assertEquals('[', cUBRIDDialect0.openQuote());
      assertTrue(cUBRIDDialect0.hasDataTypeInIdentityColumn());
      assertFalse(cUBRIDDialect0.supportsTupleCounts());
      assertTrue(cUBRIDDialect0.supportsTupleDistinctCounts());
      assertTrue(cUBRIDDialect0.supportsUnionAll());
      assertEquals("", cUBRIDDialect0.getCreateTemporaryTablePostfix());
      assertFalse(cUBRIDDialect0.supportsInsertSelectIdentity());
      assertEquals("lower", cUBRIDDialect0.getLowercaseFunction());
      assertTrue(cUBRIDDialect0.supportsTableCheck());
      assertEquals("add", cUBRIDDialect0.getAddColumnString());
      assertTrue(cUBRIDDialect0.supportsExpectedLobUsagePattern());
      assertEquals("select name from db_serial", cUBRIDDialect0.getQuerySequencesString());
      assertFalse(cUBRIDDialect0.requiresCastingOfParametersInSelectClause());
      assertTrue(cUBRIDDialect0.supportsUnboundedLobLocatorMaterialization());
      assertFalse(cUBRIDDialect0.dropConstraints());
      assertTrue(cUBRIDDialect0.supportsVariableLimit());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntax());
      assertEquals("", cUBRIDDialect0.getTableTypeString());
      assertTrue(cUBRIDDialect0.supportsCurrentTimestampSelection());
      assertTrue(cUBRIDDialect0.supportsLimitOffset());
      assertTrue(cUBRIDDialect0.supportsExistsInSelect());
      assertFalse(cUBRIDDialect0.supportsIfExistsAfterTableName());
      assertTrue(cUBRIDDialect0.supportsSequences());
      assertFalse(cUBRIDDialect0.areStringComparisonsCaseInsensitive());
      assertEquals("current_timestamp", cUBRIDDialect0.getCurrentTimestampSQLFunctionName());
      assertFalse(cUBRIDDialect0.supportsRowValueConstructorSyntaxInInList());
      assertTrue(cUBRIDDialect0.supportsNotNullUnique());
      assertEquals(" ", cUBRIDDialect0.getForUpdateNowaitString());
      assertFalse(cUBRIDDialect0.forceLimitUsage());
      assertFalse(cUBRIDDialect0.supportsIdentityColumns());
      assertTrue(cUBRIDDialect0.supportsUniqueConstraintInCreateAlterTable());
      assertFalse(cUBRIDDialect0.doesRepeatableReadCauseReadersToBlockWriters());
      assertEquals("", cUBRIDDialect0.getNullColumnString());
      assertEquals(" ", cUBRIDDialect0.getForUpdateString());
      assertFalse(cUBRIDDialect0.supportsTemporaryTables());
      assertFalse(cUBRIDDialect0.isCurrentTimestampSelectStringCallable());
      assertFalse(cUBRIDDialect0.bindLimitParametersFirst());
      assertTrue(cUBRIDDialect0.supportsResultSetPositionQueryMethodsOnForwardOnlyCursor());
      assertEquals("select systimestamp from table({1}) as T(X)", cUBRIDDialect0.getCurrentTimestampSelectString());
      assertFalse(cUBRIDDialect0.hasSelfReferentialForeignKeyBug());
      assertTrue(cUBRIDDialect0.supportsLockTimeouts());
      assertTrue(cUBRIDDialect0.supportsLobValueChangePropogation());
      assertTrue(cUBRIDDialect0.bindLimitParametersInReverseOrder());
      assertTrue(cUBRIDDialect0.supportsSubqueryOnMutatingTable());
      assertFalse(cUBRIDDialect0.replaceResultVariableInOrderByClauseWithPosition());
      assertTrue(cUBRIDDialect0.supportsUnique());
      assertEquals(10, cUBRIDDialect0.getMaxAliasLength());
      assertTrue(cUBRIDDialect0.supportsColumnCheck());
      assertTrue(cUBRIDDialect0.supportsParametersInInsertSelect());
      assertEquals(2, properties0.size());
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      JavaClassGenerator javaClassGenerator0 = new JavaClassGenerator();
      assertNotNull(javaClassGenerator0);
      
      ClassLoader classLoader0 = javaClassGenerator0.getPreloadLoader();
      assertNotNull(classLoader0);
      
      ColorSchemeImpl colorSchemeImpl0 = new ColorSchemeImpl();
      assertFalse(colorSchemeImpl0.getDefaultCs());
      assertFalse(colorSchemeImpl0.isDefaultCs());
      assertNull(colorSchemeImpl0.getColorSchemeId());
      assertNull(colorSchemeImpl0.getCssClass());
      assertEquals("${images-path}/color_schemes/${css-class}", colorSchemeImpl0.getColorSchemeImagesPath());
      assertNotNull(colorSchemeImpl0);
      
      Properties properties0 = colorSchemeImpl0.getSettingsProperties();
      assertFalse(colorSchemeImpl0.getDefaultCs());
      assertFalse(colorSchemeImpl0.isDefaultCs());
      assertNull(colorSchemeImpl0.getColorSchemeId());
      assertNull(colorSchemeImpl0.getCssClass());
      assertEquals("${images-path}/color_schemes/${css-class}", colorSchemeImpl0.getColorSchemeImagesPath());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      hookHotDeployListener0.initAuthVerifiers("organizations.form.add.main", classLoader0, properties0);
      assertFalse(colorSchemeImpl0.getDefaultCs());
      assertFalse(colorSchemeImpl0.isDefaultCs());
      assertNull(colorSchemeImpl0.getColorSchemeId());
      assertNull(colorSchemeImpl0.getCssClass());
      assertEquals("${images-path}/color_schemes/${css-class}", colorSchemeImpl0.getColorSchemeImagesPath());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      File file0 = MockFile.createTempFile("phone.number.format.international.regexp", "            ");
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/phone.number.format.international.regexp0            ", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("phone.number.format.international.regexp0            ", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertNotNull(file0);
      
      File file1 = hookHotDeployListener0.getPortalJspBackupFile(file0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file1.equals((Object)file0));
      assertTrue(file0.canExecute());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/phone.number.format.international.regexp0            ", file0.toString());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("phone.number.format.international.regexp0            ", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.isAbsolute());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.lastModified());
      assertFalse(file1.canWrite());
      assertEquals(0L, file1.length());
      assertEquals(0L, file1.getTotalSpace());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.canExecute());
      assertEquals("/tmp/phone.number.format.international.portal.regexp0            ", file1.toString());
      assertTrue(file1.isFile());
      assertEquals("phone.number.format.international.portal.regexp0            ", file1.getName());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.canRead());
      assertFalse(file1.exists());
      assertNotNull(file1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      File file0 = MockFile.createTempFile("`\"]", "hasPortalPropertiesKey");
      assertEquals("`\"]0hasPortalPropertiesKey", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/`\"]0hasPortalPropertiesKey", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertNotNull(file0);
      
      File file1 = hookHotDeployListener0.getPortalJspBackupFile(file0);
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertFalse(file1.equals((Object)file0));
      assertEquals("`\"]0hasPortalPropertiesKey", file0.getName());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertEquals("/tmp/`\"]0hasPortalPropertiesKey", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file1.isDirectory());
      assertEquals(0L, file1.length());
      assertEquals("`\"]0hasPortalPropertiesKey.portal", file1.getName());
      assertEquals(0L, file1.getTotalSpace());
      assertFalse(file1.exists());
      assertFalse(file1.canRead());
      assertFalse(file1.canExecute());
      assertEquals("/tmp/`\"]0hasPortalPropertiesKey.portal", file1.toString());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.lastModified());
      assertEquals("/tmp", file1.getParent());
      assertFalse(file1.isHidden());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.canWrite());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getFreeSpace());
      assertNotNull(file1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      Locale locale0 = hookHotDeployListener0.getLocale("|cr{Fsh");
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      JavaClass javaClass0 = new JavaClass();
      assertEquals(8, JavaClass.ACC_STATIC);
      assertEquals(32, JavaClass.ACC_SUPER);
      assertEquals(1, JavaClass.ACC_PUBLIC);
      assertEquals((-889275714), JavaClass.MAGIC);
      assertEquals(2, JavaClass.ACC_PRIVATE);
      assertEquals(4, JavaClass.ACC_PROTECTED);
      assertEquals(16, JavaClass.ACC_FINAL);
      assertEquals(0, javaClass0.getMinor());
      assertEquals(0, javaClass0.getMajor());
      assertFalse(javaClass0.isPrimitive());
      assertFalse(javaClass0.isArray());
      assertNull(javaClass0.getThisClass());
      assertNotNull(javaClass0);
      
      ArrayList<String> arrayList0 = javaClass0.getInterfaceNames();
      assertEquals(8, JavaClass.ACC_STATIC);
      assertEquals(32, JavaClass.ACC_SUPER);
      assertEquals(1, JavaClass.ACC_PUBLIC);
      assertEquals((-889275714), JavaClass.MAGIC);
      assertEquals(2, JavaClass.ACC_PRIVATE);
      assertEquals(4, JavaClass.ACC_PROTECTED);
      assertEquals(16, JavaClass.ACC_FINAL);
      assertEquals(0, javaClass0.getMinor());
      assertEquals(0, javaClass0.getMajor());
      assertFalse(javaClass0.isPrimitive());
      assertFalse(javaClass0.isArray());
      assertNull(javaClass0.getThisClass());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      MockServletContext mockServletContext0 = new MockServletContext();
      assertEquals(0, mockServletContext0.getMajorVersion());
      assertNull(mockServletContext0.getServerInfo());
      assertEquals(0, mockServletContext0.getMinorVersion());
      assertNull(mockServletContext0.getServletContextName());
      assertNotNull(mockServletContext0);
      
      hookHotDeployListener0.getCustomJsps(mockServletContext0, "org.hibernate.criterion.SimpleExpression", "org.hibernate.criterion.SimpleExpression", arrayList0);
      assertEquals(8, JavaClass.ACC_STATIC);
      assertEquals(32, JavaClass.ACC_SUPER);
      assertEquals(1, JavaClass.ACC_PUBLIC);
      assertEquals((-889275714), JavaClass.MAGIC);
      assertEquals(2, JavaClass.ACC_PRIVATE);
      assertEquals(4, JavaClass.ACC_PROTECTED);
      assertEquals(16, JavaClass.ACC_FINAL);
      assertFalse(arrayList0.contains("org.hibernate.criterion.SimpleExpression"));
      assertEquals(0, javaClass0.getMinor());
      assertEquals(0, javaClass0.getMajor());
      assertFalse(javaClass0.isPrimitive());
      assertFalse(javaClass0.isArray());
      assertNull(javaClass0.getThisClass());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, mockServletContext0.getMajorVersion());
      assertNull(mockServletContext0.getServerInfo());
      assertEquals(0, mockServletContext0.getMinorVersion());
      assertNull(mockServletContext0.getServletContextName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      assertNotNull(groovyClassLoader0);
      
      MockPageContext mockPageContext0 = new MockPageContext((ServletContext) null);
      assertNotNull(mockPageContext0);
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      JspContextWrapper jspContextWrapper0 = new JspContextWrapper(mockPageContext0, (ArrayList<String>) null, (ArrayList<String>) null, (ArrayList<String>) null, treeMap0);
      assertEquals(0, treeMap0.size());
      assertNotNull(jspContextWrapper0);
      
      org.springframework.mock.web.MockServletContext mockServletContext0 = (org.springframework.mock.web.MockServletContext)jspContextWrapper0.getServletContext();
      assertEquals(0, treeMap0.size());
      assertEquals(5, mockServletContext0.getMinorVersion());
      assertEquals("MockServletContext", mockServletContext0.getServerInfo());
      assertEquals("MockServletContext", mockServletContext0.getServletContextName());
      assertEquals(2, mockServletContext0.getMajorVersion());
      assertEquals("", mockServletContext0.getContextPath());
      assertNotNull(mockServletContext0);
      
      HotDeployEvent hotDeployEvent0 = new HotDeployEvent(mockServletContext0, groovyClassLoader0);
      assertEquals(0, treeMap0.size());
      assertEquals(5, mockServletContext0.getMinorVersion());
      assertEquals("MockServletContext", mockServletContext0.getServerInfo());
      assertEquals("MockServletContext", mockServletContext0.getServletContextName());
      assertEquals(2, mockServletContext0.getMajorVersion());
      assertEquals("", mockServletContext0.getContextPath());
      assertNotNull(hotDeployEvent0);
      
      hookHotDeployListener0.doInvokeUndeploy(hotDeployEvent0);
      assertEquals(0, treeMap0.size());
      assertEquals(5, mockServletContext0.getMinorVersion());
      assertEquals("MockServletContext", mockServletContext0.getServerInfo());
      assertEquals("MockServletContext", mockServletContext0.getServletContextName());
      assertEquals(2, mockServletContext0.getMajorVersion());
      assertEquals("", mockServletContext0.getContextPath());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      MockServletContext mockServletContext0 = new MockServletContext();
      assertNull(mockServletContext0.getServletContextName());
      assertNull(mockServletContext0.getServerInfo());
      assertEquals(0, mockServletContext0.getMajorVersion());
      assertEquals(0, mockServletContext0.getMinorVersion());
      assertNotNull(mockServletContext0);
      
      DatastorePath datastorePath0 = new DatastorePath("");
      assertFalse(DatastorePath.IS_USE_HASHMAP);
      assertEquals('/', datastorePath0.getFileSeparatorChar());
      assertFalse(datastorePath0.isCharacterDevice());
      assertEquals(0L, datastorePath0.getLastStatusChangeTime());
      assertEquals("", datastorePath0.getTail());
      assertEquals(0, datastorePath0.getUser());
      assertEquals(0, datastorePath0.getNumberOfLinks());
      assertFalse(datastorePath0.isBlockDevice());
      assertEquals(0L, datastorePath0.getDevice());
      assertFalse(datastorePath0.isSymbolicLink());
      assertEquals("", datastorePath0.getPath());
      assertFalse(datastorePath0.isFIFO());
      assertFalse(datastorePath0.isWindows());
      assertEquals(0, datastorePath0.getOwner());
      assertFalse(datastorePath0.isLink());
      assertEquals(0L, datastorePath0.getInode());
      assertEquals(0L, datastorePath0.getDiskSpaceFree());
      assertEquals(0L, datastorePath0.getDeviceId());
      assertEquals(0, datastorePath0.getGroup());
      assertEquals(0L, datastorePath0.getBlockSize());
      assertEquals(0L, datastorePath0.getBlockCount());
      assertFalse(datastorePath0.isSocket());
      assertEquals(':', datastorePath0.getPathSeparatorChar());
      assertEquals("datastore", datastorePath0.getScheme());
      assertFalse(datastorePath0.isHardLink());
      assertEquals("application/octet-stream", datastorePath0.getContentType());
      assertNull(datastorePath0.readLink());
      assertEquals(0L, datastorePath0.getDiskSpaceTotal());
      assertNotNull(datastorePath0);
      
      Injector.injectEntityManager(datastorePath0, (Class<?>) DatastorePath.class);
      assertFalse(DatastorePath.IS_USE_HASHMAP);
      assertEquals('/', datastorePath0.getFileSeparatorChar());
      assertFalse(datastorePath0.isCharacterDevice());
      assertEquals(0L, datastorePath0.getLastStatusChangeTime());
      assertEquals("", datastorePath0.getTail());
      assertEquals(0, datastorePath0.getUser());
      assertEquals(0, datastorePath0.getNumberOfLinks());
      assertFalse(datastorePath0.isBlockDevice());
      assertEquals(0L, datastorePath0.getDevice());
      assertFalse(datastorePath0.isSymbolicLink());
      assertEquals("", datastorePath0.getPath());
      assertFalse(datastorePath0.isFIFO());
      assertFalse(datastorePath0.isWindows());
      assertEquals(0, datastorePath0.getOwner());
      assertFalse(datastorePath0.isLink());
      assertEquals(0L, datastorePath0.getInode());
      assertEquals(0L, datastorePath0.getDiskSpaceFree());
      assertEquals(0L, datastorePath0.getDeviceId());
      assertEquals(0, datastorePath0.getGroup());
      assertEquals(0L, datastorePath0.getBlockSize());
      assertEquals(0L, datastorePath0.getBlockCount());
      assertFalse(datastorePath0.isSocket());
      assertEquals(':', datastorePath0.getPathSeparatorChar());
      assertEquals("datastore", datastorePath0.getScheme());
      assertFalse(datastorePath0.isHardLink());
      assertEquals("application/octet-stream", datastorePath0.getContentType());
      assertNull(datastorePath0.readLink());
      assertEquals(0L, datastorePath0.getDiskSpaceTotal());
      
      Injector.validateBean(datastorePath0, (Class<?>) DatastorePath.class);
      assertFalse(DatastorePath.IS_USE_HASHMAP);
      assertEquals('/', datastorePath0.getFileSeparatorChar());
      assertFalse(datastorePath0.isCharacterDevice());
      assertEquals(0L, datastorePath0.getLastStatusChangeTime());
      assertEquals("", datastorePath0.getTail());
      assertEquals(0, datastorePath0.getUser());
      assertEquals(0, datastorePath0.getNumberOfLinks());
      assertFalse(datastorePath0.isBlockDevice());
      assertEquals(0L, datastorePath0.getDevice());
      assertFalse(datastorePath0.isSymbolicLink());
      assertEquals("", datastorePath0.getPath());
      assertFalse(datastorePath0.isFIFO());
      assertFalse(datastorePath0.isWindows());
      assertEquals(0, datastorePath0.getOwner());
      assertFalse(datastorePath0.isLink());
      assertEquals(0L, datastorePath0.getInode());
      assertEquals(0L, datastorePath0.getDiskSpaceFree());
      assertEquals(0L, datastorePath0.getDeviceId());
      assertEquals(0, datastorePath0.getGroup());
      assertEquals(0L, datastorePath0.getBlockSize());
      assertEquals(0L, datastorePath0.getBlockCount());
      assertFalse(datastorePath0.isSocket());
      assertEquals(':', datastorePath0.getPathSeparatorChar());
      assertEquals("datastore", datastorePath0.getScheme());
      assertFalse(datastorePath0.isHardLink());
      assertEquals("application/octet-stream", datastorePath0.getContentType());
      assertNull(datastorePath0.readLink());
      assertEquals(0L, datastorePath0.getDiskSpaceTotal());
      
      DynamicClassLoader dynamicClassLoader0 = SimpleLoader.create((Path) datastorePath0);
      assertFalse(DatastorePath.IS_USE_HASHMAP);
      assertEquals('/', datastorePath0.getFileSeparatorChar());
      assertFalse(datastorePath0.isCharacterDevice());
      assertEquals(0L, datastorePath0.getLastStatusChangeTime());
      assertEquals("", datastorePath0.getTail());
      assertEquals(0, datastorePath0.getUser());
      assertEquals(0, datastorePath0.getNumberOfLinks());
      assertFalse(datastorePath0.isBlockDevice());
      assertEquals(0L, datastorePath0.getDevice());
      assertFalse(datastorePath0.isSymbolicLink());
      assertEquals("", datastorePath0.getPath());
      assertFalse(datastorePath0.isFIFO());
      assertFalse(datastorePath0.isWindows());
      assertEquals(0, datastorePath0.getOwner());
      assertFalse(datastorePath0.isLink());
      assertEquals(0L, datastorePath0.getInode());
      assertEquals(0L, datastorePath0.getDiskSpaceFree());
      assertEquals(0L, datastorePath0.getDeviceId());
      assertEquals(0, datastorePath0.getGroup());
      assertEquals(0L, datastorePath0.getBlockSize());
      assertEquals(0L, datastorePath0.getBlockCount());
      assertFalse(datastorePath0.isSocket());
      assertEquals(':', datastorePath0.getPathSeparatorChar());
      assertEquals("datastore", datastorePath0.getScheme());
      assertFalse(datastorePath0.isHardLink());
      assertEquals("application/octet-stream", datastorePath0.getContentType());
      assertNull(datastorePath0.readLink());
      assertEquals(0L, datastorePath0.getDiskSpaceTotal());
      assertFalse(dynamicClassLoader0.isJarCacheEnabledDefault());
      assertNull(dynamicClassLoader0.getId());
      assertEquals(2000L, dynamicClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(dynamicClassLoader0.isJarCacheEnabled());
      assertNotNull(dynamicClassLoader0);
      
      SystemClassLoader systemClassLoader0 = new SystemClassLoader(dynamicClassLoader0);
      assertFalse(DatastorePath.IS_USE_HASHMAP);
      assertEquals('/', datastorePath0.getFileSeparatorChar());
      assertFalse(datastorePath0.isCharacterDevice());
      assertEquals(0L, datastorePath0.getLastStatusChangeTime());
      assertEquals("", datastorePath0.getTail());
      assertEquals(0, datastorePath0.getUser());
      assertEquals(0, datastorePath0.getNumberOfLinks());
      assertFalse(datastorePath0.isBlockDevice());
      assertEquals(0L, datastorePath0.getDevice());
      assertFalse(datastorePath0.isSymbolicLink());
      assertEquals("", datastorePath0.getPath());
      assertFalse(datastorePath0.isFIFO());
      assertFalse(datastorePath0.isWindows());
      assertEquals(0, datastorePath0.getOwner());
      assertFalse(datastorePath0.isLink());
      assertEquals(0L, datastorePath0.getInode());
      assertEquals(0L, datastorePath0.getDiskSpaceFree());
      assertEquals(0L, datastorePath0.getDeviceId());
      assertEquals(0, datastorePath0.getGroup());
      assertEquals(0L, datastorePath0.getBlockSize());
      assertEquals(0L, datastorePath0.getBlockCount());
      assertFalse(datastorePath0.isSocket());
      assertEquals(':', datastorePath0.getPathSeparatorChar());
      assertEquals("datastore", datastorePath0.getScheme());
      assertFalse(datastorePath0.isHardLink());
      assertEquals("application/octet-stream", datastorePath0.getContentType());
      assertNull(datastorePath0.readLink());
      assertEquals(0L, datastorePath0.getDiskSpaceTotal());
      assertFalse(dynamicClassLoader0.isJarCacheEnabledDefault());
      assertNull(dynamicClassLoader0.getId());
      assertEquals(2000L, dynamicClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(dynamicClassLoader0.isJarCacheEnabled());
      assertEquals(2000L, systemClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(systemClassLoader0.isJarCacheEnabledDefault());
      assertEquals("system", systemClassLoader0.getId());
      assertFalse(systemClassLoader0.isJarCacheEnabled());
      assertNotNull(systemClassLoader0);
      
      CompilerConfiguration compilerConfiguration0 = new CompilerConfiguration();
      assertNotNull(compilerConfiguration0);
      
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader(systemClassLoader0, compilerConfiguration0);
      assertFalse(DatastorePath.IS_USE_HASHMAP);
      assertEquals('/', datastorePath0.getFileSeparatorChar());
      assertFalse(datastorePath0.isCharacterDevice());
      assertEquals(0L, datastorePath0.getLastStatusChangeTime());
      assertEquals("", datastorePath0.getTail());
      assertEquals(0, datastorePath0.getUser());
      assertEquals(0, datastorePath0.getNumberOfLinks());
      assertFalse(datastorePath0.isBlockDevice());
      assertEquals(0L, datastorePath0.getDevice());
      assertFalse(datastorePath0.isSymbolicLink());
      assertEquals("", datastorePath0.getPath());
      assertFalse(datastorePath0.isFIFO());
      assertFalse(datastorePath0.isWindows());
      assertEquals(0, datastorePath0.getOwner());
      assertFalse(datastorePath0.isLink());
      assertEquals(0L, datastorePath0.getInode());
      assertEquals(0L, datastorePath0.getDiskSpaceFree());
      assertEquals(0L, datastorePath0.getDeviceId());
      assertEquals(0, datastorePath0.getGroup());
      assertEquals(0L, datastorePath0.getBlockSize());
      assertEquals(0L, datastorePath0.getBlockCount());
      assertFalse(datastorePath0.isSocket());
      assertEquals(':', datastorePath0.getPathSeparatorChar());
      assertEquals("datastore", datastorePath0.getScheme());
      assertFalse(datastorePath0.isHardLink());
      assertEquals("application/octet-stream", datastorePath0.getContentType());
      assertNull(datastorePath0.readLink());
      assertEquals(0L, datastorePath0.getDiskSpaceTotal());
      assertFalse(dynamicClassLoader0.isJarCacheEnabledDefault());
      assertNull(dynamicClassLoader0.getId());
      assertEquals(2000L, dynamicClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(dynamicClassLoader0.isJarCacheEnabled());
      assertEquals(2000L, systemClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(systemClassLoader0.isJarCacheEnabledDefault());
      assertEquals("system", systemClassLoader0.getId());
      assertFalse(systemClassLoader0.isJarCacheEnabled());
      assertNotNull(groovyClassLoader0);
      
      HotDeployEvent hotDeployEvent0 = new HotDeployEvent(mockServletContext0, groovyClassLoader0);
      assertFalse(DatastorePath.IS_USE_HASHMAP);
      assertNull(mockServletContext0.getServletContextName());
      assertNull(mockServletContext0.getServerInfo());
      assertEquals(0, mockServletContext0.getMajorVersion());
      assertEquals(0, mockServletContext0.getMinorVersion());
      assertEquals('/', datastorePath0.getFileSeparatorChar());
      assertFalse(datastorePath0.isCharacterDevice());
      assertEquals(0L, datastorePath0.getLastStatusChangeTime());
      assertEquals("", datastorePath0.getTail());
      assertEquals(0, datastorePath0.getUser());
      assertEquals(0, datastorePath0.getNumberOfLinks());
      assertFalse(datastorePath0.isBlockDevice());
      assertEquals(0L, datastorePath0.getDevice());
      assertFalse(datastorePath0.isSymbolicLink());
      assertEquals("", datastorePath0.getPath());
      assertFalse(datastorePath0.isFIFO());
      assertFalse(datastorePath0.isWindows());
      assertEquals(0, datastorePath0.getOwner());
      assertFalse(datastorePath0.isLink());
      assertEquals(0L, datastorePath0.getInode());
      assertEquals(0L, datastorePath0.getDiskSpaceFree());
      assertEquals(0L, datastorePath0.getDeviceId());
      assertEquals(0, datastorePath0.getGroup());
      assertEquals(0L, datastorePath0.getBlockSize());
      assertEquals(0L, datastorePath0.getBlockCount());
      assertFalse(datastorePath0.isSocket());
      assertEquals(':', datastorePath0.getPathSeparatorChar());
      assertEquals("datastore", datastorePath0.getScheme());
      assertFalse(datastorePath0.isHardLink());
      assertEquals("application/octet-stream", datastorePath0.getContentType());
      assertNull(datastorePath0.readLink());
      assertEquals(0L, datastorePath0.getDiskSpaceTotal());
      assertFalse(dynamicClassLoader0.isJarCacheEnabledDefault());
      assertNull(dynamicClassLoader0.getId());
      assertEquals(2000L, dynamicClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(dynamicClassLoader0.isJarCacheEnabled());
      assertEquals(2000L, systemClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(systemClassLoader0.isJarCacheEnabledDefault());
      assertEquals("system", systemClassLoader0.getId());
      assertFalse(systemClassLoader0.isJarCacheEnabled());
      assertNotNull(hotDeployEvent0);
      
      try { 
        hookHotDeployListener0.doInvokeDeploy(hotDeployEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.util.HttpUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      hookHotDeployListener0.destroyServices("0");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      boolean boolean0 = hookHotDeployListener0.containsKey((Properties) null, "java:comp/env/");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      BouncyCastleProvider bouncyCastleProvider0 = new BouncyCastleProvider();
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals(899, bouncyCastleProvider0.size());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertNotNull(bouncyCastleProvider0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      hookHotDeployListener0.initAuthenticators("BC", classLoader0, bouncyCastleProvider0);
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals(899, bouncyCastleProvider0.size());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      try { 
        hookHotDeployListener0.getAdvisedSupport(hookHotDeployListener0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Not a proxy instance
         //
         verifyException("com.liferay.portal.kernel.util.ProxyUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      // Undeclared exception!
      try { 
        hookHotDeployListener0.invokeDeploy((HotDeployEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.kernel.deploy.hot.BaseHotDeployListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      BouncyCastleProvider bouncyCastleProvider0 = new BouncyCastleProvider();
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertNotNull(bouncyCastleProvider0);
      
      hookHotDeployListener0.initAuthPublicPaths("6\"4g", bouncyCastleProvider0);
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      BouncyCastleProvider bouncyCastleProvider0 = new BouncyCastleProvider();
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
      assertNotNull(bouncyCastleProvider0);
      
      JavaClassGenerator javaClassGenerator0 = new JavaClassGenerator();
      assertNotNull(javaClassGenerator0);
      
      ClassLoader classLoader0 = javaClassGenerator0.getPreloadLoader();
      assertNotNull(classLoader0);
      
      hookHotDeployListener0.initAuthFailures("BC", classLoader0, bouncyCastleProvider0);
      assertEquals(1.45, bouncyCastleProvider0.getVersion(), 0.01);
      assertEquals("BC version 1.45", bouncyCastleProvider0.toString());
      assertEquals(899, bouncyCastleProvider0.size());
      assertEquals("BC", bouncyCastleProvider0.getName());
      assertEquals("BouncyCastle Security Provider v1.45", bouncyCastleProvider0.getInfo());
      assertFalse(bouncyCastleProvider0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      MergePath mergePath0 = new MergePath();
      assertEquals(0, mergePath0.getNumberOfLinks());
      assertEquals(0, mergePath0.getUser());
      assertEquals(0, mergePath0.getGroup());
      assertEquals('/', mergePath0.getFileSeparatorChar());
      assertEquals("", mergePath0.getTail());
      assertEquals("/", mergePath0.getUserPath());
      assertFalse(mergePath0.isBlockDevice());
      assertEquals(0, mergePath0.getOwner());
      assertFalse(mergePath0.isWindows());
      assertEquals(':', mergePath0.getPathSeparatorChar());
      assertFalse(mergePath0.isSymbolicLink());
      assertFalse(mergePath0.isFIFO());
      assertEquals(0L, mergePath0.getInode());
      assertEquals(0L, mergePath0.getDevice());
      assertEquals(0L, mergePath0.getDeviceId());
      assertFalse(mergePath0.isCharacterDevice());
      assertEquals(0L, mergePath0.getDiskSpaceFree());
      assertEquals(0L, mergePath0.getBlockSize());
      assertEquals(0L, mergePath0.getBlockCount());
      assertFalse(mergePath0.isHardLink());
      assertFalse(mergePath0.isLink());
      assertFalse(mergePath0.isSocket());
      assertEquals("/", mergePath0.getPath());
      assertEquals("application/octet-stream", mergePath0.getContentType());
      assertNull(mergePath0.readLink());
      assertEquals(0L, mergePath0.getLastStatusChangeTime());
      assertEquals(0L, mergePath0.getDiskSpaceTotal());
      assertNotNull(mergePath0);
      
      DynamicClassLoader dynamicClassLoader0 = SimpleLoader.create((Path) mergePath0);
      assertEquals(0, mergePath0.getNumberOfLinks());
      assertEquals(0, mergePath0.getUser());
      assertEquals(0, mergePath0.getGroup());
      assertEquals('/', mergePath0.getFileSeparatorChar());
      assertEquals("", mergePath0.getTail());
      assertEquals("/", mergePath0.getUserPath());
      assertFalse(mergePath0.isBlockDevice());
      assertEquals(0, mergePath0.getOwner());
      assertFalse(mergePath0.isWindows());
      assertEquals(':', mergePath0.getPathSeparatorChar());
      assertFalse(mergePath0.isSymbolicLink());
      assertFalse(mergePath0.isFIFO());
      assertEquals(0L, mergePath0.getInode());
      assertEquals(0L, mergePath0.getDevice());
      assertEquals(0L, mergePath0.getDeviceId());
      assertFalse(mergePath0.isCharacterDevice());
      assertEquals(0L, mergePath0.getDiskSpaceFree());
      assertEquals(0L, mergePath0.getBlockSize());
      assertEquals(0L, mergePath0.getBlockCount());
      assertFalse(mergePath0.isHardLink());
      assertFalse(mergePath0.isLink());
      assertFalse(mergePath0.isSocket());
      assertEquals("/", mergePath0.getPath());
      assertEquals("application/octet-stream", mergePath0.getContentType());
      assertNull(mergePath0.readLink());
      assertEquals(0L, mergePath0.getLastStatusChangeTime());
      assertEquals(0L, mergePath0.getDiskSpaceTotal());
      assertFalse(dynamicClassLoader0.isJarCacheEnabledDefault());
      assertNull(dynamicClassLoader0.getId());
      assertEquals(2000L, dynamicClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(dynamicClassLoader0.isJarCacheEnabled());
      assertNotNull(dynamicClassLoader0);
      
      SystemClassLoader systemClassLoader0 = new SystemClassLoader(dynamicClassLoader0);
      assertEquals(0, mergePath0.getNumberOfLinks());
      assertEquals(0, mergePath0.getUser());
      assertEquals(0, mergePath0.getGroup());
      assertEquals('/', mergePath0.getFileSeparatorChar());
      assertEquals("", mergePath0.getTail());
      assertEquals("/", mergePath0.getUserPath());
      assertFalse(mergePath0.isBlockDevice());
      assertEquals(0, mergePath0.getOwner());
      assertFalse(mergePath0.isWindows());
      assertEquals(':', mergePath0.getPathSeparatorChar());
      assertFalse(mergePath0.isSymbolicLink());
      assertFalse(mergePath0.isFIFO());
      assertEquals(0L, mergePath0.getInode());
      assertEquals(0L, mergePath0.getDevice());
      assertEquals(0L, mergePath0.getDeviceId());
      assertFalse(mergePath0.isCharacterDevice());
      assertEquals(0L, mergePath0.getDiskSpaceFree());
      assertEquals(0L, mergePath0.getBlockSize());
      assertEquals(0L, mergePath0.getBlockCount());
      assertFalse(mergePath0.isHardLink());
      assertFalse(mergePath0.isLink());
      assertFalse(mergePath0.isSocket());
      assertEquals("/", mergePath0.getPath());
      assertEquals("application/octet-stream", mergePath0.getContentType());
      assertNull(mergePath0.readLink());
      assertEquals(0L, mergePath0.getLastStatusChangeTime());
      assertEquals(0L, mergePath0.getDiskSpaceTotal());
      assertFalse(dynamicClassLoader0.isJarCacheEnabledDefault());
      assertNull(dynamicClassLoader0.getId());
      assertEquals(2000L, dynamicClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(dynamicClassLoader0.isJarCacheEnabled());
      assertEquals(2000L, systemClassLoader0.getGlobalDependencyCheckInterval());
      assertFalse(systemClassLoader0.isJarCacheEnabled());
      assertFalse(systemClassLoader0.isJarCacheEnabledDefault());
      assertEquals("system", systemClassLoader0.getId());
      assertNotNull(systemClassLoader0);
      
      try { 
        hookHotDeployListener0.initModelListener("org.hibernate.cacheRegion", "org.hibernate.cacheRegion", systemClassLoader0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // org.hibernate.cacheRegion in SystemClassLoader[system,NEW]
         //
         verifyException("com.caucho.loader.DynamicClassLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HookHotDeployListener hookHotDeployListener0 = new HookHotDeployListener();
      assertNotNull(hookHotDeployListener0);
      
      // Undeclared exception!
      try { 
        hookHotDeployListener0.getPersistence("`\"[");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
