/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 08:28:55 GMT 2020
 */

package com.liferay.portal.lar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.liferay.portal.kernel.xml.Element;
import com.liferay.portal.kernel.zip.ZipReader;
import com.liferay.portal.lar.CurrentUserIdStrategy;
import com.liferay.portal.lar.PortletDataContextImpl;
import com.liferay.portal.lar.PortletImporter;
import com.liferay.portal.model.Layout;
import com.liferay.portal.model.User;
import com.liferay.portal.model.UserWrapper;
import com.liferay.portal.model.impl.PortletAppImpl;
import com.liferay.portal.xml.ElementImpl;
import com.liferay.portal.xml.SAXReaderImpl;
import com.liferay.portal.zip.ZipReaderImpl;
import com.liferay.portal.zip.ZipWriterImpl;
import com.liferay.portlet.ActionResponseImpl;
import com.liferay.portlet.PortalPreferencesImpl;
import com.liferay.portlet.PortalPreferencesWrapper;
import com.liferay.portlet.PortletPreferencesImpl;
import com.liferay.portlet.Preference;
import com.liferay.portlet.asset.model.AssetCategory;
import com.liferay.portlet.asset.model.AssetCategoryWrapper;
import com.liferay.portlet.asset.model.AssetTag;
import com.liferay.portlet.asset.model.AssetTagWrapper;
import com.liferay.portlet.asset.model.AssetVocabulary;
import com.liferay.portlet.asset.model.AssetVocabularyWrapper;
import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.portlet.PortletPreferences;
import org.apache.axis.utils.LockableHashtable;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.dom4j.QName;
import org.dom4j.tree.BaseElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.testng.xml.XmlSuite;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PortletImporter_ESTest extends PortletImporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      com.liferay.portal.kernel.lar.UserIdStrategy userIdStrategy0 = portletImporter0.getUserIdStrategy((User) null, "AlgorithmParameterGenerator.");
      ActionResponseImpl actionResponseImpl0 = new ActionResponseImpl();
      Map<String, String[]> map0 = actionResponseImpl0.getRenderParameterMap();
      CompilerConfiguration compilerConfiguration0 = CompilerConfiguration.DEFAULT;
      Set<String> set0 = compilerConfiguration0.getScriptExtensions();
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(789L, 789L, map0, set0, userIdStrategy0, (ZipReader) null);
      try { 
        portletImporter0.updatePortletPreferences(portletDataContextImpl0, 789L, (-1292), 0L, "current scope.", "AlgorithmParameterGenerator.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BeanLocator has not been set
         //
         verifyException("com.liferay.portal.kernel.bean.PortalBeanLocatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.updatePortletPreferences((com.liferay.portal.kernel.lar.PortletDataContext) null, (-3144L), 2281, 3763L, "R5sRLbgQ", "Group_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BeanLocator has not been set
         //
         verifyException("com.liferay.portal.kernel.bean.PortalBeanLocatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.updateAssetPublisherPortletPreferences((com.liferay.portal.kernel.lar.PortletDataContext) null, 2943L, (-145L), (-1244), 399L, "No AssetTag exists with the key {groupIV=", "C,,63Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BeanLocator has not been set
         //
         verifyException("com.liferay.portal.kernel.bean.PortalBeanLocatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.getAssetVocabularyName("AlgorithmParameterGenerator.", (-3209L), "-debug", 1175);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BeanLocator has not been set
         //
         verifyException("com.liferay.portal.kernel.bean.PortalBeanLocatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      ActionResponseImpl actionResponseImpl0 = new ActionResponseImpl();
      Map<String, String[]> map0 = actionResponseImpl0.getProperties();
      MockFile mockFile0 = new MockFile("B^3=v'zQ|{su<oUD}");
      try { 
        portletImporter0.doImportPortletInfo(65535L, 1L, 86400000L, "-debug", map0, mockFile0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BeanLocator has not been set
         //
         verifyException("com.liferay.portal.kernel.bean.PortalBeanLocatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      ActionResponseImpl actionResponseImpl0 = new ActionResponseImpl();
      Map<String, String[]> map0 = actionResponseImpl0.getProperties();
      PortletAppImpl portletAppImpl0 = new PortletAppImpl("C,,63Y");
      Set<String> set0 = portletAppImpl0.getServletURLPatterns();
      File file0 = MockFile.createTempFile("C,,63Y", "C,,63Y");
      ZipWriterImpl zipWriterImpl0 = new ZipWriterImpl(file0);
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(0L, 3540L, map0, set0, (Date) null, (Date) null, zipWriterImpl0);
      String string0 = portletImporter0.getAssetCategoryPath(portletDataContextImpl0, 3540L);
      assertEquals("/groups/0/categories/3540.xml", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.updateAssetPublisherGlobalScopeId((PortletPreferences) null, "lQhE{J-?p*Fo", 2327L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      try { 
        portletImporter0.updateAssetPublisherGlobalScopeId(portletPreferencesImpl0, (String) null, (-3026L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.BasePreferencesImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      PortalPreferencesWrapper portalPreferencesWrapper0 = new PortalPreferencesWrapper(portalPreferencesImpl0);
      Class<ElementImpl> class0 = ElementImpl.class;
      try { 
        portletImporter0.updateAssetPublisherClassPKs((com.liferay.portal.kernel.lar.PortletDataContext) null, portalPreferencesWrapper0, (String) null, class0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.BasePreferencesImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      PortalPreferencesWrapper portalPreferencesWrapper0 = new PortalPreferencesWrapper(portalPreferencesImpl0);
      try { 
        portletImporter0.updateAssetPublisherClassNameIds(portalPreferencesWrapper0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.BasePreferencesImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      SAXReaderImpl sAXReaderImpl0 = new SAXReaderImpl();
      Element element0 = sAXReaderImpl0.createElement("H^GqS");
      // Undeclared exception!
      try { 
        portletImporter0.setPortletScope((com.liferay.portal.kernel.lar.PortletDataContext) null, element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      // Undeclared exception!
      try { 
        portletImporter0.resetPortletScope((com.liferay.portal.kernel.lar.PortletDataContext) null, 1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.readRatingsEntries((com.liferay.portal.kernel.lar.PortletDataContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.readLocks((com.liferay.portal.kernel.lar.PortletDataContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.readExpandoTables((com.liferay.portal.kernel.lar.PortletDataContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.readComments((com.liferay.portal.kernel.lar.PortletDataContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.readAssetTags((com.liferay.portal.kernel.lar.PortletDataContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.readAssetLinks((com.liferay.portal.kernel.lar.PortletDataContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.readAssetCategories((com.liferay.portal.kernel.lar.PortletDataContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.importPortletPreferences((com.liferay.portal.kernel.lar.PortletDataContext) null, 2407, 2407, (Layout) null, "layout.ajax.render.enable", (Element) null, false, true, true, true, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BeanLocator has not been set
         //
         verifyException("com.liferay.portal.kernel.bean.PortalBeanLocatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.importPortletData((com.liferay.portal.kernel.lar.PortletDataContext) null, (String) null, (com.liferay.portal.model.PortletPreferences) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.importPortletData((com.liferay.portal.kernel.lar.PortletDataContext) null, "D7u0FRG%~p\"lrvj?H#", 178L, (Element) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BeanLocator has not been set
         //
         verifyException("com.liferay.portal.kernel.bean.PortalBeanLocatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      Hashtable<Long, Long> hashtable0 = new Hashtable<Long, Long>(1513);
      AssetVocabularyWrapper assetVocabularyWrapper0 = new AssetVocabularyWrapper((AssetVocabulary) null);
      try { 
        portletImporter0.importAssetVocabulary((com.liferay.portal.kernel.lar.PortletDataContext) null, hashtable0, (Element) null, assetVocabularyWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.asset.model.AssetVocabularyWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      ElementImpl elementImpl0 = new ElementImpl((org.dom4j.Element) null);
      AssetTagWrapper assetTagWrapper0 = new AssetTagWrapper((AssetTag) null);
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      // Undeclared exception!
      try { 
        portletImporter0.importAssetTag((com.liferay.portal.kernel.lar.PortletDataContext) null, hashMap0, elementImpl0, assetTagWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.asset.model.AssetTagWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      XmlSuite xmlSuite0 = new XmlSuite();
      Map<String, String> map0 = xmlSuite0.getAllParameters();
      AssetCategoryWrapper assetCategoryWrapper0 = new AssetCategoryWrapper((AssetCategory) null);
      try { 
        portletImporter0.importAssetCategory((com.liferay.portal.kernel.lar.PortletDataContext) null, hashMap0, hashMap0, map0, (Element) null, assetCategoryWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portlet.asset.model.AssetCategoryWrapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      // Undeclared exception!
      try { 
        portletImporter0.getAssetVocabularyTitleMap((AssetVocabulary) null, "ri)S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      // Undeclared exception!
      try { 
        portletImporter0.getAssetCategoryTitleMap((AssetCategory) null, "vocabularies");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.getAssetCategoryName("permissions. It will be imported into the ", (-612L), (-2768L), "}Eg$_l@", 1073);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BeanLocator has not been set
         //
         verifyException("com.liferay.portal.kernel.bean.PortalBeanLocatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.deletePortletData((com.liferay.portal.kernel.lar.PortletDataContext) null, "6vwV@jRwALdm", (com.liferay.portal.model.PortletPreferences) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      try { 
        portletImporter0.deletePortletData((com.liferay.portal.kernel.lar.PortletDataContext) null, "category", (-32768L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // BeanLocator has not been set
         //
         verifyException("com.liferay.portal.kernel.bean.PortalBeanLocatorUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();
      MockFile mockFile0 = new MockFile("vYO. Y-!");
      ZipReaderImpl zipReaderImpl0 = new ZipReaderImpl(mockFile0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl((-10L), (-10L), hashMap0, linkedHashSet0, (com.liferay.portal.kernel.lar.UserIdStrategy) null, zipReaderImpl0);
      portletImporter0.readRatingsEntries(portletDataContextImpl0);
      assertNull(portletDataContextImpl0.getScopeLayoutUuid());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();
      MockFile mockFile0 = new MockFile("HTTPS_INITIAL", "HTTPS_INITIAL");
      ZipReaderImpl zipReaderImpl0 = new ZipReaderImpl(mockFile0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(481L, 481L, hashMap0, linkedHashSet0, (com.liferay.portal.kernel.lar.UserIdStrategy) null, zipReaderImpl0);
      portletImporter0.readExpandoTables(portletDataContextImpl0);
      assertTrue(portletDataContextImpl0.isDataStrategyMirror());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      ActionResponseImpl actionResponseImpl0 = new ActionResponseImpl();
      Map<String, String[]> map0 = actionResponseImpl0.getProperties();
      MockFile mockFile0 = new MockFile("B^3=v'zQ|{su<oUD}");
      // Undeclared exception!
      try { 
        portletImporter0.importPortletInfo(0L, 0L, 0L, "-debug", map0, mockFile0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class com.liferay.portal.servlet.filters.cache.CacheUtil
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      Hashtable<String, Preference> hashtable0 = new Hashtable<String, Preference>();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl("-debug", hashtable0);
      portletImporter0.updateAssetPublisherGlobalScopeId(portletPreferencesImpl0, "b", 0L);
      assertEquals(0, portletPreferencesImpl0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      PortalPreferencesWrapper portalPreferencesWrapper0 = new PortalPreferencesWrapper(portalPreferencesImpl0);
      portalPreferencesImpl0.setValue("auth.login.site.url", "|wd_");
      portletImporter0.updateAssetPublisherGlobalScopeId(portalPreferencesWrapper0, "auth.login.site.url", (-3034L));
      assertEquals(1, portalPreferencesImpl0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      ActionResponseImpl actionResponseImpl0 = new ActionResponseImpl();
      Map<String, String[]> map0 = actionResponseImpl0.getProperties();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      UserWrapper userWrapper0 = new UserWrapper((User) null);
      CurrentUserIdStrategy currentUserIdStrategy0 = new CurrentUserIdStrategy(userWrapper0);
      MockFile mockFile0 = new MockFile("B^3=v'zQ|{su<oUD}");
      ZipReaderImpl zipReaderImpl0 = new ZipReaderImpl(mockFile0);
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(0L, 0L, map0, set0, currentUserIdStrategy0, zipReaderImpl0);
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      PortalPreferencesWrapper portalPreferencesWrapper0 = new PortalPreferencesWrapper(portalPreferencesImpl0);
      Class<UserWrapper> class0 = UserWrapper.class;
      portletImporter0.updateAssetPublisherClassPKs(portletDataContextImpl0, portalPreferencesWrapper0, "\"+ro", class0, 0L);
      assertEquals(0L, portletDataContextImpl0.getSourceGroupId());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      PortalPreferencesWrapper portalPreferencesWrapper0 = new PortalPreferencesWrapper(portalPreferencesImpl0);
      portalPreferencesImpl0.setValue("'e;M_C:b;.U:)Vt$1$", "#OQ7Y+nNF");
      Class<ElementImpl> class0 = ElementImpl.class;
      try { 
        portletImporter0.updateAssetPublisherClassPKs((com.liferay.portal.kernel.lar.PortletDataContext) null, portalPreferencesWrapper0, "'e;M_C:b;.U:)Vt$1$", class0, 36028797018963968L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      PortletPreferencesImpl portletPreferencesImpl0 = new PortletPreferencesImpl();
      portletImporter0.updateAssetPublisherClassNameIds(portletPreferencesImpl0, "vocabularies");
      assertEquals(0L, portletPreferencesImpl0.getOwnerId());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      PortalPreferencesImpl portalPreferencesImpl0 = new PortalPreferencesImpl();
      PortalPreferencesWrapper portalPreferencesWrapper0 = new PortalPreferencesWrapper(portalPreferencesImpl0);
      portalPreferencesImpl0.setValue("lbxhE{JU?p*Fo", "lbxhE{JU?p*Fo");
      portletImporter0.updateAssetPublisherClassNameIds(portalPreferencesWrapper0, "lbxhE{JU?p*Fo");
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      MockFile mockFile0 = new MockFile("", "");
      ZipReaderImpl zipReaderImpl0 = new ZipReaderImpl(mockFile0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(1892L, 1892L, hashMap0, linkedHashSet0, (com.liferay.portal.kernel.lar.UserIdStrategy) null, zipReaderImpl0);
      BaseElement baseElement0 = new BaseElement((QName) null);
      ElementImpl elementImpl0 = new ElementImpl(baseElement0);
      portletImporter0.setPortletScope(portletDataContextImpl0, elementImpl0);
      assertEquals(0L, portletDataContextImpl0.getOldPlid());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      CurrentUserIdStrategy currentUserIdStrategy0 = new CurrentUserIdStrategy((User) null);
      MockFile mockFile0 = new MockFile("ij2gMR");
      ZipReaderImpl zipReaderImpl0 = new ZipReaderImpl(mockFile0);
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(0L, 30L, hashMap0, set0, currentUserIdStrategy0, zipReaderImpl0);
      portletImporter0.readLocks(portletDataContextImpl0);
      assertEquals(0L, portletDataContextImpl0.getOldPlid());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      ActionResponseImpl actionResponseImpl0 = new ActionResponseImpl();
      Map<String, String[]> map0 = actionResponseImpl0.getProperties();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      UserWrapper userWrapper0 = new UserWrapper((User) null);
      CurrentUserIdStrategy currentUserIdStrategy0 = new CurrentUserIdStrategy(userWrapper0);
      MockFile mockFile0 = new MockFile("B^3=v'zQ|{su<oUD}");
      ZipReaderImpl zipReaderImpl0 = new ZipReaderImpl(mockFile0);
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(0L, 0L, map0, set0, currentUserIdStrategy0, zipReaderImpl0);
      portletImporter0.readComments(portletDataContextImpl0);
      assertNull(portletDataContextImpl0.getScopeLayoutUuid());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      ActionResponseImpl actionResponseImpl0 = new ActionResponseImpl();
      Map<String, String[]> map0 = actionResponseImpl0.getProperties();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      UserWrapper userWrapper0 = new UserWrapper((User) null);
      CurrentUserIdStrategy currentUserIdStrategy0 = new CurrentUserIdStrategy(userWrapper0);
      MockFile mockFile0 = new MockFile("B^3=v'zQ|{su<oUD}");
      ZipReaderImpl zipReaderImpl0 = new ZipReaderImpl(mockFile0);
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(0L, 0L, map0, set0, currentUserIdStrategy0, zipReaderImpl0);
      portletImporter0.readAssetTags(portletDataContextImpl0);
      assertEquals(0L, portletDataContextImpl0.getGroupId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      ActionResponseImpl actionResponseImpl0 = new ActionResponseImpl();
      Map<String, String[]> map0 = actionResponseImpl0.getProperties();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      UserWrapper userWrapper0 = new UserWrapper((User) null);
      CurrentUserIdStrategy currentUserIdStrategy0 = new CurrentUserIdStrategy(userWrapper0);
      MockFile mockFile0 = new MockFile("B^3=v'zQ|{su<oUD}");
      ZipReaderImpl zipReaderImpl0 = new ZipReaderImpl(mockFile0);
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(0L, 0L, map0, set0, currentUserIdStrategy0, zipReaderImpl0);
      portletImporter0.readAssetLinks(portletDataContextImpl0);
      assertEquals(0L, portletDataContextImpl0.getSourceGroupId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      ActionResponseImpl actionResponseImpl0 = new ActionResponseImpl();
      Map<String, String[]> map0 = actionResponseImpl0.getProperties();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      UserWrapper userWrapper0 = new UserWrapper((User) null);
      CurrentUserIdStrategy currentUserIdStrategy0 = new CurrentUserIdStrategy(userWrapper0);
      MockFile mockFile0 = new MockFile("B^3=v'zQ|{su<oUD}");
      ZipReaderImpl zipReaderImpl0 = new ZipReaderImpl(mockFile0);
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(0L, 0L, map0, set0, currentUserIdStrategy0, zipReaderImpl0);
      portletImporter0.readAssetCategories(portletDataContextImpl0);
      assertNull(portletDataContextImpl0.getScopeType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      com.liferay.portal.kernel.lar.UserIdStrategy userIdStrategy0 = portletImporter0.getUserIdStrategy((User) null, "ALWAYS_CURRENT_USER_ID");
      assertNotNull(userIdStrategy0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      AssetVocabulary assetVocabulary0 = mock(AssetVocabulary.class, new ViolatedAssumptionAnswer());
      doReturn((LockableHashtable) null).when(assetVocabulary0).getTitleMap();
      AssetVocabularyWrapper assetVocabularyWrapper0 = new AssetVocabularyWrapper(assetVocabulary0);
      Map<Locale, String> map0 = portletImporter0.getAssetVocabularyTitleMap(assetVocabularyWrapper0, "");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      AssetVocabulary assetVocabulary0 = mock(AssetVocabulary.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(assetVocabulary0).getTitleMap();
      AssetVocabularyWrapper assetVocabularyWrapper0 = new AssetVocabularyWrapper(assetVocabulary0);
      Map<Locale, String> map0 = portletImporter0.getAssetVocabularyTitleMap(assetVocabularyWrapper0, "");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      AssetCategory assetCategory0 = mock(AssetCategory.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(assetCategory0).getTitleMap();
      AssetCategoryWrapper assetCategoryWrapper0 = new AssetCategoryWrapper(assetCategory0);
      Map<Locale, String> map0 = portletImporter0.getAssetCategoryTitleMap(assetCategoryWrapper0, "");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      // Undeclared exception!
      try { 
        portletImporter0.getAssetCategoryPath((com.liferay.portal.kernel.lar.PortletDataContext) null, (-2698L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.liferay.portal.lar.PortletImporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PortletImporter portletImporter0 = new PortletImporter();
      File file0 = MockFile.createTempFile("group-id", (String) null);
      ZipWriterImpl zipWriterImpl0 = new ZipWriterImpl(file0);
      PortletDataContextImpl portletDataContextImpl0 = new PortletDataContextImpl(0L, 0L, (Map<String, String[]>) null, (Set<String>) null, (Date) null, (Date) null, zipWriterImpl0);
      portletImporter0.resetPortletScope(portletDataContextImpl0, 0L);
      assertFalse(portletDataContextImpl0.hasDateRange());
  }
}
