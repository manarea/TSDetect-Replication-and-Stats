/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 08:24:09 GMT 2020
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.beans.EventSetDescriptor;
import java.beans.MethodDescriptor;
import java.io.InputStream;
import java.lang.reflect.Method;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.converters.TextDirectoryLoader;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.Loader;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainingSetEvent;

 
public class SubstringLabelerTest { 

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextViewer textViewer0 = new TextViewer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(textViewer0, instances0, 105, (-1450263340), (-3643), 1702);
      substringLabeler0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.m_nominalBinary = true;
      boolean boolean0 = substringLabeler0.isBusy();
      assertFalse(boolean0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.setEnvironment((Environment) null);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.setConsumeNonMatching(true);
      boolean boolean0 = substringLabeler0.isBusy();
      assertTrue(substringLabeler0.getConsumeNonMatching());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.setNominalBinary(true);
      boolean boolean0 = substringLabeler0.getConsumeNonMatching();
      assertTrue(substringLabeler0.getNominalBinary());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("@relation", false, true, "yM7{uVK\"z^gJ8_SFB");
      String string0 = substringLabeler_Match0.toStringInternal();
      assertEquals("yM7{uVK\"z^gJ8_SFB@@MR@@f@@MR@@t@@MR@@@relation@@MR@@", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Environment environment0 = flowByExpression0.m_env;
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("is not a string attribute - ", true, true, ".bsi");
      substringLabeler_Match0.init(environment0, instances0);
      substringLabeler_Match0.setLabel("@data");
      substringLabeler_Match0.apply("is not a string attribute - ");
      assertEquals("@data", substringLabeler_Match0.getLabel());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Environment environment0 = flowByExpression0.m_env;
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("testSet", false, true, ".arff");
      substringLabeler_Match0.init(environment0, instances0);
      String string0 = substringLabeler_Match0.apply(".bsi");
      assertTrue(substringLabeler_Match0.getIgnoreCase());
      assertNull(string0);
      assertEquals(".arff", substringLabeler_Match0.getAttsToApplyTo());
      assertFalse(substringLabeler_Match0.getRegex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Environment environment0 = flowByExpression0.m_env;
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("", false, true, "D}q{(t83");
      substringLabeler_Match0.init(environment0, instances0);
      String string0 = substringLabeler_Match0.apply("Match");
      assertNotNull(string0);
      assertTrue(substringLabeler_Match0.getIgnoreCase());
      assertEquals("D}q{(t83", substringLabeler_Match0.getAttsToApplyTo());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Sorter sorter0 = new Sorter();
      Environment environment0 = sorter0.m_env;
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("/first", true, true, "/first");
      substringLabeler_Match0.init(environment0, instances0);
      String string0 = substringLabeler_Match0.apply("#~l_beoV=R&");
      assertNull(string0);
      assertEquals("/first", substringLabeler_Match0.getMatch());
      assertTrue(substringLabeler_Match0.getIgnoreCase());
      assertEquals("/first", substringLabeler_Match0.getAttsToApplyTo());
      assertTrue(substringLabeler_Match0.getRegex());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Environment environment0 = flowByExpression0.m_env;
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("CorrelationAttributeEval :\n\nEvaluates the worth of an attribute by measuring the correlation (Pearson's) between it and the class.\n\nNominal attributes are considered on a value by value basis by treating each value as an indicator. An overall correlation for a nominal attribute is arrived at via a weighted average.\n", true, true, "CorrelationAttributeEval :\n\nEvaluates the worth of an attribute by measuring the correlation (Pearson's) between it and the class.\n\nNominal attributes are considered on a value by value basis by treating each value as an indicator. An overall correlation for a nominal attribute is arrived at via a weighted average.\n");
      substringLabeler_Match0.init(environment0, instances0);
      assertEquals("CorrelationAttributeEval :\n\nEvaluates the worth of an attribute by measuring the correlation (Pearson's) between it and the class.\n\nNominal attributes are considered on a value by value basis by treating each value as an indicator. An overall correlation for a nominal attribute is arrived at via a weighted average.\n", substringLabeler_Match0.getMatch());
      assertTrue(substringLabeler_Match0.getIgnoreCase());
      assertTrue(substringLabeler_Match0.getRegex());
      assertEquals("CorrelationAttributeEval :\n\nEvaluates the worth of an attribute by measuring the correlation (Pearson's) between it and the class.\n\nNominal attributes are considered on a value by value basis by treating each value as an indicator. An overall correlation for a nominal attribute is arrived at via a weighted average.\n", substringLabeler_Match0.getAttsToApplyTo());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("testSet", true, false, "$rXaxb~D");
      String string0 = substringLabeler_Match0.getAttsToApplyTo();
      assertNotNull(string0);
      assertFalse(substringLabeler_Match0.getIgnoreCase());
      assertEquals("$rXaxb~D", string0);
      assertTrue(substringLabeler_Match0.getRegex());
      assertEquals("testSet", substringLabeler_Match0.getMatch());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match(":3/G~Q/{e", false, false, "r");
      substringLabeler_Match0.setAttsToApplyTo("r");
      assertFalse(substringLabeler_Match0.getIgnoreCase());
      assertEquals("r", substringLabeler_Match0.getAttsToApplyTo());
      assertEquals(":3/G~Q/{e", substringLabeler_Match0.getMatch());
      assertFalse(substringLabeler_Match0.getRegex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match(":3/G~Q/{e", false, false, "r");
      assertFalse(substringLabeler_Match0.getIgnoreCase());
      
      substringLabeler_Match0.m_ignoreCase = true;
      boolean boolean0 = substringLabeler_Match0.getIgnoreCase();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("", false, false, "");
      assertFalse(substringLabeler_Match0.getRegex());
      
      substringLabeler_Match0.m_regex = true;
      boolean boolean0 = substringLabeler_Match0.getRegex();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("@relation", false, false, "Attribute '");
      assertFalse(substringLabeler_Match0.getRegex());
      
      substringLabeler_Match0.setRegex(true);
      assertTrue(substringLabeler_Match0.getRegex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("[ignore case]", false, false, "");
      substringLabeler_Match0.setMatch("iers");
      assertEquals("iers", substringLabeler_Match0.getMatch());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      substringLabeler0.makeOutputStructure(instances0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      // Undeclared exception!
      try { 
        substringLabeler_Match0.parseFromInternal("Finished");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed match definition: Finished
         //
         verifyException("weka.gui.beans.SubstringLabeler$Match", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      String string0 = substringLabeler0.statusMessagePrefix();
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler$3|", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStructure(instances0);
      substringLabeler0.acceptInstance(instanceEvent0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2248.5371), doubleArray0);
      substringLabeler0.makeOutputInstance(binarySparseInstance0, true);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStructure(instances0);
      substringLabeler0.acceptInstance(instanceEvent0);
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2248.5371), doubleArray0);
      substringLabeler0.makeOutputInstance(binarySparseInstance0, true);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.m_nominalBinary = true;
      boolean boolean0 = substringLabeler0.getNominalBinary();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.m_matchDetails = "[ignore case]";
      substringLabeler0.getMatchDetails();
      assertEquals("[ignore case]", substringLabeler0.getMatchDetails());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      
      Loader loader0 = new Loader();
      loader0.setCustomName((String) null);
      BeanVisual beanVisual0 = loader0.getVisual();
      substringLabeler0.setVisual(beanVisual0);
      String string0 = substringLabeler0.getCustomName();
      assertNull(string0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.setVisual((BeanVisual) null);
      // Undeclared exception!
      try { 
        substringLabeler0.setCustomName("V7nmsd'gQAUPxt9`:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.SubstringLabeler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      try { 
        substringLabeler0.makeOutputStructure((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      // Undeclared exception!
      try { 
        substringLabeler0.makeOutputInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.SubstringLabeler", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      substringLabeler0.connectionNotification("testSet", clustererPerformanceEvaluator0);
      // Undeclared exception!
      try { 
        substringLabeler0.eventGeneratable((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      // Undeclared exception!
      try { 
        substringLabeler0.connectionNotification((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      // Undeclared exception!
      try { 
        substringLabeler0.connectionAllowed((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      // Undeclared exception!
      try { 
        substringLabeler0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.SubstringLabeler", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      // Undeclared exception!
      try { 
        substringLabeler0.acceptTrainingSet((TrainingSetEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.SubstringLabeler", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      // Undeclared exception!
      try { 
        substringLabeler0.acceptTestSet((TestSetEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.SubstringLabeler", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instances0, instances0);
      substringLabeler0.acceptDataSet(dataSetEvent0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.acceptDataSet((DataSetEvent) null);
      assertFalse(substringLabeler0.isBusy());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      substringLabeler0.connectionNotification("testSet", clustererPerformanceEvaluator0);
      boolean boolean0 = substringLabeler0.connectionAllowed("testSet");
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = substringLabeler0.connectionAllowed("testSet");
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = substringLabeler0.connectionAllowed("trainingSet");
      assertTrue(boolean0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = substringLabeler0.connectionAllowed("instance");
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertTrue(boolean0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = substringLabeler0.connectionAllowed("dataSet");
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertTrue(boolean0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = substringLabeler0.connectionAllowed("q6_#bjo");
      assertFalse(boolean0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.stop();
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.useDefaultVisual();
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      String string0 = substringLabeler0.getCustomName();
      assertEquals("SubstringLabeler", string0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      substringLabeler0.setLog(logPanel0);
      Environment environment0 = Environment.getSystemWide();
      DataSetEvent dataSetEvent0 = new DataSetEvent(environment0, (Instances) null);
      substringLabeler0.acceptDataSet(dataSetEvent0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus(2);
      substringLabeler0.acceptInstance(instanceEvent0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      double[] doubleArray0 = new double[3];
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      instanceEvent0.setInstance(sparseInstance0);
      instanceEvent0.setStatus((-1628142724));
      // Undeclared exception!
      try { 
        substringLabeler0.acceptInstance(instanceEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.SubstringLabeler", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InstanceEvent instanceEvent0 = new InstanceEvent(instances0, instances0);
      substringLabeler0.acceptInstance(instanceEvent0);
      substringLabeler0.makeOutputInstance((Instance) null, true);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus(1);
      substringLabeler0.acceptInstance(instanceEvent0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.disconnectionNotification((String) null, (Object) null);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      FlowByExpression.BracketNode flowByExpression_BracketNode0 = new FlowByExpression.BracketNode();
      substringLabeler0.disconnectionNotification(".bsi", flowByExpression_BracketNode0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      substringLabeler0.connectionNotification("testSet", clustererPerformanceEvaluator0);
      substringLabeler0.connectionNotification("testSet", clustererPerformanceEvaluator0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.connectionNotification("trainingSet", "trainingSet");
      substringLabeler0.stop();
      assertFalse(substringLabeler0.isBusy());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      substringLabeler0.setLog(logPanel0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      substringLabeler0.acceptInstance(instanceEvent0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      substringLabeler0.connectionNotification("testSet", clustererPerformanceEvaluator0);
      substringLabeler0.stop();
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.connectionNotification("testSet", "testSet");
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      substringLabeler0.acceptInstance(instanceEvent0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertFalse(substringLabeler0.isBusy());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean0 = substringLabeler0.eventGeneratable("{");
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      substringLabeler0.connectionNotification("testSet", clustererPerformanceEvaluator0);
      boolean boolean0 = substringLabeler0.eventGeneratable("testSet");
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertFalse(boolean0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("@relation", true, true, ".bsi");
      String string0 = substringLabeler_Match0.toStringInternal();
      assertEquals(".bsi@@MR@@t@@MR@@t@@MR@@@relation@@MR@@", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      String string0 = substringLabeler_Match0.toStringInternal();
      assertEquals("@@MR@@f@@MR@@f@@MR@@@@MR@@", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      substringLabeler_Match0.setLabel("75I%2k.VI|HF");
      substringLabeler_Match0.toString();
      assertEquals("75I%2k.VI|HF", substringLabeler_Match0.getLabel());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      String string0 = substringLabeler_Match0.toString();
      assertEquals("Substring:     [Atts: ]", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match((String) null, true, true, "Warning: Found missing value in test set, filling in values.");
      String string0 = substringLabeler_Match0.toString();
      assertEquals("Regex: null  [ignore case]  [Atts: Warning: Found missing value in test set, filling in values.]", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("hMb$tP", false, true, "hMb$tP");
      String string0 = substringLabeler_Match0.toString();
      assertEquals("Substring: hMb$tP  [ignore case]  [Atts: hMb$tP]", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Environment environment0 = new Environment();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      substringLabeler_Match0.init(environment0, instances0);
      String string0 = substringLabeler_Match0.apply(".arff");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      substringLabeler_Match0.m_matchS = "%lK^8[";
      String string0 = substringLabeler_Match0.apply("#~l_beoV=R&");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      String string0 = substringLabeler_Match0.apply("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      String string0 = substringLabeler_Match0.apply((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("Cover trees for nearest neighbor", true, true, "Cover trees for nearest neighbor");
      // Undeclared exception!
      try { 
        substringLabeler_Match0.apply("Cover trees for nearest neighbor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.SubstringLabeler$Match", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      int[] intArray0 = new int[5];
      substringLabeler_Match0.m_selectedAtts = intArray0;
      double[] doubleArray0 = new double[4];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(103, doubleArray0);
      // Undeclared exception!
      try { 
        substringLabeler_Match0.apply(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Environment environment0 = Environment.getSystemWide();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      substringLabeler_Match0.init(environment0, instances0);
      String string0 = substringLabeler_Match0.apply((Instance) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Environment environment0 = new Environment();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match(".arff", false, false, "last");
      substringLabeler_Match0.init(environment0, instances0);
      assertFalse(substringLabeler_Match0.getRegex());
      assertFalse(substringLabeler_Match0.getIgnoreCase());
      assertEquals(".arff", substringLabeler_Match0.getMatch());
      assertEquals("last", substringLabeler_Match0.getAttsToApplyTo());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Environment environment0 = Environment.getSystemWide();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("Regex: ", true, false, ".arff");
      substringLabeler_Match0.init(environment0, instances0);
      assertEquals(".arff", substringLabeler_Match0.getAttsToApplyTo());
      assertFalse(substringLabeler_Match0.getIgnoreCase());
      assertTrue(substringLabeler_Match0.getRegex());
      assertEquals("Regex: ", substringLabeler_Match0.getMatch());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("trainingSet", false, false, "instance");
      String string0 = substringLabeler_Match0.getMatch();
      assertFalse(substringLabeler_Match0.getIgnoreCase());
      assertNotNull(string0);
      assertEquals("instance", substringLabeler_Match0.getAttsToApplyTo());
      assertEquals("trainingSet", string0);
      assertFalse(substringLabeler_Match0.getRegex());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match("trainingSet", false, false, "instance");
      assertFalse(substringLabeler_Match0.getIgnoreCase());
      
      substringLabeler_Match0.setIgnoreCase(true);
      assertTrue(substringLabeler_Match0.getIgnoreCase());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = null;
      try {
        substringLabeler_Match0 = new SubstringLabeler.Match("s0f8M`B>42");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed match definition: s0f8M`B>42
         //
         verifyException("weka.gui.beans.SubstringLabeler$Match", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      String string0 = substringLabeler_Match0.getLabel();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SubstringLabeler.Match substringLabeler_Match0 = new SubstringLabeler.Match();
      substringLabeler_Match0.setLabel("Gsg0\"H2C+MwC~+");
      String string0 = substringLabeler_Match0.getLabel();
      assertEquals("Gsg0\"H2C+MwC~+", substringLabeler_Match0.getLabel());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextViewer textViewer0 = new TextViewer();
      substringLabeler0.addDataSourceListener(textViewer0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      substringLabeler0.removeInstanceListener(flowByExpression0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      BeanVisual beanVisual0 = substringLabeler0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("SubstringLabeler", beanVisual0.getText());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      TestSetEvent testSetEvent0 = new TestSetEvent(attributeSummarizer0, instances0, (-1850826603), (-3643), 2, 2000);
      substringLabeler0.acceptTestSet(testSetEvent0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.addInstanceListener(substringLabeler0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Class<InputStream> class0 = InputStream.class;
      EventSetDescriptor eventSetDescriptor0 = new EventSetDescriptor("", class0, (MethodDescriptor[]) null, (Method) null, (Method) null);
      boolean boolean0 = substringLabeler0.connectionAllowed(eventSetDescriptor0);
      assertFalse(boolean0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      String string0 = substringLabeler0.getMatchAttributeName();
      assertEquals("Match", string0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      String string0 = substringLabeler0.globalInfo();
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("Matches substrings in String attributes using either literal or regular expression matches. The value of a new attribute is set to reflect the status of the match. The new attribute can be either binary (in which case values indicate match or no match) or multi-valued nominal, in which case a label must be associated with each distinct matching rule. In the case of labeled matches, the user can opt to have non matching instances output with missing value set for the new attribute or not output at all (i.e. consumed by the step).", string0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      String string0 = substringLabeler0.getMatchDetails();
      assertEquals("", string0);
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.setCustomName("=~&!HL|i");
      assertEquals("=~&!HL|i", substringLabeler0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      TextViewer textViewer0 = new TextViewer();
      substringLabeler0.removeDataSourceListener(textViewer0);
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.getNominalBinary();
      assertEquals("SubstringLabeler", substringLabeler0.getCustomName());
      assertEquals("Match", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.setMatchAttributeName("/first");
      assertEquals("/first", substringLabeler0.getMatchAttributeName());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.setMatchDetails("u");
      assertEquals("u", substringLabeler0.getMatchDetails());
  }
}
