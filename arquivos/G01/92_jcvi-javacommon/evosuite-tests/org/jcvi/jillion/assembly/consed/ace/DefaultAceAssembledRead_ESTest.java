/*
 * This file was automatically generated by EvoSuite
 * Thu May 07 08:32:05 GMT 2020
 */

package org.jcvi.jillion.assembly.consed.ace;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.ace.AceAssembledReadBuilder;
import org.jcvi.jillion.assembly.consed.ace.DefaultAceAssembledRead;
import org.jcvi.jillion.assembly.consed.ace.PhdInfo;
import org.jcvi.jillion.core.Direction;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.junit.runner.RunWith;

 
public class DefaultAceAssembledReadTest { 

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      Direction direction0 = Direction.FORWARD;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) 0, (long) 0);
      MockDate mockDate0 = new MockDate(862, 862, 0, 0, 84, 1);
      PhdInfo phdInfo0 = new PhdInfo("?qYP$MkT9}2x", "?qYP$MkT9}2x", mockDate0);
      AceAssembledReadBuilder aceAssembledReadBuilder0 = DefaultAceAssembledRead.createBuilder(nucleotideSequence0, "?qYP$MkT9}2x", nucleotideSequence1, 0, direction0, range0, phdInfo0, 1854);
      assertEquals(1854, aceAssembledReadBuilder0.getUngappedFullLength());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L).when(nucleotideSequence0).getLength();
      Direction direction0 = Direction.FORWARD;
      // Undeclared exception!
      try { 
        DefaultAceAssembledRead.createBuilder(nucleotideSequence0, "Q`fXKf\"X]A)Ngx6 )", nucleotideSequence0, 379, direction0, (Range) null, (PhdInfo) null, 379);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // read Q`fXKf\"X]A)Ngx6 ) , last offset 379 goes beyond the reference (length 0)
         //
         verifyException("org.jcvi.jillion.internal.assembly.DefaultAssembledRead$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultAceAssembledRead.IllegalReAbacus defaultAceAssembledRead_IllegalReAbacus0 = new DefaultAceAssembledRead.IllegalReAbacus(linkedList0, linkedList0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Direction direction0 = Direction.REVERSE;
      Range range0 = Range.of((long) 2816);
      // Undeclared exception!
      try { 
        DefaultAceAssembledRead.createBuilder((NucleotideSequence) null, "", (NucleotideSequence) null, 2816, direction0, range0, (PhdInfo) null, 2816);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.assembly.DefaultAssembledRead$Builder", e);
      }
  }
}
